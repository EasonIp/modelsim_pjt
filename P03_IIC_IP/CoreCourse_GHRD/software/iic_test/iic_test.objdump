
iic_test.elf:     file format elf32-littlenios2
iic_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c870 memsz 0x0000c870 flags r-x
    LOAD off    0x0000d890 vaddr 0x0000c890 paddr 0x0000d368 align 2**12
         filesz 0x00000ad8 memsz 0x00000ad8 flags rw-
    LOAD off    0x0000ee40 vaddr 0x0000de40 paddr 0x0000de40 align 2**12
         filesz 0x00000000 memsz 0x00000304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c39c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000340  0000c550  0000c550  0000d550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000ad8  0000c890  0000d368  0000d890  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  0000de40  0000de40  0000ee40  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000e368  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c38  00000000  00000000  0000e390  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001267  00000000  00000000  0000efc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002117e  00000000  00000000  0001022f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007341  00000000  00000000  000313ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012a02  00000000  00000000  000386ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001810  00000000  00000000  0004b0f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020bf  00000000  00000000  0004c900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bd1f  00000000  00000000  0004e9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0005a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005a740  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005dda0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0005dda3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005dda8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005dda9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  0005ddaa  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  0005ddb0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  0005ddb6  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0005ddbc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  0005ddc4  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003af53  00000000  00000000  0005dded  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000c550 l    d  .rodata	00000000 .rodata
0000c890 l    d  .rwdata	00000000 .rwdata
0000de40 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 oc_i2c.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000007c0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000984 l     F .text	00000058 __sprint_r
0000c5d0 l     O .rodata	00000010 blanks.3452
0000c5c0 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000029e8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000043e4 l     F .text	00000058 std
000044f0 l     F .text	00000008 __fp_lock
000044f8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c8b0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000d33c l     O .rwdata	00000004 charset
0000c604 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000c74c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000086f8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009f4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009fac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a0ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a1cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a2ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a408 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a634 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d360 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000a900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d26c l     O .rwdata	000000c4 uart_0
0000a9d8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000abd0 l     F .text	0000009c altera_avalon_uart_irq
0000ac6c l     F .text	000000e0 altera_avalon_uart_rxirq
0000ad4c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000b138 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000b360 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b604 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ba28 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bb64 l     F .text	000000dc alt_file_locked
0000bdc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c338 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000c4ec l     F .text	00000040 alt_sim_halt
000061a0 g     F .text	00000094 _mprec_log10
0000628c g     F .text	00000088 __any_on
00007a0c g     F .text	00000070 _isatty_r
0000c724 g     O .rodata	00000028 __mprec_tinytens
0000a468 g     F .text	0000006c alt_main
0000deb4 g     O .bss	00000100 alt_irq
00007a7c g     F .text	00000078 _lseek_r
0000d368 g       *ABS*	00000000 __flash_rwdata_start
00009218 g     F .text	00000088 __eqdf2
0000e144 g       *ABS*	00000000 __alt_heap_start
0000090c g     F .text	00000044 printf
0000042c g     F .text	00000038 I2CWaitTIP
00000200 g     F .text	00000094 cpr
00007464 g     F .text	00000068 __sseek
0000444c g     F .text	000000a4 __sinit
0000de6c g     O .bss	00000020 b
00005124 g     F .text	00000084 _setlocale_r
0000454c g     F .text	00000068 __sfmoreglue
0000a4f4 g     F .text	00000020 __malloc_unlock
00005c1c g     F .text	000000e0 memmove
0000453c g     F .text	00000010 _cleanup
00006314 g     F .text	000000bc _Balloc
00009328 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007998 g     F .text	00000074 _fstat_r
0000de58 g     O .bss	00000004 errno
0000de60 g     O .bss	00000004 alt_argv
00015330 g       *ABS*	00000000 _gp
0000a7b0 g     F .text	00000030 usleep
0000d0ec g     O .rwdata	00000180 alt_fd_list
000005f4 g     F .text	000001cc I2CRead
0000be48 g     F .text	00000094 alt_find_dev
00005b7c g     F .text	000000a0 memcpy
00004530 g     F .text	0000000c _cleanup_r
000094c0 g     F .text	000000f8 __floatsidf
0000baec g     F .text	00000078 alt_io_redirect
00009438 g     F .text	00000088 __ltdf2
0000c550 g       *ABS*	00000000 __DTOR_END__
000060f0 g     F .text	000000b0 __ratio
00000000  w      *UND*	00000000 malloc
00000950 g     F .text	00000034 _printf_r
000008fc g     F .text	00000008 __udivsi3
0000a10c g     F .text	000000c0 isatty
0000c634 g     O .rodata	000000c8 __mprec_tens
00005100 g     F .text	00000008 __locale_charset
0000c0b4 g     F .text	00000090 alt_icache_flush
0000de4c g     O .bss	00000004 __malloc_top_pad
0000d338 g     O .rwdata	00000004 __mb_cur_max
00005108 g     F .text	0000000c _localeconv_r
00006a0c g     F .text	0000003c __i2b
00004ae4 g     F .text	0000049c __sfvwrite_r
00000368 g     F .text	000000c4 InitI2C
000073ec g     F .text	00000070 _sbrk_r
00007af4 g     F .text	00000078 _read_r
0000ccb0 g     O .rwdata	0000000c __lc_ctype
0000d358 g     O .rwdata	00000004 alt_max_fd
00009c50 g     F .text	00000138 __unpack_d
00007874 g     F .text	00000110 _fclose_r
000043b0 g     F .text	00000034 fflush
0000de50 g     O .bss	00000004 __malloc_max_sbrked_mem
00008b88 g     F .text	00000074 __adddf3
00005fd0 g     F .text	00000120 __b2d
00008148 g     F .text	000005b0 __umoddi3
0000a318 g     F .text	000000f0 lseek
0000d334 g     O .rwdata	00000004 _global_impure_ptr
00006d88 g     F .text	000005f4 _realloc_r
0000e144 g       *ABS*	00000000 __bss_end
0000b930 g     F .text	000000f8 alt_iic_isr_register
00007b6c g     F .text	000005dc __udivdi3
0000c6fc g     O .rodata	00000028 __mprec_bigtens
00006c68 g     F .text	00000120 __s2b
00009690 g     F .text	00000194 __floatunsidf
00005ef0 g     F .text	00000060 __mcmp
0000ab08 g     F .text	000000c8 altera_avalon_uart_init
00004518 g     F .text	00000018 __fp_lock_all
0000b8e8 g     F .text	00000048 alt_ic_irq_enabled
0000de68 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000d0c4 g     O .rwdata	00000028 alt_dev_null
0000b50c g     F .text	00000044 alt_dcache_flush_all
00005dbc g     F .text	00000070 __hi0bits
000095b8 g     F .text	000000d8 __fixdfsi
0000d368 g       *ABS*	00000000 __ram_rwdata_end
0000d350 g     O .rwdata	00000008 alt_dev_list
0000a7e0 g     F .text	00000120 write
0000c890 g       *ABS*	00000000 __ram_rodata_end
00009fd8 g     F .text	000000d4 fstat
00006b48 g     F .text	00000120 __pow5mult
0000de40 g     O .bss	00000004 __nlocale_changed
00000904 g     F .text	00000008 __umodsi3
0000e144 g       *ABS*	00000000 end
0000b198 g     F .text	000001c8 altera_avalon_uart_write
0000c54c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000aa68 g     F .text	00000058 altera_avalon_uart_write_fd
000098bc g     F .text	00000080 __clzsi2
0000aac0 g     F .text	00000048 altera_avalon_uart_close_fd
0000443c g     F .text	00000004 __sfp_lock_acquire
00005a98 g     F .text	000000e4 memchr
000009dc g     F .text	00001eac ___vfprintf_internal_r
000047d0 g     F .text	00000314 _free_r
0000c33c g     F .text	000001b0 __call_exitprocs
0000de44 g     O .bss	00000004 __mlocale_changed
0000d344 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
000066d8 g     F .text	0000014c __lshift
0000a514 g     F .text	00000120 read
0000a994 g     F .text	00000044 alt_sys_init
0000c204 g     F .text	00000134 __register_exitproc
00006824 g     F .text	000001e8 __multiply
0000c890 g       *ABS*	00000000 __ram_rwdata_start
0000c550 g       *ABS*	00000000 __ram_rodata_start
0000de8c g     O .bss	00000028 __malloc_current_mallinfo
000063d0 g     F .text	0000017c __d2b
0000bffc g     F .text	000000b8 alt_get_fd
0000b3c0 g     F .text	0000014c alt_busy_sleep
00009d88 g     F .text	000000c8 __fpcmp_parts_d
00007804 g     F .text	00000070 _close_r
0000c190 g     F .text	00000074 memcmp
0000e144 g       *ABS*	00000000 __alt_stack_base
000028ac g     F .text	0000013c __swsetup_r
00008fc0 g     F .text	00000258 __divdf3
000045b4 g     F .text	000000f0 __sfp
00006234 g     F .text	00000058 __copybits
0000ccbc g     O .rwdata	00000408 __malloc_av_
00004448 g     F .text	00000004 __sinit_lock_release
00008bfc g     F .text	000003c4 __muldf3
00007548 g     F .text	00000060 __sread
0000bedc g     F .text	00000120 alt_find_file
0000b550 g     F .text	000000b4 alt_dev_llist_insert
0000a4d4 g     F .text	00000020 __malloc_lock
0000a6f4 g     F .text	000000bc sbrk
000041b4 g     F .text	000001fc _fflush_r
00007750 g     F .text	000000b4 _calloc_r
0000de40 g       *ABS*	00000000 __bss_start
00005cfc g     F .text	00000098 memset
00000294 g     F .text	000000d4 main
0000de64 g     O .bss	00000004 alt_envp
0000de54 g     O .bss	00000004 __malloc_max_total_mem
0000745c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00007984 g     F .text	00000014 fclose
0000dfb4 g     O .bss	00000190 _atexit0
00002c00 g     F .text	000015b4 _dtoa_r
00005358 g     F .text	00000740 _malloc_r
0000d35c g     O .rwdata	00000004 alt_errno
00000464 g     F .text	00000190 I2CWrite
00005048 g     F .text	000000b8 _fwalk
0000083c g     F .text	00000060 __divsi3
0000c758 g     O .rodata	00000014 __thenan_df
000046a4 g     F .text	0000012c _malloc_trim_r
0000c550 g       *ABS*	00000000 __CTOR_END__
000075a8 g     F .text	000000bc strcmp
0000c550 g       *ABS*	00000000 __flash_rodata_start
0000c550 g       *ABS*	00000000 __DTOR_LIST__
000092a0 g     F .text	00000088 __nedf2
0000a960 g     F .text	00000034 alt_irq_init
0000a694 g     F .text	00000060 alt_release_fd
0000c76c g     O .rodata	00000100 __clz_tab
0000de48 g     O .bss	00000004 _PathLocale
0000c144 g     F .text	00000014 atexit
000076d8 g     F .text	00000078 _write_r
000051a8 g     F .text	0000001c setlocale
0000d330 g     O .rwdata	00000004 _impure_ptr
0000de5c g     O .bss	00000004 alt_argc
0000b6c8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005f50 g     F .text	00000080 __ulp
0000737c g     F .text	00000040 __isinfd
00004500 g     F .text	00000018 __fp_unlock_all
0000d348 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005114 g     F .text	00000010 localeconv
0000b75c g     F .text	00000050 alt_ic_isr_register
0000d368 g       *ABS*	00000000 _edata
0000aa10 g     F .text	00000058 altera_avalon_uart_read_fd
0000e144 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000b848 g     F .text	000000a0 alt_ic_irq_disable
000074cc g     F .text	0000007c __swrite
0000d340 g     O .rwdata	00000004 __malloc_trim_threshold
0000be28 g     F .text	00000020 altera_nios2_qsys_irq_init
0000c158 g     F .text	00000038 exit
0000c890 g     O .rwdata	00000020 a
00004f80 g     F .text	000000c8 _fwalk_reent
0000654c g     F .text	0000018c __mdiff
0000089c g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004440 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000aea8 g     F .text	00000060 altera_avalon_uart_close
0000c52c g     F .text	00000020 _exit
000073bc g     F .text	00000030 __isnand
00009824 g     F .text	00000098 __muldi3
000051c4 g     F .text	00000194 __smakebuf_r
00007664 g     F .text	00000074 strlen
0000bc40 g     F .text	00000188 open
000093b0 g     F .text	00000088 __gedf2
0000b72c g     F .text	00000030 alt_icache_flush_all
0000d364 g     O .rwdata	00000004 alt_priority_mask
0000b7ac g     F .text	0000009c alt_ic_irq_enable
00002888 g     F .text	00000024 __vfprintf_internal
0000af08 g     F .text	00000230 altera_avalon_uart_read
00008b08 g     F .text	00000080 __subdf3
00005e2c g     F .text	000000c4 __lo0bits
0000b664 g     F .text	00000064 _do_ctors
00009e50 g     F .text	000000fc close
0000a22c g     F .text	00000080 alt_load
0000993c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00004444 g     F .text	00000004 __sinit_lock_acquire
00006a48 g     F .text	00000100 __multadd
00005d94 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18f7ad04 	addi	r3,r3,-8524
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18f7ad04 	addi	r3,r3,-8524
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d694cc14 	ori	gp,gp,21296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d8:	10b79014 	ori	r2,r2,56896

    movhi r3, %hi(__bss_end)
     1dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1e0:	18f85114 	ori	r3,r3,57668

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	000a22c0 	call	a22c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	000a4680 	call	a468 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <cpr>:
alt_u8 a[32] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32};
alt_u8 b[32] = {};


int cpr(alt_u8 *buf0,alt_u8 *buf1,alt_u8 num)
{
     200:	defffa04 	addi	sp,sp,-24
     204:	df000515 	stw	fp,20(sp)
     208:	df000504 	addi	fp,sp,20
     20c:	e13ffc15 	stw	r4,-16(fp)
     210:	e17ffd15 	stw	r5,-12(fp)
     214:	e1bffe05 	stb	r6,-8(fp)
	int i;
	for(i=0;i<num;i++)
     218:	e03ffb15 	stw	zero,-20(fp)
     21c:	00001406 	br	270 <cpr+0x70>
	{
		if(buf0[i] != buf1[i])
     220:	e0bffb17 	ldw	r2,-20(fp)
     224:	1007883a 	mov	r3,r2
     228:	e0bffc17 	ldw	r2,-16(fp)
     22c:	1885883a 	add	r2,r3,r2
     230:	11000003 	ldbu	r4,0(r2)
     234:	e0bffb17 	ldw	r2,-20(fp)
     238:	1007883a 	mov	r3,r2
     23c:	e0bffd17 	ldw	r2,-12(fp)
     240:	1885883a 	add	r2,r3,r2
     244:	10800003 	ldbu	r2,0(r2)
     248:	20c03fcc 	andi	r3,r4,255
     24c:	10803fcc 	andi	r2,r2,255
     250:	18800426 	beq	r3,r2,264 <cpr+0x64>
			return i + 1;
     254:	e0bffb17 	ldw	r2,-20(fp)
     258:	10800044 	addi	r2,r2,1
     25c:	e0bfff15 	stw	r2,-4(fp)
     260:	00000706 	br	280 <cpr+0x80>


int cpr(alt_u8 *buf0,alt_u8 *buf1,alt_u8 num)
{
	int i;
	for(i=0;i<num;i++)
     264:	e0bffb17 	ldw	r2,-20(fp)
     268:	10800044 	addi	r2,r2,1
     26c:	e0bffb15 	stw	r2,-20(fp)
     270:	e0fffe03 	ldbu	r3,-8(fp)
     274:	e0bffb17 	ldw	r2,-20(fp)
     278:	10ffe916 	blt	r2,r3,220 <cpr+0x20>
	{
		if(buf0[i] != buf1[i])
			return i + 1;
	}
	return 0;
     27c:	e03fff15 	stw	zero,-4(fp)
     280:	e0bfff17 	ldw	r2,-4(fp)
}
     284:	e037883a 	mov	sp,fp
     288:	df000017 	ldw	fp,0(sp)
     28c:	dec00104 	addi	sp,sp,4
     290:	f800283a 	ret

00000294 <main>:

int main(void){
     294:	defffc04 	addi	sp,sp,-16
     298:	dfc00315 	stw	ra,12(sp)
     29c:	df000215 	stw	fp,8(sp)
     2a0:	df000204 	addi	fp,sp,8

	int i;

	while(1){

		InitI2C(OC_IIC_0_BASE, 100000, 0);
     2a4:	01004034 	movhi	r4,256
     2a8:	21040c04 	addi	r4,r4,4144
     2ac:	014000b4 	movhi	r5,2
     2b0:	2961a804 	addi	r5,r5,-31072
     2b4:	000d883a 	mov	r6,zero
     2b8:	00003680 	call	368 <InitI2C>

			I2CWrite(OC_IIC_0_BASE, 0xA2, 32, a, 32);
     2bc:	00800804 	movi	r2,32
     2c0:	d8800015 	stw	r2,0(sp)
     2c4:	01004034 	movhi	r4,256
     2c8:	21040c04 	addi	r4,r4,4144
     2cc:	01402884 	movi	r5,162
     2d0:	01800804 	movi	r6,32
     2d4:	01c00074 	movhi	r7,1
     2d8:	39f22404 	addi	r7,r7,-14192
     2dc:	00004640 	call	464 <I2CWrite>
			usleep(100000);
     2e0:	010000b4 	movhi	r4,2
     2e4:	2121a804 	addi	r4,r4,-31072
     2e8:	000a7b00 	call	a7b0 <usleep>
			I2CRead(OC_IIC_0_BASE, 0xA2, 32, b, 32);
     2ec:	00800804 	movi	r2,32
     2f0:	d8800015 	stw	r2,0(sp)
     2f4:	01004034 	movhi	r4,256
     2f8:	21040c04 	addi	r4,r4,4144
     2fc:	01402884 	movi	r5,162
     300:	01800804 	movi	r6,32
     304:	01c00074 	movhi	r7,1
     308:	39f79b04 	addi	r7,r7,-8596
     30c:	00005f40 	call	5f4 <I2CRead>
			i = cpr(a,b,32);
     310:	01000074 	movhi	r4,1
     314:	21322404 	addi	r4,r4,-14192
     318:	01400074 	movhi	r5,1
     31c:	29779b04 	addi	r5,r5,-8596
     320:	01800804 	movi	r6,32
     324:	00002000 	call	200 <cpr>
     328:	e0bfff15 	stw	r2,-4(fp)
			if(i)
     32c:	e0bfff17 	ldw	r2,-4(fp)
     330:	1005003a 	cmpeq	r2,r2,zero
     334:	1000051e 	bne	r2,zero,34c <main+0xb8>
			{
				printf("error %d",i);
     338:	01000074 	movhi	r4,1
     33c:	21315404 	addi	r4,r4,-15024
     340:	e17fff17 	ldw	r5,-4(fp)
     344:	000090c0 	call	90c <printf>
     348:	00000306 	br	358 <main+0xc4>
			}
			else
				printf("ok");
     34c:	01000074 	movhi	r4,1
     350:	21315704 	addi	r4,r4,-15012
     354:	000090c0 	call	90c <printf>

			usleep(1000000);
     358:	010003f4 	movhi	r4,15
     35c:	21109004 	addi	r4,r4,16960
     360:	000a7b00 	call	a7b0 <usleep>
	}
     364:	003fcf06 	br	2a4 <main+0x10>

00000368 <InitI2C>:
** Modified by:
** Modified date:
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void InitI2C(alt_u32 base, alt_u32 freq, alt_u8 IEN)
{
     368:	defffa04 	addi	sp,sp,-24
     36c:	dfc00515 	stw	ra,20(sp)
     370:	df000415 	stw	fp,16(sp)
     374:	df000404 	addi	fp,sp,16
     378:	e13ffd15 	stw	r4,-12(fp)
     37c:	e17ffe15 	stw	r5,-8(fp)
     380:	e1bfff05 	stb	r6,-4(fp)
	alt_u32 prescale;
	// Calculate the prescale value
	prescale = ALT_CPU_FREQ/((freq<<2) + freq);
     384:	e0bffe17 	ldw	r2,-8(fp)
     388:	1085883a 	add	r2,r2,r2
     38c:	1085883a 	add	r2,r2,r2
     390:	1007883a 	mov	r3,r2
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	188b883a 	add	r5,r3,r2
     39c:	01017db4 	movhi	r4,1526
     3a0:	21384004 	addi	r4,r4,-7936
     3a4:	00008fc0 	call	8fc <__udivsi3>
     3a8:	e0bffc15 	stw	r2,-16(fp)
  // Setup prescaler for the freq of SCL with sysclk of ALT_CPU_FREQ
  IOWR_OC_I2C_PRERLO(base, prescale & 0xff);
     3ac:	e13ffd17 	ldw	r4,-12(fp)
     3b0:	e0bffc17 	ldw	r2,-16(fp)
     3b4:	10c03fcc 	andi	r3,r2,255
     3b8:	2005883a 	mov	r2,r4
     3bc:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_PRERHI(base,(prescale & 0xff00)>>8);
     3c0:	e0bffd17 	ldw	r2,-12(fp)
     3c4:	11000044 	addi	r4,r2,1
     3c8:	e0bffc17 	ldw	r2,-16(fp)
     3cc:	10bfc00c 	andi	r2,r2,65280
     3d0:	1004d23a 	srli	r2,r2,8
     3d4:	1007883a 	mov	r3,r2
     3d8:	2005883a 	mov	r2,r4
     3dc:	10c00025 	stbio	r3,0(r2)
  // Enable core
  if(IEN == 1) // Enable interrupt
     3e0:	e0bfff03 	ldbu	r2,-4(fp)
     3e4:	10800058 	cmpnei	r2,r2,1
     3e8:	1000061e 	bne	r2,zero,404 <InitI2C+0x9c>
  {
  	IOWR_OC_I2C_CTR(base, 0xC0);
     3ec:	e0bffd17 	ldw	r2,-12(fp)
     3f0:	10800084 	addi	r2,r2,2
     3f4:	1007883a 	mov	r3,r2
     3f8:	00803004 	movi	r2,192
     3fc:	18800025 	stbio	r2,0(r3)
     400:	00000506 	br	418 <InitI2C+0xb0>
  }
  else // Enable core while disable interrupt
  {
  	IOWR_OC_I2C_CTR(base, 0x80);
     404:	e0bffd17 	ldw	r2,-12(fp)
     408:	10800084 	addi	r2,r2,2
     40c:	1007883a 	mov	r3,r2
     410:	00802004 	movi	r2,128
     414:	18800025 	stbio	r2,0(r3)
  }
}
     418:	e037883a 	mov	sp,fp
     41c:	dfc00117 	ldw	ra,4(sp)
     420:	df000017 	ldw	fp,0(sp)
     424:	dec00204 	addi	sp,sp,8
     428:	f800283a 	ret

0000042c <I2CWaitTIP>:
** Modified by:
** Modified date:
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void I2CWaitTIP(alt_u32 base)
{
     42c:	defffe04 	addi	sp,sp,-8
     430:	df000115 	stw	fp,4(sp)
     434:	df000104 	addi	fp,sp,4
     438:	e13fff15 	stw	r4,-4(fp)
  while ((IORD_OC_I2C_SR(base) & OC_I2C_SR_TIP_MSK) > 0) {}
     43c:	e0bfff17 	ldw	r2,-4(fp)
     440:	10800104 	addi	r2,r2,4
     444:	10800023 	ldbuio	r2,0(r2)
     448:	1080008c 	andi	r2,r2,2
     44c:	10800048 	cmpgei	r2,r2,1
     450:	103ffa1e 	bne	r2,zero,43c <I2CWaitTIP+0x10>
}
     454:	e037883a 	mov	sp,fp
     458:	df000017 	ldw	fp,0(sp)
     45c:	dec00104 	addi	sp,sp,4
     460:	f800283a 	ret

00000464 <I2CWrite>:
** Modified by:
** Modified date:
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void I2CWrite(alt_u32 base, alt_u8 address, alt_u16 reg, alt_u8 *buf, alt_u16 num)
{
     464:	defff804 	addi	sp,sp,-32
     468:	dfc00715 	stw	ra,28(sp)
     46c:	df000615 	stw	fp,24(sp)
     470:	df000604 	addi	fp,sp,24
     474:	e13ffb15 	stw	r4,-20(fp)
     478:	e1fffe15 	stw	r7,-8(fp)
     47c:	e0800217 	ldw	r2,8(fp)
     480:	e17ffc05 	stb	r5,-16(fp)
     484:	e1bffd0d 	sth	r6,-12(fp)
     488:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 i,tmp;
	// Wait for the completion of transfer
	I2CWaitTIP(base);
     48c:	e13ffb17 	ldw	r4,-20(fp)
     490:	000042c0 	call	42c <I2CWaitTIP>
 
  // write address of I2C slave device
  // and generate START & WR command
  IOWR_OC_I2C_TXR(base, address);
     494:	e0bffb17 	ldw	r2,-20(fp)
     498:	108000c4 	addi	r2,r2,3
     49c:	e0fffc03 	ldbu	r3,-16(fp)
     4a0:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_STA_MSK | OC_I2C_CR_WR_MSK);
     4a4:	e0bffb17 	ldw	r2,-20(fp)
     4a8:	10800104 	addi	r2,r2,4
     4ac:	1007883a 	mov	r3,r2
     4b0:	00802404 	movi	r2,144
     4b4:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     4b8:	e13ffb17 	ldw	r4,-20(fp)
     4bc:	000042c0 	call	42c <I2CWaitTIP>

#ifdef AT24C64
  // write register address H
  IOWR_OC_I2C_TXR(base, reg>>8);
     4c0:	e0bffb17 	ldw	r2,-20(fp)
     4c4:	110000c4 	addi	r4,r2,3
     4c8:	e0bffd0b 	ldhu	r2,-12(fp)
     4cc:	1004d23a 	srli	r2,r2,8
     4d0:	10ffffcc 	andi	r3,r2,65535
     4d4:	2005883a 	mov	r2,r4
     4d8:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_WR_MSK);
     4dc:	e0bffb17 	ldw	r2,-20(fp)
     4e0:	10800104 	addi	r2,r2,4
     4e4:	1007883a 	mov	r3,r2
     4e8:	00800404 	movi	r2,16
     4ec:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     4f0:	e13ffb17 	ldw	r4,-20(fp)
     4f4:	000042c0 	call	42c <I2CWaitTIP>
#endif

  // write register address(L)
  IOWR_OC_I2C_TXR(base, reg & 0x00ff);
     4f8:	e0bffb17 	ldw	r2,-20(fp)
     4fc:	110000c4 	addi	r4,r2,3
     500:	e0bffd0b 	ldhu	r2,-12(fp)
     504:	10c03fcc 	andi	r3,r2,255
     508:	2005883a 	mov	r2,r4
     50c:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_WR_MSK);
     510:	e0bffb17 	ldw	r2,-20(fp)
     514:	10800104 	addi	r2,r2,4
     518:	1007883a 	mov	r3,r2
     51c:	00800404 	movi	r2,16
     520:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     524:	e13ffb17 	ldw	r4,-20(fp)
     528:	000042c0 	call	42c <I2CWaitTIP>

  // write data
  if(num > 0) 
     52c:	e0bfff0b 	ldhu	r2,-4(fp)
     530:	1005003a 	cmpeq	r2,r2,zero
     534:	10001c1e 	bne	r2,zero,5a8 <I2CWrite+0x144>
  {
  	tmp = num - 1;
     538:	e0bfff0b 	ldhu	r2,-4(fp)
     53c:	10bfffc4 	addi	r2,r2,-1
     540:	e0bffa0d 	sth	r2,-24(fp)
  	for(i=0; i<tmp; i++)
     544:	e03ffa8d 	sth	zero,-22(fp)
     548:	00001406 	br	59c <I2CWrite+0x138>
  	{
  		 IOWR_OC_I2C_TXR(base,*buf++);
     54c:	e0bffb17 	ldw	r2,-20(fp)
     550:	110000c4 	addi	r4,r2,3
     554:	e0bffe17 	ldw	r2,-8(fp)
     558:	10800003 	ldbu	r2,0(r2)
     55c:	10c03fcc 	andi	r3,r2,255
     560:	e0bffe17 	ldw	r2,-8(fp)
     564:	10800044 	addi	r2,r2,1
     568:	e0bffe15 	stw	r2,-8(fp)
     56c:	2005883a 	mov	r2,r4
     570:	10c00025 	stbio	r3,0(r2)
       IOWR_OC_I2C_CR(base, OC_I2C_CR_WR_MSK);
     574:	e0bffb17 	ldw	r2,-20(fp)
     578:	10800104 	addi	r2,r2,4
     57c:	1007883a 	mov	r3,r2
     580:	00800404 	movi	r2,16
     584:	18800025 	stbio	r2,0(r3)
       I2CWaitTIP(base);
     588:	e13ffb17 	ldw	r4,-20(fp)
     58c:	000042c0 	call	42c <I2CWaitTIP>

  // write data
  if(num > 0) 
  {
  	tmp = num - 1;
  	for(i=0; i<tmp; i++)
     590:	e0bffa8b 	ldhu	r2,-22(fp)
     594:	10800044 	addi	r2,r2,1
     598:	e0bffa8d 	sth	r2,-22(fp)
     59c:	e0fffa8b 	ldhu	r3,-22(fp)
     5a0:	e0bffa0b 	ldhu	r2,-24(fp)
     5a4:	18bfe936 	bltu	r3,r2,54c <I2CWrite+0xe8>
       I2CWaitTIP(base);
  	}
  }

  // write data with STOP signal
  IOWR_OC_I2C_TXR(base, *buf);
     5a8:	e0bffb17 	ldw	r2,-20(fp)
     5ac:	110000c4 	addi	r4,r2,3
     5b0:	e0bffe17 	ldw	r2,-8(fp)
     5b4:	10800003 	ldbu	r2,0(r2)
     5b8:	10c03fcc 	andi	r3,r2,255
     5bc:	2005883a 	mov	r2,r4
     5c0:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_WR_MSK | OC_I2C_CR_STO_MSK);
     5c4:	e0bffb17 	ldw	r2,-20(fp)
     5c8:	10800104 	addi	r2,r2,4
     5cc:	1007883a 	mov	r3,r2
     5d0:	00801404 	movi	r2,80
     5d4:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     5d8:	e13ffb17 	ldw	r4,-20(fp)
     5dc:	000042c0 	call	42c <I2CWaitTIP>
}
     5e0:	e037883a 	mov	sp,fp
     5e4:	dfc00117 	ldw	ra,4(sp)
     5e8:	df000017 	ldw	fp,0(sp)
     5ec:	dec00204 	addi	sp,sp,8
     5f0:	f800283a 	ret

000005f4 <I2CRead>:
** Modified by:
** Modified date:
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void I2CRead(alt_u32 base, alt_u8 address, alt_u16 reg, alt_u8 *buf, alt_u16 num)
{
     5f4:	defff804 	addi	sp,sp,-32
     5f8:	dfc00715 	stw	ra,28(sp)
     5fc:	df000615 	stw	fp,24(sp)
     600:	df000604 	addi	fp,sp,24
     604:	e13ffb15 	stw	r4,-20(fp)
     608:	e1fffe15 	stw	r7,-8(fp)
     60c:	e0800217 	ldw	r2,8(fp)
     610:	e17ffc05 	stb	r5,-16(fp)
     614:	e1bffd0d 	sth	r6,-12(fp)
     618:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 i,tmp;
	// Wait for the completion of transfer
	I2CWaitTIP(base);
     61c:	e13ffb17 	ldw	r4,-20(fp)
     620:	000042c0 	call	42c <I2CWaitTIP>
 
  // write address of I2C slave device
  // and generate START & WR command
  IOWR_OC_I2C_TXR(base, address);
     624:	e0bffb17 	ldw	r2,-20(fp)
     628:	108000c4 	addi	r2,r2,3
     62c:	e0fffc03 	ldbu	r3,-16(fp)
     630:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_STA_MSK | OC_I2C_CR_WR_MSK);
     634:	e0bffb17 	ldw	r2,-20(fp)
     638:	10800104 	addi	r2,r2,4
     63c:	1007883a 	mov	r3,r2
     640:	00802404 	movi	r2,144
     644:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     648:	e13ffb17 	ldw	r4,-20(fp)
     64c:	000042c0 	call	42c <I2CWaitTIP>

#ifdef AT24C64
  // write register address H
  IOWR_OC_I2C_TXR(base, reg>>8);
     650:	e0bffb17 	ldw	r2,-20(fp)
     654:	110000c4 	addi	r4,r2,3
     658:	e0bffd0b 	ldhu	r2,-12(fp)
     65c:	1004d23a 	srli	r2,r2,8
     660:	10ffffcc 	andi	r3,r2,65535
     664:	2005883a 	mov	r2,r4
     668:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_WR_MSK);
     66c:	e0bffb17 	ldw	r2,-20(fp)
     670:	10800104 	addi	r2,r2,4
     674:	1007883a 	mov	r3,r2
     678:	00800404 	movi	r2,16
     67c:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     680:	e13ffb17 	ldw	r4,-20(fp)
     684:	000042c0 	call	42c <I2CWaitTIP>
#endif

  // write register address
  IOWR_OC_I2C_TXR(base, reg & 0x00ff);
     688:	e0bffb17 	ldw	r2,-20(fp)
     68c:	110000c4 	addi	r4,r2,3
     690:	e0bffd0b 	ldhu	r2,-12(fp)
     694:	10c03fcc 	andi	r3,r2,255
     698:	2005883a 	mov	r2,r4
     69c:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_WR_MSK);
     6a0:	e0bffb17 	ldw	r2,-20(fp)
     6a4:	10800104 	addi	r2,r2,4
     6a8:	1007883a 	mov	r3,r2
     6ac:	00800404 	movi	r2,16
     6b0:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     6b4:	e13ffb17 	ldw	r4,-20(fp)
     6b8:	000042c0 	call	42c <I2CWaitTIP>

  // write address of I2C slave device
  // and RD command
  IOWR_OC_I2C_TXR(base, address|1);
     6bc:	e0bffb17 	ldw	r2,-20(fp)
     6c0:	110000c4 	addi	r4,r2,3
     6c4:	e0bffc03 	ldbu	r2,-16(fp)
     6c8:	10800054 	ori	r2,r2,1
     6cc:	10c03fcc 	andi	r3,r2,255
     6d0:	2005883a 	mov	r2,r4
     6d4:	10c00025 	stbio	r3,0(r2)
  IOWR_OC_I2C_CR(base, OC_I2C_CR_STA_MSK | OC_I2C_CR_WR_MSK);
     6d8:	e0bffb17 	ldw	r2,-20(fp)
     6dc:	10800104 	addi	r2,r2,4
     6e0:	1007883a 	mov	r3,r2
     6e4:	00802404 	movi	r2,144
     6e8:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     6ec:	e13ffb17 	ldw	r4,-20(fp)
     6f0:	000042c0 	call	42c <I2CWaitTIP>
  // Read data
  if(num > 0) 
     6f4:	e0bfff0b 	ldhu	r2,-4(fp)
     6f8:	1005003a 	cmpeq	r2,r2,zero
     6fc:	10001b1e 	bne	r2,zero,76c <I2CRead+0x178>
  {
  	tmp = num - 1;
     700:	e0bfff0b 	ldhu	r2,-4(fp)
     704:	10bfffc4 	addi	r2,r2,-1
     708:	e0bffa0d 	sth	r2,-24(fp)
  	for(i=0; i<tmp; i++)
     70c:	e03ffa8d 	sth	zero,-22(fp)
     710:	00001306 	br	760 <I2CRead+0x16c>
  	{
  		 IOWR_OC_I2C_CR(base,OC_I2C_CR_RD_MSK);// | I2C_CR_ACK);
     714:	e0bffb17 	ldw	r2,-20(fp)
     718:	10800104 	addi	r2,r2,4
     71c:	1007883a 	mov	r3,r2
     720:	00800804 	movi	r2,32
     724:	18800025 	stbio	r2,0(r3)
       I2CWaitTIP(base);
     728:	e13ffb17 	ldw	r4,-20(fp)
     72c:	000042c0 	call	42c <I2CWaitTIP>
       *buf++ = IORD_OC_I2C_RXR(base);
     730:	e0bffb17 	ldw	r2,-20(fp)
     734:	108000c4 	addi	r2,r2,3
     738:	10800023 	ldbuio	r2,0(r2)
     73c:	1007883a 	mov	r3,r2
     740:	e0bffe17 	ldw	r2,-8(fp)
     744:	10c00005 	stb	r3,0(r2)
     748:	e0bffe17 	ldw	r2,-8(fp)
     74c:	10800044 	addi	r2,r2,1
     750:	e0bffe15 	stw	r2,-8(fp)
  I2CWaitTIP(base);
  // Read data
  if(num > 0) 
  {
  	tmp = num - 1;
  	for(i=0; i<tmp; i++)
     754:	e0bffa8b 	ldhu	r2,-22(fp)
     758:	10800044 	addi	r2,r2,1
     75c:	e0bffa8d 	sth	r2,-22(fp)
     760:	e0fffa8b 	ldhu	r3,-22(fp)
     764:	e0bffa0b 	ldhu	r2,-24(fp)
     768:	18bfea36 	bltu	r3,r2,714 <I2CRead+0x120>
       *buf++ = IORD_OC_I2C_RXR(base);
  	}
  }

  // Read data with STOP signal
  IOWR_OC_I2C_CR(base,OC_I2C_CR_RD_MSK | OC_I2C_CR_ACK_MSK | OC_I2C_CR_STO_MSK);
     76c:	e0bffb17 	ldw	r2,-20(fp)
     770:	10800104 	addi	r2,r2,4
     774:	1007883a 	mov	r3,r2
     778:	00801a04 	movi	r2,104
     77c:	18800025 	stbio	r2,0(r3)
  I2CWaitTIP(base);
     780:	e13ffb17 	ldw	r4,-20(fp)
     784:	000042c0 	call	42c <I2CWaitTIP>
  *buf++ = IORD_OC_I2C_RXR(base);
     788:	e0bffb17 	ldw	r2,-20(fp)
     78c:	108000c4 	addi	r2,r2,3
     790:	10800023 	ldbuio	r2,0(r2)
     794:	1007883a 	mov	r3,r2
     798:	e0bffe17 	ldw	r2,-8(fp)
     79c:	10c00005 	stb	r3,0(r2)
     7a0:	e0bffe17 	ldw	r2,-8(fp)
     7a4:	10800044 	addi	r2,r2,1
     7a8:	e0bffe15 	stw	r2,-8(fp)
}
     7ac:	e037883a 	mov	sp,fp
     7b0:	dfc00117 	ldw	ra,4(sp)
     7b4:	df000017 	ldw	fp,0(sp)
     7b8:	dec00204 	addi	sp,sp,8
     7bc:	f800283a 	ret

000007c0 <udivmodsi4>:
     7c0:	29001b2e 	bgeu	r5,r4,830 <udivmodsi4+0x70>
     7c4:	28001a16 	blt	r5,zero,830 <udivmodsi4+0x70>
     7c8:	00800044 	movi	r2,1
     7cc:	0007883a 	mov	r3,zero
     7d0:	01c007c4 	movi	r7,31
     7d4:	00000306 	br	7e4 <udivmodsi4+0x24>
     7d8:	19c01326 	beq	r3,r7,828 <udivmodsi4+0x68>
     7dc:	18c00044 	addi	r3,r3,1
     7e0:	28000416 	blt	r5,zero,7f4 <udivmodsi4+0x34>
     7e4:	294b883a 	add	r5,r5,r5
     7e8:	1085883a 	add	r2,r2,r2
     7ec:	293ffa36 	bltu	r5,r4,7d8 <udivmodsi4+0x18>
     7f0:	10000d26 	beq	r2,zero,828 <udivmodsi4+0x68>
     7f4:	0007883a 	mov	r3,zero
     7f8:	21400236 	bltu	r4,r5,804 <udivmodsi4+0x44>
     7fc:	2149c83a 	sub	r4,r4,r5
     800:	1886b03a 	or	r3,r3,r2
     804:	1004d07a 	srli	r2,r2,1
     808:	280ad07a 	srli	r5,r5,1
     80c:	103ffa1e 	bne	r2,zero,7f8 <udivmodsi4+0x38>
     810:	30000226 	beq	r6,zero,81c <udivmodsi4+0x5c>
     814:	2005883a 	mov	r2,r4
     818:	f800283a 	ret
     81c:	1809883a 	mov	r4,r3
     820:	2005883a 	mov	r2,r4
     824:	f800283a 	ret
     828:	0007883a 	mov	r3,zero
     82c:	003ff806 	br	810 <udivmodsi4+0x50>
     830:	00800044 	movi	r2,1
     834:	0007883a 	mov	r3,zero
     838:	003fef06 	br	7f8 <udivmodsi4+0x38>

0000083c <__divsi3>:
     83c:	defffe04 	addi	sp,sp,-8
     840:	dc000015 	stw	r16,0(sp)
     844:	dfc00115 	stw	ra,4(sp)
     848:	0021883a 	mov	r16,zero
     84c:	20000c16 	blt	r4,zero,880 <__divsi3+0x44>
     850:	000d883a 	mov	r6,zero
     854:	28000e16 	blt	r5,zero,890 <__divsi3+0x54>
     858:	00007c00 	call	7c0 <udivmodsi4>
     85c:	1007883a 	mov	r3,r2
     860:	8005003a 	cmpeq	r2,r16,zero
     864:	1000011e 	bne	r2,zero,86c <__divsi3+0x30>
     868:	00c7c83a 	sub	r3,zero,r3
     86c:	1805883a 	mov	r2,r3
     870:	dfc00117 	ldw	ra,4(sp)
     874:	dc000017 	ldw	r16,0(sp)
     878:	dec00204 	addi	sp,sp,8
     87c:	f800283a 	ret
     880:	0109c83a 	sub	r4,zero,r4
     884:	04000044 	movi	r16,1
     888:	000d883a 	mov	r6,zero
     88c:	283ff20e 	bge	r5,zero,858 <__divsi3+0x1c>
     890:	014bc83a 	sub	r5,zero,r5
     894:	8021003a 	cmpeq	r16,r16,zero
     898:	003fef06 	br	858 <__divsi3+0x1c>

0000089c <__modsi3>:
     89c:	deffff04 	addi	sp,sp,-4
     8a0:	dfc00015 	stw	ra,0(sp)
     8a4:	01800044 	movi	r6,1
     8a8:	2807883a 	mov	r3,r5
     8ac:	20000416 	blt	r4,zero,8c0 <__modsi3+0x24>
     8b0:	28000c16 	blt	r5,zero,8e4 <__modsi3+0x48>
     8b4:	dfc00017 	ldw	ra,0(sp)
     8b8:	dec00104 	addi	sp,sp,4
     8bc:	00007c01 	jmpi	7c0 <udivmodsi4>
     8c0:	0109c83a 	sub	r4,zero,r4
     8c4:	28000b16 	blt	r5,zero,8f4 <__modsi3+0x58>
     8c8:	180b883a 	mov	r5,r3
     8cc:	01800044 	movi	r6,1
     8d0:	00007c00 	call	7c0 <udivmodsi4>
     8d4:	0085c83a 	sub	r2,zero,r2
     8d8:	dfc00017 	ldw	ra,0(sp)
     8dc:	dec00104 	addi	sp,sp,4
     8e0:	f800283a 	ret
     8e4:	014bc83a 	sub	r5,zero,r5
     8e8:	dfc00017 	ldw	ra,0(sp)
     8ec:	dec00104 	addi	sp,sp,4
     8f0:	00007c01 	jmpi	7c0 <udivmodsi4>
     8f4:	0147c83a 	sub	r3,zero,r5
     8f8:	003ff306 	br	8c8 <__modsi3+0x2c>

000008fc <__udivsi3>:
     8fc:	000d883a 	mov	r6,zero
     900:	00007c01 	jmpi	7c0 <udivmodsi4>

00000904 <__umodsi3>:
     904:	01800044 	movi	r6,1
     908:	00007c01 	jmpi	7c0 <udivmodsi4>

0000090c <printf>:
     90c:	defffb04 	addi	sp,sp,-20
     910:	dfc00115 	stw	ra,4(sp)
     914:	d9400215 	stw	r5,8(sp)
     918:	d9800315 	stw	r6,12(sp)
     91c:	d9c00415 	stw	r7,16(sp)
     920:	00800074 	movhi	r2,1
     924:	10b4cc04 	addi	r2,r2,-11472
     928:	10c00017 	ldw	r3,0(r2)
     92c:	200b883a 	mov	r5,r4
     930:	d8800204 	addi	r2,sp,8
     934:	19000217 	ldw	r4,8(r3)
     938:	100d883a 	mov	r6,r2
     93c:	d8800015 	stw	r2,0(sp)
     940:	00028880 	call	2888 <__vfprintf_internal>
     944:	dfc00117 	ldw	ra,4(sp)
     948:	dec00504 	addi	sp,sp,20
     94c:	f800283a 	ret

00000950 <_printf_r>:
     950:	defffc04 	addi	sp,sp,-16
     954:	dfc00115 	stw	ra,4(sp)
     958:	d9800215 	stw	r6,8(sp)
     95c:	d9c00315 	stw	r7,12(sp)
     960:	280d883a 	mov	r6,r5
     964:	21400217 	ldw	r5,8(r4)
     968:	d8c00204 	addi	r3,sp,8
     96c:	180f883a 	mov	r7,r3
     970:	d8c00015 	stw	r3,0(sp)
     974:	00009dc0 	call	9dc <___vfprintf_internal_r>
     978:	dfc00117 	ldw	ra,4(sp)
     97c:	dec00404 	addi	sp,sp,16
     980:	f800283a 	ret

00000984 <__sprint_r>:
     984:	30800217 	ldw	r2,8(r6)
     988:	defffe04 	addi	sp,sp,-8
     98c:	dc000015 	stw	r16,0(sp)
     990:	dfc00115 	stw	ra,4(sp)
     994:	3021883a 	mov	r16,r6
     998:	0007883a 	mov	r3,zero
     99c:	1000061e 	bne	r2,zero,9b8 <__sprint_r+0x34>
     9a0:	1805883a 	mov	r2,r3
     9a4:	30000115 	stw	zero,4(r6)
     9a8:	dfc00117 	ldw	ra,4(sp)
     9ac:	dc000017 	ldw	r16,0(sp)
     9b0:	dec00204 	addi	sp,sp,8
     9b4:	f800283a 	ret
     9b8:	0004ae40 	call	4ae4 <__sfvwrite_r>
     9bc:	1007883a 	mov	r3,r2
     9c0:	1805883a 	mov	r2,r3
     9c4:	80000115 	stw	zero,4(r16)
     9c8:	80000215 	stw	zero,8(r16)
     9cc:	dfc00117 	ldw	ra,4(sp)
     9d0:	dc000017 	ldw	r16,0(sp)
     9d4:	dec00204 	addi	sp,sp,8
     9d8:	f800283a 	ret

000009dc <___vfprintf_internal_r>:
     9dc:	defea304 	addi	sp,sp,-1396
     9e0:	dd815915 	stw	r22,1380(sp)
     9e4:	dc015315 	stw	r16,1356(sp)
     9e8:	d9c15215 	stw	r7,1352(sp)
     9ec:	dfc15c15 	stw	ra,1392(sp)
     9f0:	df015b15 	stw	fp,1388(sp)
     9f4:	ddc15a15 	stw	r23,1384(sp)
     9f8:	dd415815 	stw	r21,1376(sp)
     9fc:	dd015715 	stw	r20,1372(sp)
     a00:	dcc15615 	stw	r19,1368(sp)
     a04:	dc815515 	stw	r18,1364(sp)
     a08:	dc415415 	stw	r17,1360(sp)
     a0c:	282d883a 	mov	r22,r5
     a10:	3021883a 	mov	r16,r6
     a14:	d9015015 	stw	r4,1344(sp)
     a18:	00051080 	call	5108 <_localeconv_r>
     a1c:	10800017 	ldw	r2,0(r2)
     a20:	d9c15217 	ldw	r7,1352(sp)
     a24:	d8814a15 	stw	r2,1320(sp)
     a28:	d8815017 	ldw	r2,1344(sp)
     a2c:	10000226 	beq	r2,zero,a38 <___vfprintf_internal_r+0x5c>
     a30:	10800e17 	ldw	r2,56(r2)
     a34:	10020d26 	beq	r2,zero,126c <___vfprintf_internal_r+0x890>
     a38:	b080030b 	ldhu	r2,12(r22)
     a3c:	1080020c 	andi	r2,r2,8
     a40:	10020e26 	beq	r2,zero,127c <___vfprintf_internal_r+0x8a0>
     a44:	b0800417 	ldw	r2,16(r22)
     a48:	10020c26 	beq	r2,zero,127c <___vfprintf_internal_r+0x8a0>
     a4c:	b200030b 	ldhu	r8,12(r22)
     a50:	00800284 	movi	r2,10
     a54:	40c0068c 	andi	r3,r8,26
     a58:	18802f1e 	bne	r3,r2,b18 <___vfprintf_internal_r+0x13c>
     a5c:	b080038f 	ldh	r2,14(r22)
     a60:	10002d16 	blt	r2,zero,b18 <___vfprintf_internal_r+0x13c>
     a64:	b240038b 	ldhu	r9,14(r22)
     a68:	b2800717 	ldw	r10,28(r22)
     a6c:	b2c00917 	ldw	r11,36(r22)
     a70:	d9015017 	ldw	r4,1344(sp)
     a74:	dc402a04 	addi	r17,sp,168
     a78:	d8804104 	addi	r2,sp,260
     a7c:	00c10004 	movi	r3,1024
     a80:	423fff4c 	andi	r8,r8,65533
     a84:	800d883a 	mov	r6,r16
     a88:	880b883a 	mov	r5,r17
     a8c:	da002d0d 	sth	r8,180(sp)
     a90:	da402d8d 	sth	r9,182(sp)
     a94:	da803115 	stw	r10,196(sp)
     a98:	dac03315 	stw	r11,204(sp)
     a9c:	d8802e15 	stw	r2,184(sp)
     aa0:	d8c02f15 	stw	r3,188(sp)
     aa4:	d8802a15 	stw	r2,168(sp)
     aa8:	d8c02c15 	stw	r3,176(sp)
     aac:	d8003015 	stw	zero,192(sp)
     ab0:	00009dc0 	call	9dc <___vfprintf_internal_r>
     ab4:	d8814c15 	stw	r2,1328(sp)
     ab8:	10000416 	blt	r2,zero,acc <___vfprintf_internal_r+0xf0>
     abc:	d9015017 	ldw	r4,1344(sp)
     ac0:	880b883a 	mov	r5,r17
     ac4:	00041b40 	call	41b4 <_fflush_r>
     ac8:	1002321e 	bne	r2,zero,1394 <___vfprintf_internal_r+0x9b8>
     acc:	d8802d0b 	ldhu	r2,180(sp)
     ad0:	1080100c 	andi	r2,r2,64
     ad4:	10000326 	beq	r2,zero,ae4 <___vfprintf_internal_r+0x108>
     ad8:	b080030b 	ldhu	r2,12(r22)
     adc:	10801014 	ori	r2,r2,64
     ae0:	b080030d 	sth	r2,12(r22)
     ae4:	d8814c17 	ldw	r2,1328(sp)
     ae8:	dfc15c17 	ldw	ra,1392(sp)
     aec:	df015b17 	ldw	fp,1388(sp)
     af0:	ddc15a17 	ldw	r23,1384(sp)
     af4:	dd815917 	ldw	r22,1380(sp)
     af8:	dd415817 	ldw	r21,1376(sp)
     afc:	dd015717 	ldw	r20,1372(sp)
     b00:	dcc15617 	ldw	r19,1368(sp)
     b04:	dc815517 	ldw	r18,1364(sp)
     b08:	dc415417 	ldw	r17,1360(sp)
     b0c:	dc015317 	ldw	r16,1356(sp)
     b10:	dec15d04 	addi	sp,sp,1396
     b14:	f800283a 	ret
     b18:	0005883a 	mov	r2,zero
     b1c:	0007883a 	mov	r3,zero
     b20:	dd401a04 	addi	r21,sp,104
     b24:	d8814315 	stw	r2,1292(sp)
     b28:	802f883a 	mov	r23,r16
     b2c:	d8c14415 	stw	r3,1296(sp)
     b30:	d8014c15 	stw	zero,1328(sp)
     b34:	d8014915 	stw	zero,1316(sp)
     b38:	d8014515 	stw	zero,1300(sp)
     b3c:	d8014815 	stw	zero,1312(sp)
     b40:	dd400d15 	stw	r21,52(sp)
     b44:	d8000f15 	stw	zero,60(sp)
     b48:	d8000e15 	stw	zero,56(sp)
     b4c:	b8800007 	ldb	r2,0(r23)
     b50:	10001926 	beq	r2,zero,bb8 <___vfprintf_internal_r+0x1dc>
     b54:	00c00944 	movi	r3,37
     b58:	10c01726 	beq	r2,r3,bb8 <___vfprintf_internal_r+0x1dc>
     b5c:	b821883a 	mov	r16,r23
     b60:	00000106 	br	b68 <___vfprintf_internal_r+0x18c>
     b64:	10c00326 	beq	r2,r3,b74 <___vfprintf_internal_r+0x198>
     b68:	84000044 	addi	r16,r16,1
     b6c:	80800007 	ldb	r2,0(r16)
     b70:	103ffc1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x188>
     b74:	85e7c83a 	sub	r19,r16,r23
     b78:	98000e26 	beq	r19,zero,bb4 <___vfprintf_internal_r+0x1d8>
     b7c:	dc800f17 	ldw	r18,60(sp)
     b80:	dc400e17 	ldw	r17,56(sp)
     b84:	008001c4 	movi	r2,7
     b88:	94e5883a 	add	r18,r18,r19
     b8c:	8c400044 	addi	r17,r17,1
     b90:	adc00015 	stw	r23,0(r21)
     b94:	dc800f15 	stw	r18,60(sp)
     b98:	acc00115 	stw	r19,4(r21)
     b9c:	dc400e15 	stw	r17,56(sp)
     ba0:	14428b16 	blt	r2,r17,15d0 <___vfprintf_internal_r+0xbf4>
     ba4:	ad400204 	addi	r21,r21,8
     ba8:	d9014c17 	ldw	r4,1328(sp)
     bac:	24c9883a 	add	r4,r4,r19
     bb0:	d9014c15 	stw	r4,1328(sp)
     bb4:	802f883a 	mov	r23,r16
     bb8:	b8800007 	ldb	r2,0(r23)
     bbc:	10013c26 	beq	r2,zero,10b0 <___vfprintf_internal_r+0x6d4>
     bc0:	bdc00044 	addi	r23,r23,1
     bc4:	d8000405 	stb	zero,16(sp)
     bc8:	b8c00007 	ldb	r3,0(r23)
     bcc:	04ffffc4 	movi	r19,-1
     bd0:	d8014d15 	stw	zero,1332(sp)
     bd4:	d8014b15 	stw	zero,1324(sp)
     bd8:	d8c14e15 	stw	r3,1336(sp)
     bdc:	bdc00044 	addi	r23,r23,1
     be0:	d9414e17 	ldw	r5,1336(sp)
     be4:	00801604 	movi	r2,88
     be8:	28fff804 	addi	r3,r5,-32
     bec:	10c06036 	bltu	r2,r3,d70 <___vfprintf_internal_r+0x394>
     bf0:	18c5883a 	add	r2,r3,r3
     bf4:	1085883a 	add	r2,r2,r2
     bf8:	00c00034 	movhi	r3,0
     bfc:	18c30304 	addi	r3,r3,3084
     c00:	10c5883a 	add	r2,r2,r3
     c04:	11000017 	ldw	r4,0(r2)
     c08:	2000683a 	jmp	r4
     c0c:	00001b80 	call	1b8 <_start+0x4>
     c10:	00000d70 	cmpltui	zero,zero,53
     c14:	00000d70 	cmpltui	zero,zero,53
     c18:	00001b6c 	andhi	zero,zero,109
     c1c:	00000d70 	cmpltui	zero,zero,53
     c20:	00000d70 	cmpltui	zero,zero,53
     c24:	00000d70 	cmpltui	zero,zero,53
     c28:	00000d70 	cmpltui	zero,zero,53
     c2c:	00000d70 	cmpltui	zero,zero,53
     c30:	00000d70 	cmpltui	zero,zero,53
     c34:	0000194c 	andi	zero,zero,101
     c38:	00001b5c 	xori	zero,zero,109
     c3c:	00000d70 	cmpltui	zero,zero,53
     c40:	00001964 	muli	zero,zero,101
     c44:	00001bf8 	rdprs	zero,zero,111
     c48:	00000d70 	cmpltui	zero,zero,53
     c4c:	00001be4 	muli	zero,zero,111
     c50:	00001bac 	andhi	zero,zero,110
     c54:	00001bac 	andhi	zero,zero,110
     c58:	00001bac 	andhi	zero,zero,110
     c5c:	00001bac 	andhi	zero,zero,110
     c60:	00001bac 	andhi	zero,zero,110
     c64:	00001bac 	andhi	zero,zero,110
     c68:	00001bac 	andhi	zero,zero,110
     c6c:	00001bac 	andhi	zero,zero,110
     c70:	00001bac 	andhi	zero,zero,110
     c74:	00000d70 	cmpltui	zero,zero,53
     c78:	00000d70 	cmpltui	zero,zero,53
     c7c:	00000d70 	cmpltui	zero,zero,53
     c80:	00000d70 	cmpltui	zero,zero,53
     c84:	00000d70 	cmpltui	zero,zero,53
     c88:	00000d70 	cmpltui	zero,zero,53
     c8c:	00000d70 	cmpltui	zero,zero,53
     c90:	00000d70 	cmpltui	zero,zero,53
     c94:	00000d70 	cmpltui	zero,zero,53
     c98:	00000d70 	cmpltui	zero,zero,53
     c9c:	000013c8 	cmpgei	zero,zero,79
     ca0:	00001a34 	movhi	zero,104
     ca4:	00000d70 	cmpltui	zero,zero,53
     ca8:	00001a34 	movhi	zero,104
     cac:	00000d70 	cmpltui	zero,zero,53
     cb0:	00000d70 	cmpltui	zero,zero,53
     cb4:	00000d70 	cmpltui	zero,zero,53
     cb8:	00000d70 	cmpltui	zero,zero,53
     cbc:	00001b98 	cmpnei	zero,zero,110
     cc0:	00000d70 	cmpltui	zero,zero,53
     cc4:	00000d70 	cmpltui	zero,zero,53
     cc8:	0000147c 	xorhi	zero,zero,81
     ccc:	00000d70 	cmpltui	zero,zero,53
     cd0:	00000d70 	cmpltui	zero,zero,53
     cd4:	00000d70 	cmpltui	zero,zero,53
     cd8:	00000d70 	cmpltui	zero,zero,53
     cdc:	00000d70 	cmpltui	zero,zero,53
     ce0:	000014c8 	cmpgei	zero,zero,83
     ce4:	00000d70 	cmpltui	zero,zero,53
     ce8:	00000d70 	cmpltui	zero,zero,53
     cec:	00001ae8 	cmpgeui	zero,zero,107
     cf0:	00000d70 	cmpltui	zero,zero,53
     cf4:	00000d70 	cmpltui	zero,zero,53
     cf8:	00000d70 	cmpltui	zero,zero,53
     cfc:	00000d70 	cmpltui	zero,zero,53
     d00:	00000d70 	cmpltui	zero,zero,53
     d04:	00000d70 	cmpltui	zero,zero,53
     d08:	00000d70 	cmpltui	zero,zero,53
     d0c:	00000d70 	cmpltui	zero,zero,53
     d10:	00000d70 	cmpltui	zero,zero,53
     d14:	00000d70 	cmpltui	zero,zero,53
     d18:	00001abc 	xorhi	zero,zero,106
     d1c:	000013d4 	movui	zero,79
     d20:	00001a34 	movhi	zero,104
     d24:	00001a34 	movhi	zero,104
     d28:	00001a34 	movhi	zero,104
     d2c:	00001a20 	cmpeqi	zero,zero,104
     d30:	000013d4 	movui	zero,79
     d34:	00000d70 	cmpltui	zero,zero,53
     d38:	00000d70 	cmpltui	zero,zero,53
     d3c:	000019a8 	cmpgeui	zero,zero,102
     d40:	00000d70 	cmpltui	zero,zero,53
     d44:	00001978 	rdprs	zero,zero,101
     d48:	00001488 	cmpgei	zero,zero,82
     d4c:	000019d8 	cmpnei	zero,zero,103
     d50:	000019c4 	movi	zero,103
     d54:	00000d70 	cmpltui	zero,zero,53
     d58:	00001c54 	movui	zero,113
     d5c:	00000d70 	cmpltui	zero,zero,53
     d60:	000014d4 	movui	zero,83
     d64:	00000d70 	cmpltui	zero,zero,53
     d68:	00000d70 	cmpltui	zero,zero,53
     d6c:	00001b4c 	andi	zero,zero,109
     d70:	d9014e17 	ldw	r4,1336(sp)
     d74:	2000ce26 	beq	r4,zero,10b0 <___vfprintf_internal_r+0x6d4>
     d78:	01400044 	movi	r5,1
     d7c:	d9801004 	addi	r6,sp,64
     d80:	d9c14115 	stw	r7,1284(sp)
     d84:	d9414615 	stw	r5,1304(sp)
     d88:	d9814215 	stw	r6,1288(sp)
     d8c:	280f883a 	mov	r7,r5
     d90:	d9001005 	stb	r4,64(sp)
     d94:	d8000405 	stb	zero,16(sp)
     d98:	d8014715 	stw	zero,1308(sp)
     d9c:	d8c14d17 	ldw	r3,1332(sp)
     da0:	1880008c 	andi	r2,r3,2
     da4:	1005003a 	cmpeq	r2,r2,zero
     da8:	d8815115 	stw	r2,1348(sp)
     dac:	1000031e 	bne	r2,zero,dbc <___vfprintf_internal_r+0x3e0>
     db0:	d9014617 	ldw	r4,1304(sp)
     db4:	21000084 	addi	r4,r4,2
     db8:	d9014615 	stw	r4,1304(sp)
     dbc:	d9414d17 	ldw	r5,1332(sp)
     dc0:	2940210c 	andi	r5,r5,132
     dc4:	d9414f15 	stw	r5,1340(sp)
     dc8:	28002d1e 	bne	r5,zero,e80 <___vfprintf_internal_r+0x4a4>
     dcc:	d9814b17 	ldw	r6,1324(sp)
     dd0:	d8814617 	ldw	r2,1304(sp)
     dd4:	30a1c83a 	sub	r16,r6,r2
     dd8:	0400290e 	bge	zero,r16,e80 <___vfprintf_internal_r+0x4a4>
     ddc:	00800404 	movi	r2,16
     de0:	1404580e 	bge	r2,r16,1f44 <___vfprintf_internal_r+0x1568>
     de4:	dc800f17 	ldw	r18,60(sp)
     de8:	dc400e17 	ldw	r17,56(sp)
     dec:	1027883a 	mov	r19,r2
     df0:	07000074 	movhi	fp,1
     df4:	e7317404 	addi	fp,fp,-14896
     df8:	050001c4 	movi	r20,7
     dfc:	00000306 	br	e0c <___vfprintf_internal_r+0x430>
     e00:	843ffc04 	addi	r16,r16,-16
     e04:	ad400204 	addi	r21,r21,8
     e08:	9c00130e 	bge	r19,r16,e58 <___vfprintf_internal_r+0x47c>
     e0c:	94800404 	addi	r18,r18,16
     e10:	8c400044 	addi	r17,r17,1
     e14:	af000015 	stw	fp,0(r21)
     e18:	acc00115 	stw	r19,4(r21)
     e1c:	dc800f15 	stw	r18,60(sp)
     e20:	dc400e15 	stw	r17,56(sp)
     e24:	a47ff60e 	bge	r20,r17,e00 <___vfprintf_internal_r+0x424>
     e28:	d9015017 	ldw	r4,1344(sp)
     e2c:	b00b883a 	mov	r5,r22
     e30:	d9800d04 	addi	r6,sp,52
     e34:	d9c15215 	stw	r7,1352(sp)
     e38:	00009840 	call	984 <__sprint_r>
     e3c:	d9c15217 	ldw	r7,1352(sp)
     e40:	10009e1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
     e44:	843ffc04 	addi	r16,r16,-16
     e48:	dc800f17 	ldw	r18,60(sp)
     e4c:	dc400e17 	ldw	r17,56(sp)
     e50:	dd401a04 	addi	r21,sp,104
     e54:	9c3fed16 	blt	r19,r16,e0c <___vfprintf_internal_r+0x430>
     e58:	9425883a 	add	r18,r18,r16
     e5c:	8c400044 	addi	r17,r17,1
     e60:	008001c4 	movi	r2,7
     e64:	af000015 	stw	fp,0(r21)
     e68:	ac000115 	stw	r16,4(r21)
     e6c:	dc800f15 	stw	r18,60(sp)
     e70:	dc400e15 	stw	r17,56(sp)
     e74:	1441f516 	blt	r2,r17,164c <___vfprintf_internal_r+0xc70>
     e78:	ad400204 	addi	r21,r21,8
     e7c:	00000206 	br	e88 <___vfprintf_internal_r+0x4ac>
     e80:	dc800f17 	ldw	r18,60(sp)
     e84:	dc400e17 	ldw	r17,56(sp)
     e88:	d8800407 	ldb	r2,16(sp)
     e8c:	10000b26 	beq	r2,zero,ebc <___vfprintf_internal_r+0x4e0>
     e90:	00800044 	movi	r2,1
     e94:	94800044 	addi	r18,r18,1
     e98:	8c400044 	addi	r17,r17,1
     e9c:	a8800115 	stw	r2,4(r21)
     ea0:	d8c00404 	addi	r3,sp,16
     ea4:	008001c4 	movi	r2,7
     ea8:	a8c00015 	stw	r3,0(r21)
     eac:	dc800f15 	stw	r18,60(sp)
     eb0:	dc400e15 	stw	r17,56(sp)
     eb4:	1441da16 	blt	r2,r17,1620 <___vfprintf_internal_r+0xc44>
     eb8:	ad400204 	addi	r21,r21,8
     ebc:	d9015117 	ldw	r4,1348(sp)
     ec0:	20000b1e 	bne	r4,zero,ef0 <___vfprintf_internal_r+0x514>
     ec4:	d8800504 	addi	r2,sp,20
     ec8:	94800084 	addi	r18,r18,2
     ecc:	8c400044 	addi	r17,r17,1
     ed0:	a8800015 	stw	r2,0(r21)
     ed4:	00c00084 	movi	r3,2
     ed8:	008001c4 	movi	r2,7
     edc:	a8c00115 	stw	r3,4(r21)
     ee0:	dc800f15 	stw	r18,60(sp)
     ee4:	dc400e15 	stw	r17,56(sp)
     ee8:	1441c216 	blt	r2,r17,15f4 <___vfprintf_internal_r+0xc18>
     eec:	ad400204 	addi	r21,r21,8
     ef0:	d9414f17 	ldw	r5,1340(sp)
     ef4:	00802004 	movi	r2,128
     ef8:	2880b126 	beq	r5,r2,11c0 <___vfprintf_internal_r+0x7e4>
     efc:	d8c14717 	ldw	r3,1308(sp)
     f00:	19e1c83a 	sub	r16,r3,r7
     f04:	0400260e 	bge	zero,r16,fa0 <___vfprintf_internal_r+0x5c4>
     f08:	00800404 	movi	r2,16
     f0c:	1403c90e 	bge	r2,r16,1e34 <___vfprintf_internal_r+0x1458>
     f10:	1027883a 	mov	r19,r2
     f14:	07000074 	movhi	fp,1
     f18:	e7317004 	addi	fp,fp,-14912
     f1c:	050001c4 	movi	r20,7
     f20:	00000306 	br	f30 <___vfprintf_internal_r+0x554>
     f24:	843ffc04 	addi	r16,r16,-16
     f28:	ad400204 	addi	r21,r21,8
     f2c:	9c00130e 	bge	r19,r16,f7c <___vfprintf_internal_r+0x5a0>
     f30:	94800404 	addi	r18,r18,16
     f34:	8c400044 	addi	r17,r17,1
     f38:	af000015 	stw	fp,0(r21)
     f3c:	acc00115 	stw	r19,4(r21)
     f40:	dc800f15 	stw	r18,60(sp)
     f44:	dc400e15 	stw	r17,56(sp)
     f48:	a47ff60e 	bge	r20,r17,f24 <___vfprintf_internal_r+0x548>
     f4c:	d9015017 	ldw	r4,1344(sp)
     f50:	b00b883a 	mov	r5,r22
     f54:	d9800d04 	addi	r6,sp,52
     f58:	d9c15215 	stw	r7,1352(sp)
     f5c:	00009840 	call	984 <__sprint_r>
     f60:	d9c15217 	ldw	r7,1352(sp)
     f64:	1000551e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
     f68:	843ffc04 	addi	r16,r16,-16
     f6c:	dc800f17 	ldw	r18,60(sp)
     f70:	dc400e17 	ldw	r17,56(sp)
     f74:	dd401a04 	addi	r21,sp,104
     f78:	9c3fed16 	blt	r19,r16,f30 <___vfprintf_internal_r+0x554>
     f7c:	9425883a 	add	r18,r18,r16
     f80:	8c400044 	addi	r17,r17,1
     f84:	008001c4 	movi	r2,7
     f88:	af000015 	stw	fp,0(r21)
     f8c:	ac000115 	stw	r16,4(r21)
     f90:	dc800f15 	stw	r18,60(sp)
     f94:	dc400e15 	stw	r17,56(sp)
     f98:	14418216 	blt	r2,r17,15a4 <___vfprintf_internal_r+0xbc8>
     f9c:	ad400204 	addi	r21,r21,8
     fa0:	d9014d17 	ldw	r4,1332(sp)
     fa4:	2080400c 	andi	r2,r4,256
     fa8:	10004a1e 	bne	r2,zero,10d4 <___vfprintf_internal_r+0x6f8>
     fac:	d9414217 	ldw	r5,1288(sp)
     fb0:	91e5883a 	add	r18,r18,r7
     fb4:	8c400044 	addi	r17,r17,1
     fb8:	008001c4 	movi	r2,7
     fbc:	a9400015 	stw	r5,0(r21)
     fc0:	a9c00115 	stw	r7,4(r21)
     fc4:	dc800f15 	stw	r18,60(sp)
     fc8:	dc400e15 	stw	r17,56(sp)
     fcc:	14416716 	blt	r2,r17,156c <___vfprintf_internal_r+0xb90>
     fd0:	a8c00204 	addi	r3,r21,8
     fd4:	d9814d17 	ldw	r6,1332(sp)
     fd8:	3080010c 	andi	r2,r6,4
     fdc:	10002826 	beq	r2,zero,1080 <___vfprintf_internal_r+0x6a4>
     fe0:	d8814b17 	ldw	r2,1324(sp)
     fe4:	d9014617 	ldw	r4,1304(sp)
     fe8:	1121c83a 	sub	r16,r2,r4
     fec:	0400240e 	bge	zero,r16,1080 <___vfprintf_internal_r+0x6a4>
     ff0:	00800404 	movi	r2,16
     ff4:	14044f0e 	bge	r2,r16,2134 <___vfprintf_internal_r+0x1758>
     ff8:	dc400e17 	ldw	r17,56(sp)
     ffc:	1027883a 	mov	r19,r2
    1000:	07000074 	movhi	fp,1
    1004:	e7317404 	addi	fp,fp,-14896
    1008:	050001c4 	movi	r20,7
    100c:	00000306 	br	101c <___vfprintf_internal_r+0x640>
    1010:	843ffc04 	addi	r16,r16,-16
    1014:	18c00204 	addi	r3,r3,8
    1018:	9c00110e 	bge	r19,r16,1060 <___vfprintf_internal_r+0x684>
    101c:	94800404 	addi	r18,r18,16
    1020:	8c400044 	addi	r17,r17,1
    1024:	1f000015 	stw	fp,0(r3)
    1028:	1cc00115 	stw	r19,4(r3)
    102c:	dc800f15 	stw	r18,60(sp)
    1030:	dc400e15 	stw	r17,56(sp)
    1034:	a47ff60e 	bge	r20,r17,1010 <___vfprintf_internal_r+0x634>
    1038:	d9015017 	ldw	r4,1344(sp)
    103c:	b00b883a 	mov	r5,r22
    1040:	d9800d04 	addi	r6,sp,52
    1044:	00009840 	call	984 <__sprint_r>
    1048:	10001c1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    104c:	843ffc04 	addi	r16,r16,-16
    1050:	dc800f17 	ldw	r18,60(sp)
    1054:	dc400e17 	ldw	r17,56(sp)
    1058:	d8c01a04 	addi	r3,sp,104
    105c:	9c3fef16 	blt	r19,r16,101c <___vfprintf_internal_r+0x640>
    1060:	9425883a 	add	r18,r18,r16
    1064:	8c400044 	addi	r17,r17,1
    1068:	008001c4 	movi	r2,7
    106c:	1f000015 	stw	fp,0(r3)
    1070:	1c000115 	stw	r16,4(r3)
    1074:	dc800f15 	stw	r18,60(sp)
    1078:	dc400e15 	stw	r17,56(sp)
    107c:	1440cb16 	blt	r2,r17,13ac <___vfprintf_internal_r+0x9d0>
    1080:	d8814b17 	ldw	r2,1324(sp)
    1084:	d9414617 	ldw	r5,1304(sp)
    1088:	1140010e 	bge	r2,r5,1090 <___vfprintf_internal_r+0x6b4>
    108c:	2805883a 	mov	r2,r5
    1090:	d9814c17 	ldw	r6,1328(sp)
    1094:	308d883a 	add	r6,r6,r2
    1098:	d9814c15 	stw	r6,1328(sp)
    109c:	90013b1e 	bne	r18,zero,158c <___vfprintf_internal_r+0xbb0>
    10a0:	d9c14117 	ldw	r7,1284(sp)
    10a4:	dd401a04 	addi	r21,sp,104
    10a8:	d8000e15 	stw	zero,56(sp)
    10ac:	003ea706 	br	b4c <___vfprintf_internal_r+0x170>
    10b0:	d8800f17 	ldw	r2,60(sp)
    10b4:	10053f1e 	bne	r2,zero,25b4 <___vfprintf_internal_r+0x1bd8>
    10b8:	d8000e15 	stw	zero,56(sp)
    10bc:	b080030b 	ldhu	r2,12(r22)
    10c0:	1080100c 	andi	r2,r2,64
    10c4:	103e8726 	beq	r2,zero,ae4 <___vfprintf_internal_r+0x108>
    10c8:	00bfffc4 	movi	r2,-1
    10cc:	d8814c15 	stw	r2,1328(sp)
    10d0:	003e8406 	br	ae4 <___vfprintf_internal_r+0x108>
    10d4:	d9814e17 	ldw	r6,1336(sp)
    10d8:	00801944 	movi	r2,101
    10dc:	11806e16 	blt	r2,r6,1298 <___vfprintf_internal_r+0x8bc>
    10e0:	d9414817 	ldw	r5,1312(sp)
    10e4:	00c00044 	movi	r3,1
    10e8:	1943430e 	bge	r3,r5,1df8 <___vfprintf_internal_r+0x141c>
    10ec:	d8814217 	ldw	r2,1288(sp)
    10f0:	94800044 	addi	r18,r18,1
    10f4:	8c400044 	addi	r17,r17,1
    10f8:	a8800015 	stw	r2,0(r21)
    10fc:	008001c4 	movi	r2,7
    1100:	a8c00115 	stw	r3,4(r21)
    1104:	dc800f15 	stw	r18,60(sp)
    1108:	dc400e15 	stw	r17,56(sp)
    110c:	1441ca16 	blt	r2,r17,1838 <___vfprintf_internal_r+0xe5c>
    1110:	a8c00204 	addi	r3,r21,8
    1114:	d9014a17 	ldw	r4,1320(sp)
    1118:	00800044 	movi	r2,1
    111c:	94800044 	addi	r18,r18,1
    1120:	8c400044 	addi	r17,r17,1
    1124:	18800115 	stw	r2,4(r3)
    1128:	008001c4 	movi	r2,7
    112c:	19000015 	stw	r4,0(r3)
    1130:	dc800f15 	stw	r18,60(sp)
    1134:	dc400e15 	stw	r17,56(sp)
    1138:	1441b616 	blt	r2,r17,1814 <___vfprintf_internal_r+0xe38>
    113c:	1cc00204 	addi	r19,r3,8
    1140:	d9014317 	ldw	r4,1292(sp)
    1144:	d9414417 	ldw	r5,1296(sp)
    1148:	000d883a 	mov	r6,zero
    114c:	000f883a 	mov	r7,zero
    1150:	00092a00 	call	92a0 <__nedf2>
    1154:	10017426 	beq	r2,zero,1728 <___vfprintf_internal_r+0xd4c>
    1158:	d9414817 	ldw	r5,1312(sp)
    115c:	d9814217 	ldw	r6,1288(sp)
    1160:	8c400044 	addi	r17,r17,1
    1164:	2c85883a 	add	r2,r5,r18
    1168:	14bfffc4 	addi	r18,r2,-1
    116c:	28bfffc4 	addi	r2,r5,-1
    1170:	30c00044 	addi	r3,r6,1
    1174:	98800115 	stw	r2,4(r19)
    1178:	008001c4 	movi	r2,7
    117c:	98c00015 	stw	r3,0(r19)
    1180:	dc800f15 	stw	r18,60(sp)
    1184:	dc400e15 	stw	r17,56(sp)
    1188:	14418e16 	blt	r2,r17,17c4 <___vfprintf_internal_r+0xde8>
    118c:	9cc00204 	addi	r19,r19,8
    1190:	d9414917 	ldw	r5,1316(sp)
    1194:	d8800904 	addi	r2,sp,36
    1198:	8c400044 	addi	r17,r17,1
    119c:	9165883a 	add	r18,r18,r5
    11a0:	98800015 	stw	r2,0(r19)
    11a4:	008001c4 	movi	r2,7
    11a8:	99400115 	stw	r5,4(r19)
    11ac:	dc800f15 	stw	r18,60(sp)
    11b0:	dc400e15 	stw	r17,56(sp)
    11b4:	1440ed16 	blt	r2,r17,156c <___vfprintf_internal_r+0xb90>
    11b8:	98c00204 	addi	r3,r19,8
    11bc:	003f8506 	br	fd4 <___vfprintf_internal_r+0x5f8>
    11c0:	d9814b17 	ldw	r6,1324(sp)
    11c4:	d8814617 	ldw	r2,1304(sp)
    11c8:	30a1c83a 	sub	r16,r6,r2
    11cc:	043f4b0e 	bge	zero,r16,efc <___vfprintf_internal_r+0x520>
    11d0:	00800404 	movi	r2,16
    11d4:	1404340e 	bge	r2,r16,22a8 <___vfprintf_internal_r+0x18cc>
    11d8:	1027883a 	mov	r19,r2
    11dc:	07000074 	movhi	fp,1
    11e0:	e7317004 	addi	fp,fp,-14912
    11e4:	050001c4 	movi	r20,7
    11e8:	00000306 	br	11f8 <___vfprintf_internal_r+0x81c>
    11ec:	843ffc04 	addi	r16,r16,-16
    11f0:	ad400204 	addi	r21,r21,8
    11f4:	9c00130e 	bge	r19,r16,1244 <___vfprintf_internal_r+0x868>
    11f8:	94800404 	addi	r18,r18,16
    11fc:	8c400044 	addi	r17,r17,1
    1200:	af000015 	stw	fp,0(r21)
    1204:	acc00115 	stw	r19,4(r21)
    1208:	dc800f15 	stw	r18,60(sp)
    120c:	dc400e15 	stw	r17,56(sp)
    1210:	a47ff60e 	bge	r20,r17,11ec <___vfprintf_internal_r+0x810>
    1214:	d9015017 	ldw	r4,1344(sp)
    1218:	b00b883a 	mov	r5,r22
    121c:	d9800d04 	addi	r6,sp,52
    1220:	d9c15215 	stw	r7,1352(sp)
    1224:	00009840 	call	984 <__sprint_r>
    1228:	d9c15217 	ldw	r7,1352(sp)
    122c:	103fa31e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1230:	843ffc04 	addi	r16,r16,-16
    1234:	dc800f17 	ldw	r18,60(sp)
    1238:	dc400e17 	ldw	r17,56(sp)
    123c:	dd401a04 	addi	r21,sp,104
    1240:	9c3fed16 	blt	r19,r16,11f8 <___vfprintf_internal_r+0x81c>
    1244:	9425883a 	add	r18,r18,r16
    1248:	8c400044 	addi	r17,r17,1
    124c:	008001c4 	movi	r2,7
    1250:	af000015 	stw	fp,0(r21)
    1254:	ac000115 	stw	r16,4(r21)
    1258:	dc800f15 	stw	r18,60(sp)
    125c:	dc400e15 	stw	r17,56(sp)
    1260:	14416116 	blt	r2,r17,17e8 <___vfprintf_internal_r+0xe0c>
    1264:	ad400204 	addi	r21,r21,8
    1268:	003f2406 	br	efc <___vfprintf_internal_r+0x520>
    126c:	d9015017 	ldw	r4,1344(sp)
    1270:	000444c0 	call	444c <__sinit>
    1274:	d9c15217 	ldw	r7,1352(sp)
    1278:	003def06 	br	a38 <___vfprintf_internal_r+0x5c>
    127c:	d9015017 	ldw	r4,1344(sp)
    1280:	b00b883a 	mov	r5,r22
    1284:	d9c15215 	stw	r7,1352(sp)
    1288:	00028ac0 	call	28ac <__swsetup_r>
    128c:	d9c15217 	ldw	r7,1352(sp)
    1290:	103dee26 	beq	r2,zero,a4c <___vfprintf_internal_r+0x70>
    1294:	003f8c06 	br	10c8 <___vfprintf_internal_r+0x6ec>
    1298:	d9014317 	ldw	r4,1292(sp)
    129c:	d9414417 	ldw	r5,1296(sp)
    12a0:	000d883a 	mov	r6,zero
    12a4:	000f883a 	mov	r7,zero
    12a8:	00092180 	call	9218 <__eqdf2>
    12ac:	1000f21e 	bne	r2,zero,1678 <___vfprintf_internal_r+0xc9c>
    12b0:	00800074 	movhi	r2,1
    12b4:	10b16f04 	addi	r2,r2,-14916
    12b8:	94800044 	addi	r18,r18,1
    12bc:	8c400044 	addi	r17,r17,1
    12c0:	a8800015 	stw	r2,0(r21)
    12c4:	00c00044 	movi	r3,1
    12c8:	008001c4 	movi	r2,7
    12cc:	a8c00115 	stw	r3,4(r21)
    12d0:	dc800f15 	stw	r18,60(sp)
    12d4:	dc400e15 	stw	r17,56(sp)
    12d8:	1442fa16 	blt	r2,r17,1ec4 <___vfprintf_internal_r+0x14e8>
    12dc:	a8c00204 	addi	r3,r21,8
    12e0:	d8800617 	ldw	r2,24(sp)
    12e4:	d9014817 	ldw	r4,1312(sp)
    12e8:	11015c0e 	bge	r2,r4,185c <___vfprintf_internal_r+0xe80>
    12ec:	dc400e17 	ldw	r17,56(sp)
    12f0:	d9814a17 	ldw	r6,1320(sp)
    12f4:	00800044 	movi	r2,1
    12f8:	94800044 	addi	r18,r18,1
    12fc:	8c400044 	addi	r17,r17,1
    1300:	18800115 	stw	r2,4(r3)
    1304:	008001c4 	movi	r2,7
    1308:	19800015 	stw	r6,0(r3)
    130c:	dc800f15 	stw	r18,60(sp)
    1310:	dc400e15 	stw	r17,56(sp)
    1314:	14431016 	blt	r2,r17,1f58 <___vfprintf_internal_r+0x157c>
    1318:	18c00204 	addi	r3,r3,8
    131c:	d8814817 	ldw	r2,1312(sp)
    1320:	143fffc4 	addi	r16,r2,-1
    1324:	043f2b0e 	bge	zero,r16,fd4 <___vfprintf_internal_r+0x5f8>
    1328:	00800404 	movi	r2,16
    132c:	1402a20e 	bge	r2,r16,1db8 <___vfprintf_internal_r+0x13dc>
    1330:	dc400e17 	ldw	r17,56(sp)
    1334:	1027883a 	mov	r19,r2
    1338:	07000074 	movhi	fp,1
    133c:	e7317004 	addi	fp,fp,-14912
    1340:	050001c4 	movi	r20,7
    1344:	00000306 	br	1354 <___vfprintf_internal_r+0x978>
    1348:	18c00204 	addi	r3,r3,8
    134c:	843ffc04 	addi	r16,r16,-16
    1350:	9c029c0e 	bge	r19,r16,1dc4 <___vfprintf_internal_r+0x13e8>
    1354:	94800404 	addi	r18,r18,16
    1358:	8c400044 	addi	r17,r17,1
    135c:	1f000015 	stw	fp,0(r3)
    1360:	1cc00115 	stw	r19,4(r3)
    1364:	dc800f15 	stw	r18,60(sp)
    1368:	dc400e15 	stw	r17,56(sp)
    136c:	a47ff60e 	bge	r20,r17,1348 <___vfprintf_internal_r+0x96c>
    1370:	d9015017 	ldw	r4,1344(sp)
    1374:	b00b883a 	mov	r5,r22
    1378:	d9800d04 	addi	r6,sp,52
    137c:	00009840 	call	984 <__sprint_r>
    1380:	103f4e1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1384:	dc800f17 	ldw	r18,60(sp)
    1388:	dc400e17 	ldw	r17,56(sp)
    138c:	d8c01a04 	addi	r3,sp,104
    1390:	003fee06 	br	134c <___vfprintf_internal_r+0x970>
    1394:	d8802d0b 	ldhu	r2,180(sp)
    1398:	00ffffc4 	movi	r3,-1
    139c:	d8c14c15 	stw	r3,1328(sp)
    13a0:	1080100c 	andi	r2,r2,64
    13a4:	103dcc1e 	bne	r2,zero,ad8 <___vfprintf_internal_r+0xfc>
    13a8:	003dce06 	br	ae4 <___vfprintf_internal_r+0x108>
    13ac:	d9015017 	ldw	r4,1344(sp)
    13b0:	b00b883a 	mov	r5,r22
    13b4:	d9800d04 	addi	r6,sp,52
    13b8:	00009840 	call	984 <__sprint_r>
    13bc:	103f3f1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    13c0:	dc800f17 	ldw	r18,60(sp)
    13c4:	003f2e06 	br	1080 <___vfprintf_internal_r+0x6a4>
    13c8:	d9414d17 	ldw	r5,1332(sp)
    13cc:	29400414 	ori	r5,r5,16
    13d0:	d9414d15 	stw	r5,1332(sp)
    13d4:	d9814d17 	ldw	r6,1332(sp)
    13d8:	3080080c 	andi	r2,r6,32
    13dc:	10014f1e 	bne	r2,zero,191c <___vfprintf_internal_r+0xf40>
    13e0:	d8c14d17 	ldw	r3,1332(sp)
    13e4:	1880040c 	andi	r2,r3,16
    13e8:	1002ea1e 	bne	r2,zero,1f94 <___vfprintf_internal_r+0x15b8>
    13ec:	d9014d17 	ldw	r4,1332(sp)
    13f0:	2080100c 	andi	r2,r4,64
    13f4:	1002e726 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x15b8>
    13f8:	3880000f 	ldh	r2,0(r7)
    13fc:	39c00104 	addi	r7,r7,4
    1400:	d9c14115 	stw	r7,1284(sp)
    1404:	1023d7fa 	srai	r17,r2,31
    1408:	1021883a 	mov	r16,r2
    140c:	88037216 	blt	r17,zero,21d8 <___vfprintf_internal_r+0x17fc>
    1410:	01000044 	movi	r4,1
    1414:	98000416 	blt	r19,zero,1428 <___vfprintf_internal_r+0xa4c>
    1418:	d8c14d17 	ldw	r3,1332(sp)
    141c:	00bfdfc4 	movi	r2,-129
    1420:	1886703a 	and	r3,r3,r2
    1424:	d8c14d15 	stw	r3,1332(sp)
    1428:	8444b03a 	or	r2,r16,r17
    142c:	1002261e 	bne	r2,zero,1cc8 <___vfprintf_internal_r+0x12ec>
    1430:	9802251e 	bne	r19,zero,1cc8 <___vfprintf_internal_r+0x12ec>
    1434:	20803fcc 	andi	r2,r4,255
    1438:	10029b26 	beq	r2,zero,1ea8 <___vfprintf_internal_r+0x14cc>
    143c:	d8c01a04 	addi	r3,sp,104
    1440:	dd001004 	addi	r20,sp,64
    1444:	d8c14215 	stw	r3,1288(sp)
    1448:	d8c14217 	ldw	r3,1288(sp)
    144c:	dcc14615 	stw	r19,1304(sp)
    1450:	a0c5c83a 	sub	r2,r20,r3
    1454:	11c00a04 	addi	r7,r2,40
    1458:	99c0010e 	bge	r19,r7,1460 <___vfprintf_internal_r+0xa84>
    145c:	d9c14615 	stw	r7,1304(sp)
    1460:	dcc14715 	stw	r19,1308(sp)
    1464:	d8800407 	ldb	r2,16(sp)
    1468:	103e4c26 	beq	r2,zero,d9c <___vfprintf_internal_r+0x3c0>
    146c:	d8814617 	ldw	r2,1304(sp)
    1470:	10800044 	addi	r2,r2,1
    1474:	d8814615 	stw	r2,1304(sp)
    1478:	003e4806 	br	d9c <___vfprintf_internal_r+0x3c0>
    147c:	d9814d17 	ldw	r6,1332(sp)
    1480:	31800414 	ori	r6,r6,16
    1484:	d9814d15 	stw	r6,1332(sp)
    1488:	d8c14d17 	ldw	r3,1332(sp)
    148c:	1880080c 	andi	r2,r3,32
    1490:	1001271e 	bne	r2,zero,1930 <___vfprintf_internal_r+0xf54>
    1494:	d9414d17 	ldw	r5,1332(sp)
    1498:	2880040c 	andi	r2,r5,16
    149c:	1002b61e 	bne	r2,zero,1f78 <___vfprintf_internal_r+0x159c>
    14a0:	d9814d17 	ldw	r6,1332(sp)
    14a4:	3080100c 	andi	r2,r6,64
    14a8:	1002b326 	beq	r2,zero,1f78 <___vfprintf_internal_r+0x159c>
    14ac:	3c00000b 	ldhu	r16,0(r7)
    14b0:	0009883a 	mov	r4,zero
    14b4:	39c00104 	addi	r7,r7,4
    14b8:	0023883a 	mov	r17,zero
    14bc:	d9c14115 	stw	r7,1284(sp)
    14c0:	d8000405 	stb	zero,16(sp)
    14c4:	003fd306 	br	1414 <___vfprintf_internal_r+0xa38>
    14c8:	d9014d17 	ldw	r4,1332(sp)
    14cc:	21000414 	ori	r4,r4,16
    14d0:	d9014d15 	stw	r4,1332(sp)
    14d4:	d9414d17 	ldw	r5,1332(sp)
    14d8:	2880080c 	andi	r2,r5,32
    14dc:	1001081e 	bne	r2,zero,1900 <___vfprintf_internal_r+0xf24>
    14e0:	d8c14d17 	ldw	r3,1332(sp)
    14e4:	1880040c 	andi	r2,r3,16
    14e8:	1002b01e 	bne	r2,zero,1fac <___vfprintf_internal_r+0x15d0>
    14ec:	d9014d17 	ldw	r4,1332(sp)
    14f0:	2080100c 	andi	r2,r4,64
    14f4:	1002ad26 	beq	r2,zero,1fac <___vfprintf_internal_r+0x15d0>
    14f8:	3c00000b 	ldhu	r16,0(r7)
    14fc:	01000044 	movi	r4,1
    1500:	39c00104 	addi	r7,r7,4
    1504:	0023883a 	mov	r17,zero
    1508:	d9c14115 	stw	r7,1284(sp)
    150c:	d8000405 	stb	zero,16(sp)
    1510:	003fc006 	br	1414 <___vfprintf_internal_r+0xa38>
    1514:	d9015017 	ldw	r4,1344(sp)
    1518:	b00b883a 	mov	r5,r22
    151c:	d9800d04 	addi	r6,sp,52
    1520:	00009840 	call	984 <__sprint_r>
    1524:	103ee51e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1528:	dc800f17 	ldw	r18,60(sp)
    152c:	d8c01a04 	addi	r3,sp,104
    1530:	d9814d17 	ldw	r6,1332(sp)
    1534:	3080004c 	andi	r2,r6,1
    1538:	1005003a 	cmpeq	r2,r2,zero
    153c:	103ea51e 	bne	r2,zero,fd4 <___vfprintf_internal_r+0x5f8>
    1540:	00800044 	movi	r2,1
    1544:	dc400e17 	ldw	r17,56(sp)
    1548:	18800115 	stw	r2,4(r3)
    154c:	d8814a17 	ldw	r2,1320(sp)
    1550:	94800044 	addi	r18,r18,1
    1554:	8c400044 	addi	r17,r17,1
    1558:	18800015 	stw	r2,0(r3)
    155c:	008001c4 	movi	r2,7
    1560:	dc800f15 	stw	r18,60(sp)
    1564:	dc400e15 	stw	r17,56(sp)
    1568:	14421e0e 	bge	r2,r17,1de4 <___vfprintf_internal_r+0x1408>
    156c:	d9015017 	ldw	r4,1344(sp)
    1570:	b00b883a 	mov	r5,r22
    1574:	d9800d04 	addi	r6,sp,52
    1578:	00009840 	call	984 <__sprint_r>
    157c:	103ecf1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1580:	dc800f17 	ldw	r18,60(sp)
    1584:	d8c01a04 	addi	r3,sp,104
    1588:	003e9206 	br	fd4 <___vfprintf_internal_r+0x5f8>
    158c:	d9015017 	ldw	r4,1344(sp)
    1590:	b00b883a 	mov	r5,r22
    1594:	d9800d04 	addi	r6,sp,52
    1598:	00009840 	call	984 <__sprint_r>
    159c:	103ec026 	beq	r2,zero,10a0 <___vfprintf_internal_r+0x6c4>
    15a0:	003ec606 	br	10bc <___vfprintf_internal_r+0x6e0>
    15a4:	d9015017 	ldw	r4,1344(sp)
    15a8:	b00b883a 	mov	r5,r22
    15ac:	d9800d04 	addi	r6,sp,52
    15b0:	d9c15215 	stw	r7,1352(sp)
    15b4:	00009840 	call	984 <__sprint_r>
    15b8:	d9c15217 	ldw	r7,1352(sp)
    15bc:	103ebf1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    15c0:	dc800f17 	ldw	r18,60(sp)
    15c4:	dc400e17 	ldw	r17,56(sp)
    15c8:	dd401a04 	addi	r21,sp,104
    15cc:	003e7406 	br	fa0 <___vfprintf_internal_r+0x5c4>
    15d0:	d9015017 	ldw	r4,1344(sp)
    15d4:	b00b883a 	mov	r5,r22
    15d8:	d9800d04 	addi	r6,sp,52
    15dc:	d9c15215 	stw	r7,1352(sp)
    15e0:	00009840 	call	984 <__sprint_r>
    15e4:	d9c15217 	ldw	r7,1352(sp)
    15e8:	103eb41e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    15ec:	dd401a04 	addi	r21,sp,104
    15f0:	003d6d06 	br	ba8 <___vfprintf_internal_r+0x1cc>
    15f4:	d9015017 	ldw	r4,1344(sp)
    15f8:	b00b883a 	mov	r5,r22
    15fc:	d9800d04 	addi	r6,sp,52
    1600:	d9c15215 	stw	r7,1352(sp)
    1604:	00009840 	call	984 <__sprint_r>
    1608:	d9c15217 	ldw	r7,1352(sp)
    160c:	103eab1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1610:	dc800f17 	ldw	r18,60(sp)
    1614:	dc400e17 	ldw	r17,56(sp)
    1618:	dd401a04 	addi	r21,sp,104
    161c:	003e3406 	br	ef0 <___vfprintf_internal_r+0x514>
    1620:	d9015017 	ldw	r4,1344(sp)
    1624:	b00b883a 	mov	r5,r22
    1628:	d9800d04 	addi	r6,sp,52
    162c:	d9c15215 	stw	r7,1352(sp)
    1630:	00009840 	call	984 <__sprint_r>
    1634:	d9c15217 	ldw	r7,1352(sp)
    1638:	103ea01e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    163c:	dc800f17 	ldw	r18,60(sp)
    1640:	dc400e17 	ldw	r17,56(sp)
    1644:	dd401a04 	addi	r21,sp,104
    1648:	003e1c06 	br	ebc <___vfprintf_internal_r+0x4e0>
    164c:	d9015017 	ldw	r4,1344(sp)
    1650:	b00b883a 	mov	r5,r22
    1654:	d9800d04 	addi	r6,sp,52
    1658:	d9c15215 	stw	r7,1352(sp)
    165c:	00009840 	call	984 <__sprint_r>
    1660:	d9c15217 	ldw	r7,1352(sp)
    1664:	103e951e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1668:	dc800f17 	ldw	r18,60(sp)
    166c:	dc400e17 	ldw	r17,56(sp)
    1670:	dd401a04 	addi	r21,sp,104
    1674:	003e0406 	br	e88 <___vfprintf_internal_r+0x4ac>
    1678:	d9000617 	ldw	r4,24(sp)
    167c:	0102520e 	bge	zero,r4,1fc8 <___vfprintf_internal_r+0x15ec>
    1680:	d9814817 	ldw	r6,1312(sp)
    1684:	21807a16 	blt	r4,r6,1870 <___vfprintf_internal_r+0xe94>
    1688:	d8814217 	ldw	r2,1288(sp)
    168c:	91a5883a 	add	r18,r18,r6
    1690:	8c400044 	addi	r17,r17,1
    1694:	a8800015 	stw	r2,0(r21)
    1698:	008001c4 	movi	r2,7
    169c:	a9800115 	stw	r6,4(r21)
    16a0:	dc800f15 	stw	r18,60(sp)
    16a4:	dc400e15 	stw	r17,56(sp)
    16a8:	1442f616 	blt	r2,r17,2284 <___vfprintf_internal_r+0x18a8>
    16ac:	a8c00204 	addi	r3,r21,8
    16b0:	d9414817 	ldw	r5,1312(sp)
    16b4:	2161c83a 	sub	r16,r4,r5
    16b8:	043f9d0e 	bge	zero,r16,1530 <___vfprintf_internal_r+0xb54>
    16bc:	00800404 	movi	r2,16
    16c0:	1402130e 	bge	r2,r16,1f10 <___vfprintf_internal_r+0x1534>
    16c4:	dc400e17 	ldw	r17,56(sp)
    16c8:	1027883a 	mov	r19,r2
    16cc:	07000074 	movhi	fp,1
    16d0:	e7317004 	addi	fp,fp,-14912
    16d4:	050001c4 	movi	r20,7
    16d8:	00000306 	br	16e8 <___vfprintf_internal_r+0xd0c>
    16dc:	18c00204 	addi	r3,r3,8
    16e0:	843ffc04 	addi	r16,r16,-16
    16e4:	9c020d0e 	bge	r19,r16,1f1c <___vfprintf_internal_r+0x1540>
    16e8:	94800404 	addi	r18,r18,16
    16ec:	8c400044 	addi	r17,r17,1
    16f0:	1f000015 	stw	fp,0(r3)
    16f4:	1cc00115 	stw	r19,4(r3)
    16f8:	dc800f15 	stw	r18,60(sp)
    16fc:	dc400e15 	stw	r17,56(sp)
    1700:	a47ff60e 	bge	r20,r17,16dc <___vfprintf_internal_r+0xd00>
    1704:	d9015017 	ldw	r4,1344(sp)
    1708:	b00b883a 	mov	r5,r22
    170c:	d9800d04 	addi	r6,sp,52
    1710:	00009840 	call	984 <__sprint_r>
    1714:	103e691e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1718:	dc800f17 	ldw	r18,60(sp)
    171c:	dc400e17 	ldw	r17,56(sp)
    1720:	d8c01a04 	addi	r3,sp,104
    1724:	003fee06 	br	16e0 <___vfprintf_internal_r+0xd04>
    1728:	d8814817 	ldw	r2,1312(sp)
    172c:	143fffc4 	addi	r16,r2,-1
    1730:	043e970e 	bge	zero,r16,1190 <___vfprintf_internal_r+0x7b4>
    1734:	00800404 	movi	r2,16
    1738:	1400180e 	bge	r2,r16,179c <___vfprintf_internal_r+0xdc0>
    173c:	1029883a 	mov	r20,r2
    1740:	07000074 	movhi	fp,1
    1744:	e7317004 	addi	fp,fp,-14912
    1748:	054001c4 	movi	r21,7
    174c:	00000306 	br	175c <___vfprintf_internal_r+0xd80>
    1750:	9cc00204 	addi	r19,r19,8
    1754:	843ffc04 	addi	r16,r16,-16
    1758:	a400120e 	bge	r20,r16,17a4 <___vfprintf_internal_r+0xdc8>
    175c:	94800404 	addi	r18,r18,16
    1760:	8c400044 	addi	r17,r17,1
    1764:	9f000015 	stw	fp,0(r19)
    1768:	9d000115 	stw	r20,4(r19)
    176c:	dc800f15 	stw	r18,60(sp)
    1770:	dc400e15 	stw	r17,56(sp)
    1774:	ac7ff60e 	bge	r21,r17,1750 <___vfprintf_internal_r+0xd74>
    1778:	d9015017 	ldw	r4,1344(sp)
    177c:	b00b883a 	mov	r5,r22
    1780:	d9800d04 	addi	r6,sp,52
    1784:	00009840 	call	984 <__sprint_r>
    1788:	103e4c1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    178c:	dc800f17 	ldw	r18,60(sp)
    1790:	dc400e17 	ldw	r17,56(sp)
    1794:	dcc01a04 	addi	r19,sp,104
    1798:	003fee06 	br	1754 <___vfprintf_internal_r+0xd78>
    179c:	07000074 	movhi	fp,1
    17a0:	e7317004 	addi	fp,fp,-14912
    17a4:	9425883a 	add	r18,r18,r16
    17a8:	8c400044 	addi	r17,r17,1
    17ac:	008001c4 	movi	r2,7
    17b0:	9f000015 	stw	fp,0(r19)
    17b4:	9c000115 	stw	r16,4(r19)
    17b8:	dc800f15 	stw	r18,60(sp)
    17bc:	dc400e15 	stw	r17,56(sp)
    17c0:	147e720e 	bge	r2,r17,118c <___vfprintf_internal_r+0x7b0>
    17c4:	d9015017 	ldw	r4,1344(sp)
    17c8:	b00b883a 	mov	r5,r22
    17cc:	d9800d04 	addi	r6,sp,52
    17d0:	00009840 	call	984 <__sprint_r>
    17d4:	103e391e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    17d8:	dc800f17 	ldw	r18,60(sp)
    17dc:	dc400e17 	ldw	r17,56(sp)
    17e0:	dcc01a04 	addi	r19,sp,104
    17e4:	003e6a06 	br	1190 <___vfprintf_internal_r+0x7b4>
    17e8:	d9015017 	ldw	r4,1344(sp)
    17ec:	b00b883a 	mov	r5,r22
    17f0:	d9800d04 	addi	r6,sp,52
    17f4:	d9c15215 	stw	r7,1352(sp)
    17f8:	00009840 	call	984 <__sprint_r>
    17fc:	d9c15217 	ldw	r7,1352(sp)
    1800:	103e2e1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1804:	dc800f17 	ldw	r18,60(sp)
    1808:	dc400e17 	ldw	r17,56(sp)
    180c:	dd401a04 	addi	r21,sp,104
    1810:	003dba06 	br	efc <___vfprintf_internal_r+0x520>
    1814:	d9015017 	ldw	r4,1344(sp)
    1818:	b00b883a 	mov	r5,r22
    181c:	d9800d04 	addi	r6,sp,52
    1820:	00009840 	call	984 <__sprint_r>
    1824:	103e251e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1828:	dc800f17 	ldw	r18,60(sp)
    182c:	dc400e17 	ldw	r17,56(sp)
    1830:	dcc01a04 	addi	r19,sp,104
    1834:	003e4206 	br	1140 <___vfprintf_internal_r+0x764>
    1838:	d9015017 	ldw	r4,1344(sp)
    183c:	b00b883a 	mov	r5,r22
    1840:	d9800d04 	addi	r6,sp,52
    1844:	00009840 	call	984 <__sprint_r>
    1848:	103e1c1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    184c:	dc800f17 	ldw	r18,60(sp)
    1850:	dc400e17 	ldw	r17,56(sp)
    1854:	d8c01a04 	addi	r3,sp,104
    1858:	003e2e06 	br	1114 <___vfprintf_internal_r+0x738>
    185c:	d9414d17 	ldw	r5,1332(sp)
    1860:	2880004c 	andi	r2,r5,1
    1864:	1005003a 	cmpeq	r2,r2,zero
    1868:	103dda1e 	bne	r2,zero,fd4 <___vfprintf_internal_r+0x5f8>
    186c:	003e9f06 	br	12ec <___vfprintf_internal_r+0x910>
    1870:	d8c14217 	ldw	r3,1288(sp)
    1874:	9125883a 	add	r18,r18,r4
    1878:	8c400044 	addi	r17,r17,1
    187c:	008001c4 	movi	r2,7
    1880:	a8c00015 	stw	r3,0(r21)
    1884:	a9000115 	stw	r4,4(r21)
    1888:	dc800f15 	stw	r18,60(sp)
    188c:	dc400e15 	stw	r17,56(sp)
    1890:	14426616 	blt	r2,r17,222c <___vfprintf_internal_r+0x1850>
    1894:	a8c00204 	addi	r3,r21,8
    1898:	d9414a17 	ldw	r5,1320(sp)
    189c:	00800044 	movi	r2,1
    18a0:	94800044 	addi	r18,r18,1
    18a4:	8c400044 	addi	r17,r17,1
    18a8:	18800115 	stw	r2,4(r3)
    18ac:	008001c4 	movi	r2,7
    18b0:	19400015 	stw	r5,0(r3)
    18b4:	dc800f15 	stw	r18,60(sp)
    18b8:	dc400e15 	stw	r17,56(sp)
    18bc:	2021883a 	mov	r16,r4
    18c0:	14425016 	blt	r2,r17,2204 <___vfprintf_internal_r+0x1828>
    18c4:	19400204 	addi	r5,r3,8
    18c8:	d9814817 	ldw	r6,1312(sp)
    18cc:	8c400044 	addi	r17,r17,1
    18d0:	dc400e15 	stw	r17,56(sp)
    18d4:	3107c83a 	sub	r3,r6,r4
    18d8:	d9014217 	ldw	r4,1288(sp)
    18dc:	90e5883a 	add	r18,r18,r3
    18e0:	28c00115 	stw	r3,4(r5)
    18e4:	8105883a 	add	r2,r16,r4
    18e8:	28800015 	stw	r2,0(r5)
    18ec:	008001c4 	movi	r2,7
    18f0:	dc800f15 	stw	r18,60(sp)
    18f4:	147f1d16 	blt	r2,r17,156c <___vfprintf_internal_r+0xb90>
    18f8:	28c00204 	addi	r3,r5,8
    18fc:	003db506 	br	fd4 <___vfprintf_internal_r+0x5f8>
    1900:	3c000017 	ldw	r16,0(r7)
    1904:	3c400117 	ldw	r17,4(r7)
    1908:	39800204 	addi	r6,r7,8
    190c:	01000044 	movi	r4,1
    1910:	d9814115 	stw	r6,1284(sp)
    1914:	d8000405 	stb	zero,16(sp)
    1918:	003ebe06 	br	1414 <___vfprintf_internal_r+0xa38>
    191c:	3c000017 	ldw	r16,0(r7)
    1920:	3c400117 	ldw	r17,4(r7)
    1924:	38800204 	addi	r2,r7,8
    1928:	d8814115 	stw	r2,1284(sp)
    192c:	003eb706 	br	140c <___vfprintf_internal_r+0xa30>
    1930:	3c000017 	ldw	r16,0(r7)
    1934:	3c400117 	ldw	r17,4(r7)
    1938:	39000204 	addi	r4,r7,8
    193c:	d9014115 	stw	r4,1284(sp)
    1940:	0009883a 	mov	r4,zero
    1944:	d8000405 	stb	zero,16(sp)
    1948:	003eb206 	br	1414 <___vfprintf_internal_r+0xa38>
    194c:	38c00017 	ldw	r3,0(r7)
    1950:	39c00104 	addi	r7,r7,4
    1954:	d8c14b15 	stw	r3,1324(sp)
    1958:	1800d10e 	bge	r3,zero,1ca0 <___vfprintf_internal_r+0x12c4>
    195c:	00c7c83a 	sub	r3,zero,r3
    1960:	d8c14b15 	stw	r3,1324(sp)
    1964:	d9014d17 	ldw	r4,1332(sp)
    1968:	b8c00007 	ldb	r3,0(r23)
    196c:	21000114 	ori	r4,r4,4
    1970:	d9014d15 	stw	r4,1332(sp)
    1974:	003c9806 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1978:	d9814d17 	ldw	r6,1332(sp)
    197c:	3080080c 	andi	r2,r6,32
    1980:	1001f026 	beq	r2,zero,2144 <___vfprintf_internal_r+0x1768>
    1984:	d9014c17 	ldw	r4,1328(sp)
    1988:	38800017 	ldw	r2,0(r7)
    198c:	39c00104 	addi	r7,r7,4
    1990:	d9c14115 	stw	r7,1284(sp)
    1994:	2007d7fa 	srai	r3,r4,31
    1998:	d9c14117 	ldw	r7,1284(sp)
    199c:	11000015 	stw	r4,0(r2)
    19a0:	10c00115 	stw	r3,4(r2)
    19a4:	003c6906 	br	b4c <___vfprintf_internal_r+0x170>
    19a8:	b8c00007 	ldb	r3,0(r23)
    19ac:	00801b04 	movi	r2,108
    19b0:	18824f26 	beq	r3,r2,22f0 <___vfprintf_internal_r+0x1914>
    19b4:	d9414d17 	ldw	r5,1332(sp)
    19b8:	29400414 	ori	r5,r5,16
    19bc:	d9414d15 	stw	r5,1332(sp)
    19c0:	003c8506 	br	bd8 <___vfprintf_internal_r+0x1fc>
    19c4:	d9814d17 	ldw	r6,1332(sp)
    19c8:	b8c00007 	ldb	r3,0(r23)
    19cc:	31800814 	ori	r6,r6,32
    19d0:	d9814d15 	stw	r6,1332(sp)
    19d4:	003c8006 	br	bd8 <___vfprintf_internal_r+0x1fc>
    19d8:	d8814d17 	ldw	r2,1332(sp)
    19dc:	3c000017 	ldw	r16,0(r7)
    19e0:	00c01e04 	movi	r3,120
    19e4:	10800094 	ori	r2,r2,2
    19e8:	d8814d15 	stw	r2,1332(sp)
    19ec:	39c00104 	addi	r7,r7,4
    19f0:	01400074 	movhi	r5,1
    19f4:	29715804 	addi	r5,r5,-15008
    19f8:	00800c04 	movi	r2,48
    19fc:	0023883a 	mov	r17,zero
    1a00:	01000084 	movi	r4,2
    1a04:	d9c14115 	stw	r7,1284(sp)
    1a08:	d8c14e15 	stw	r3,1336(sp)
    1a0c:	d9414515 	stw	r5,1300(sp)
    1a10:	d8800505 	stb	r2,20(sp)
    1a14:	d8c00545 	stb	r3,21(sp)
    1a18:	d8000405 	stb	zero,16(sp)
    1a1c:	003e7d06 	br	1414 <___vfprintf_internal_r+0xa38>
    1a20:	d8814d17 	ldw	r2,1332(sp)
    1a24:	b8c00007 	ldb	r3,0(r23)
    1a28:	10801014 	ori	r2,r2,64
    1a2c:	d8814d15 	stw	r2,1332(sp)
    1a30:	003c6906 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1a34:	d9414d17 	ldw	r5,1332(sp)
    1a38:	2880020c 	andi	r2,r5,8
    1a3c:	1001df26 	beq	r2,zero,21bc <___vfprintf_internal_r+0x17e0>
    1a40:	39800017 	ldw	r6,0(r7)
    1a44:	38800204 	addi	r2,r7,8
    1a48:	d8814115 	stw	r2,1284(sp)
    1a4c:	d9814315 	stw	r6,1292(sp)
    1a50:	39c00117 	ldw	r7,4(r7)
    1a54:	d9c14415 	stw	r7,1296(sp)
    1a58:	d9014317 	ldw	r4,1292(sp)
    1a5c:	d9414417 	ldw	r5,1296(sp)
    1a60:	000737c0 	call	737c <__isinfd>
    1a64:	10021726 	beq	r2,zero,22c4 <___vfprintf_internal_r+0x18e8>
    1a68:	d9014317 	ldw	r4,1292(sp)
    1a6c:	d9414417 	ldw	r5,1296(sp)
    1a70:	000d883a 	mov	r6,zero
    1a74:	000f883a 	mov	r7,zero
    1a78:	00094380 	call	9438 <__ltdf2>
    1a7c:	1002ca16 	blt	r2,zero,25a8 <___vfprintf_internal_r+0x1bcc>
    1a80:	d9414e17 	ldw	r5,1336(sp)
    1a84:	008011c4 	movi	r2,71
    1a88:	11420a16 	blt	r2,r5,22b4 <___vfprintf_internal_r+0x18d8>
    1a8c:	01800074 	movhi	r6,1
    1a90:	31b15d04 	addi	r6,r6,-14988
    1a94:	d9814215 	stw	r6,1288(sp)
    1a98:	d9014d17 	ldw	r4,1332(sp)
    1a9c:	00c000c4 	movi	r3,3
    1aa0:	00bfdfc4 	movi	r2,-129
    1aa4:	2088703a 	and	r4,r4,r2
    1aa8:	180f883a 	mov	r7,r3
    1aac:	d8c14615 	stw	r3,1304(sp)
    1ab0:	d9014d15 	stw	r4,1332(sp)
    1ab4:	d8014715 	stw	zero,1308(sp)
    1ab8:	003e6a06 	br	1464 <___vfprintf_internal_r+0xa88>
    1abc:	38800017 	ldw	r2,0(r7)
    1ac0:	00c00044 	movi	r3,1
    1ac4:	39c00104 	addi	r7,r7,4
    1ac8:	d9c14115 	stw	r7,1284(sp)
    1acc:	d9001004 	addi	r4,sp,64
    1ad0:	180f883a 	mov	r7,r3
    1ad4:	d8c14615 	stw	r3,1304(sp)
    1ad8:	d9014215 	stw	r4,1288(sp)
    1adc:	d8801005 	stb	r2,64(sp)
    1ae0:	d8000405 	stb	zero,16(sp)
    1ae4:	003cac06 	br	d98 <___vfprintf_internal_r+0x3bc>
    1ae8:	01400074 	movhi	r5,1
    1aec:	29716304 	addi	r5,r5,-14964
    1af0:	d9414515 	stw	r5,1300(sp)
    1af4:	d9814d17 	ldw	r6,1332(sp)
    1af8:	3080080c 	andi	r2,r6,32
    1afc:	1000f926 	beq	r2,zero,1ee4 <___vfprintf_internal_r+0x1508>
    1b00:	3c000017 	ldw	r16,0(r7)
    1b04:	3c400117 	ldw	r17,4(r7)
    1b08:	38800204 	addi	r2,r7,8
    1b0c:	d8814115 	stw	r2,1284(sp)
    1b10:	d9414d17 	ldw	r5,1332(sp)
    1b14:	2880004c 	andi	r2,r5,1
    1b18:	1005003a 	cmpeq	r2,r2,zero
    1b1c:	1000b31e 	bne	r2,zero,1dec <___vfprintf_internal_r+0x1410>
    1b20:	8444b03a 	or	r2,r16,r17
    1b24:	1000b126 	beq	r2,zero,1dec <___vfprintf_internal_r+0x1410>
    1b28:	d9814e17 	ldw	r6,1336(sp)
    1b2c:	29400094 	ori	r5,r5,2
    1b30:	00800c04 	movi	r2,48
    1b34:	01000084 	movi	r4,2
    1b38:	d9414d15 	stw	r5,1332(sp)
    1b3c:	d8800505 	stb	r2,20(sp)
    1b40:	d9800545 	stb	r6,21(sp)
    1b44:	d8000405 	stb	zero,16(sp)
    1b48:	003e3206 	br	1414 <___vfprintf_internal_r+0xa38>
    1b4c:	01800074 	movhi	r6,1
    1b50:	31b15804 	addi	r6,r6,-15008
    1b54:	d9814515 	stw	r6,1300(sp)
    1b58:	003fe606 	br	1af4 <___vfprintf_internal_r+0x1118>
    1b5c:	00800ac4 	movi	r2,43
    1b60:	d8800405 	stb	r2,16(sp)
    1b64:	b8c00007 	ldb	r3,0(r23)
    1b68:	003c1b06 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1b6c:	d8814d17 	ldw	r2,1332(sp)
    1b70:	b8c00007 	ldb	r3,0(r23)
    1b74:	10800054 	ori	r2,r2,1
    1b78:	d8814d15 	stw	r2,1332(sp)
    1b7c:	003c1606 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1b80:	d8800407 	ldb	r2,16(sp)
    1b84:	1000461e 	bne	r2,zero,1ca0 <___vfprintf_internal_r+0x12c4>
    1b88:	00800804 	movi	r2,32
    1b8c:	d8800405 	stb	r2,16(sp)
    1b90:	b8c00007 	ldb	r3,0(r23)
    1b94:	003c1006 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1b98:	d9814d17 	ldw	r6,1332(sp)
    1b9c:	b8c00007 	ldb	r3,0(r23)
    1ba0:	31800214 	ori	r6,r6,8
    1ba4:	d9814d15 	stw	r6,1332(sp)
    1ba8:	003c0b06 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1bac:	0007883a 	mov	r3,zero
    1bb0:	01000244 	movi	r4,9
    1bb4:	188002a4 	muli	r2,r3,10
    1bb8:	b8c00007 	ldb	r3,0(r23)
    1bbc:	d9814e17 	ldw	r6,1336(sp)
    1bc0:	bdc00044 	addi	r23,r23,1
    1bc4:	d8c14e15 	stw	r3,1336(sp)
    1bc8:	d9414e17 	ldw	r5,1336(sp)
    1bcc:	3085883a 	add	r2,r6,r2
    1bd0:	10fff404 	addi	r3,r2,-48
    1bd4:	28bff404 	addi	r2,r5,-48
    1bd8:	20bff62e 	bgeu	r4,r2,1bb4 <___vfprintf_internal_r+0x11d8>
    1bdc:	d8c14b15 	stw	r3,1324(sp)
    1be0:	003bff06 	br	be0 <___vfprintf_internal_r+0x204>
    1be4:	d9414d17 	ldw	r5,1332(sp)
    1be8:	b8c00007 	ldb	r3,0(r23)
    1bec:	29402014 	ori	r5,r5,128
    1bf0:	d9414d15 	stw	r5,1332(sp)
    1bf4:	003bf806 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1bf8:	b8c00007 	ldb	r3,0(r23)
    1bfc:	00800a84 	movi	r2,42
    1c00:	bdc00044 	addi	r23,r23,1
    1c04:	18831526 	beq	r3,r2,285c <___vfprintf_internal_r+0x1e80>
    1c08:	d8c14e15 	stw	r3,1336(sp)
    1c0c:	18bff404 	addi	r2,r3,-48
    1c10:	00c00244 	movi	r3,9
    1c14:	18827836 	bltu	r3,r2,25f8 <___vfprintf_internal_r+0x1c1c>
    1c18:	000d883a 	mov	r6,zero
    1c1c:	308002a4 	muli	r2,r6,10
    1c20:	b9800007 	ldb	r6,0(r23)
    1c24:	d9414e17 	ldw	r5,1336(sp)
    1c28:	bdc00044 	addi	r23,r23,1
    1c2c:	d9814e15 	stw	r6,1336(sp)
    1c30:	d9014e17 	ldw	r4,1336(sp)
    1c34:	1145883a 	add	r2,r2,r5
    1c38:	11bff404 	addi	r6,r2,-48
    1c3c:	20bff404 	addi	r2,r4,-48
    1c40:	18bff62e 	bgeu	r3,r2,1c1c <___vfprintf_internal_r+0x1240>
    1c44:	3027883a 	mov	r19,r6
    1c48:	303be50e 	bge	r6,zero,be0 <___vfprintf_internal_r+0x204>
    1c4c:	04ffffc4 	movi	r19,-1
    1c50:	003be306 	br	be0 <___vfprintf_internal_r+0x204>
    1c54:	d8000405 	stb	zero,16(sp)
    1c58:	39800017 	ldw	r6,0(r7)
    1c5c:	39c00104 	addi	r7,r7,4
    1c60:	d9c14115 	stw	r7,1284(sp)
    1c64:	d9814215 	stw	r6,1288(sp)
    1c68:	3001c926 	beq	r6,zero,2390 <___vfprintf_internal_r+0x19b4>
    1c6c:	98000e16 	blt	r19,zero,1ca8 <___vfprintf_internal_r+0x12cc>
    1c70:	d9014217 	ldw	r4,1288(sp)
    1c74:	000b883a 	mov	r5,zero
    1c78:	980d883a 	mov	r6,r19
    1c7c:	0005a980 	call	5a98 <memchr>
    1c80:	10025926 	beq	r2,zero,25e8 <___vfprintf_internal_r+0x1c0c>
    1c84:	d8c14217 	ldw	r3,1288(sp)
    1c88:	10cfc83a 	sub	r7,r2,r3
    1c8c:	99c19e16 	blt	r19,r7,2308 <___vfprintf_internal_r+0x192c>
    1c90:	d9c14615 	stw	r7,1304(sp)
    1c94:	38000916 	blt	r7,zero,1cbc <___vfprintf_internal_r+0x12e0>
    1c98:	d8014715 	stw	zero,1308(sp)
    1c9c:	003df106 	br	1464 <___vfprintf_internal_r+0xa88>
    1ca0:	b8c00007 	ldb	r3,0(r23)
    1ca4:	003bcc06 	br	bd8 <___vfprintf_internal_r+0x1fc>
    1ca8:	d9014217 	ldw	r4,1288(sp)
    1cac:	00076640 	call	7664 <strlen>
    1cb0:	d8814615 	stw	r2,1304(sp)
    1cb4:	100f883a 	mov	r7,r2
    1cb8:	103ff70e 	bge	r2,zero,1c98 <___vfprintf_internal_r+0x12bc>
    1cbc:	d8014615 	stw	zero,1304(sp)
    1cc0:	d8014715 	stw	zero,1308(sp)
    1cc4:	003de706 	br	1464 <___vfprintf_internal_r+0xa88>
    1cc8:	20c03fcc 	andi	r3,r4,255
    1ccc:	00800044 	movi	r2,1
    1cd0:	18802d26 	beq	r3,r2,1d88 <___vfprintf_internal_r+0x13ac>
    1cd4:	18800e36 	bltu	r3,r2,1d10 <___vfprintf_internal_r+0x1334>
    1cd8:	00800084 	movi	r2,2
    1cdc:	1880fa26 	beq	r3,r2,20c8 <___vfprintf_internal_r+0x16ec>
    1ce0:	01000074 	movhi	r4,1
    1ce4:	21316804 	addi	r4,r4,-14944
    1ce8:	00076640 	call	7664 <strlen>
    1cec:	100f883a 	mov	r7,r2
    1cf0:	dcc14615 	stw	r19,1304(sp)
    1cf4:	9880010e 	bge	r19,r2,1cfc <___vfprintf_internal_r+0x1320>
    1cf8:	d8814615 	stw	r2,1304(sp)
    1cfc:	00800074 	movhi	r2,1
    1d00:	10b16804 	addi	r2,r2,-14944
    1d04:	dcc14715 	stw	r19,1308(sp)
    1d08:	d8814215 	stw	r2,1288(sp)
    1d0c:	003dd506 	br	1464 <___vfprintf_internal_r+0xa88>
    1d10:	d9401a04 	addi	r5,sp,104
    1d14:	dd001004 	addi	r20,sp,64
    1d18:	d9414215 	stw	r5,1288(sp)
    1d1c:	880a977a 	slli	r5,r17,29
    1d20:	d9814217 	ldw	r6,1288(sp)
    1d24:	8004d0fa 	srli	r2,r16,3
    1d28:	8806d0fa 	srli	r3,r17,3
    1d2c:	810001cc 	andi	r4,r16,7
    1d30:	2884b03a 	or	r2,r5,r2
    1d34:	31bfffc4 	addi	r6,r6,-1
    1d38:	21000c04 	addi	r4,r4,48
    1d3c:	d9814215 	stw	r6,1288(sp)
    1d40:	10cab03a 	or	r5,r2,r3
    1d44:	31000005 	stb	r4,0(r6)
    1d48:	1021883a 	mov	r16,r2
    1d4c:	1823883a 	mov	r17,r3
    1d50:	283ff21e 	bne	r5,zero,1d1c <___vfprintf_internal_r+0x1340>
    1d54:	d8c14d17 	ldw	r3,1332(sp)
    1d58:	1880004c 	andi	r2,r3,1
    1d5c:	1005003a 	cmpeq	r2,r2,zero
    1d60:	103db91e 	bne	r2,zero,1448 <___vfprintf_internal_r+0xa6c>
    1d64:	20803fcc 	andi	r2,r4,255
    1d68:	1080201c 	xori	r2,r2,128
    1d6c:	10bfe004 	addi	r2,r2,-128
    1d70:	00c00c04 	movi	r3,48
    1d74:	10fdb426 	beq	r2,r3,1448 <___vfprintf_internal_r+0xa6c>
    1d78:	31bfffc4 	addi	r6,r6,-1
    1d7c:	d9814215 	stw	r6,1288(sp)
    1d80:	30c00005 	stb	r3,0(r6)
    1d84:	003db006 	br	1448 <___vfprintf_internal_r+0xa6c>
    1d88:	88800068 	cmpgeui	r2,r17,1
    1d8c:	10002c1e 	bne	r2,zero,1e40 <___vfprintf_internal_r+0x1464>
    1d90:	8800021e 	bne	r17,zero,1d9c <___vfprintf_internal_r+0x13c0>
    1d94:	00800244 	movi	r2,9
    1d98:	14002936 	bltu	r2,r16,1e40 <___vfprintf_internal_r+0x1464>
    1d9c:	d90019c4 	addi	r4,sp,103
    1da0:	dd001004 	addi	r20,sp,64
    1da4:	d9014215 	stw	r4,1288(sp)
    1da8:	d9014217 	ldw	r4,1288(sp)
    1dac:	80800c04 	addi	r2,r16,48
    1db0:	20800005 	stb	r2,0(r4)
    1db4:	003da406 	br	1448 <___vfprintf_internal_r+0xa6c>
    1db8:	dc400e17 	ldw	r17,56(sp)
    1dbc:	07000074 	movhi	fp,1
    1dc0:	e7317004 	addi	fp,fp,-14912
    1dc4:	9425883a 	add	r18,r18,r16
    1dc8:	8c400044 	addi	r17,r17,1
    1dcc:	008001c4 	movi	r2,7
    1dd0:	1f000015 	stw	fp,0(r3)
    1dd4:	1c000115 	stw	r16,4(r3)
    1dd8:	dc800f15 	stw	r18,60(sp)
    1ddc:	dc400e15 	stw	r17,56(sp)
    1de0:	147de216 	blt	r2,r17,156c <___vfprintf_internal_r+0xb90>
    1de4:	18c00204 	addi	r3,r3,8
    1de8:	003c7a06 	br	fd4 <___vfprintf_internal_r+0x5f8>
    1dec:	01000084 	movi	r4,2
    1df0:	d8000405 	stb	zero,16(sp)
    1df4:	003d8706 	br	1414 <___vfprintf_internal_r+0xa38>
    1df8:	d9814d17 	ldw	r6,1332(sp)
    1dfc:	30c4703a 	and	r2,r6,r3
    1e00:	1005003a 	cmpeq	r2,r2,zero
    1e04:	103cb926 	beq	r2,zero,10ec <___vfprintf_internal_r+0x710>
    1e08:	d9014217 	ldw	r4,1288(sp)
    1e0c:	94800044 	addi	r18,r18,1
    1e10:	8c400044 	addi	r17,r17,1
    1e14:	008001c4 	movi	r2,7
    1e18:	a9000015 	stw	r4,0(r21)
    1e1c:	a8c00115 	stw	r3,4(r21)
    1e20:	dc800f15 	stw	r18,60(sp)
    1e24:	dc400e15 	stw	r17,56(sp)
    1e28:	147e6616 	blt	r2,r17,17c4 <___vfprintf_internal_r+0xde8>
    1e2c:	acc00204 	addi	r19,r21,8
    1e30:	003cd706 	br	1190 <___vfprintf_internal_r+0x7b4>
    1e34:	07000074 	movhi	fp,1
    1e38:	e7317004 	addi	fp,fp,-14912
    1e3c:	003c4f06 	br	f7c <___vfprintf_internal_r+0x5a0>
    1e40:	dd001004 	addi	r20,sp,64
    1e44:	dc801a04 	addi	r18,sp,104
    1e48:	8009883a 	mov	r4,r16
    1e4c:	880b883a 	mov	r5,r17
    1e50:	01800284 	movi	r6,10
    1e54:	000f883a 	mov	r7,zero
    1e58:	00081480 	call	8148 <__umoddi3>
    1e5c:	12000c04 	addi	r8,r2,48
    1e60:	94bfffc4 	addi	r18,r18,-1
    1e64:	8009883a 	mov	r4,r16
    1e68:	880b883a 	mov	r5,r17
    1e6c:	01800284 	movi	r6,10
    1e70:	000f883a 	mov	r7,zero
    1e74:	92000005 	stb	r8,0(r18)
    1e78:	0007b6c0 	call	7b6c <__udivdi3>
    1e7c:	1009883a 	mov	r4,r2
    1e80:	1021883a 	mov	r16,r2
    1e84:	18800068 	cmpgeui	r2,r3,1
    1e88:	1823883a 	mov	r17,r3
    1e8c:	103fee1e 	bne	r2,zero,1e48 <___vfprintf_internal_r+0x146c>
    1e90:	1800021e 	bne	r3,zero,1e9c <___vfprintf_internal_r+0x14c0>
    1e94:	00800244 	movi	r2,9
    1e98:	113feb36 	bltu	r2,r4,1e48 <___vfprintf_internal_r+0x146c>
    1e9c:	94bfffc4 	addi	r18,r18,-1
    1ea0:	dc814215 	stw	r18,1288(sp)
    1ea4:	003fc006 	br	1da8 <___vfprintf_internal_r+0x13cc>
    1ea8:	d9014d17 	ldw	r4,1332(sp)
    1eac:	2080004c 	andi	r2,r4,1
    1eb0:	10009a1e 	bne	r2,zero,211c <___vfprintf_internal_r+0x1740>
    1eb4:	d9401a04 	addi	r5,sp,104
    1eb8:	dd001004 	addi	r20,sp,64
    1ebc:	d9414215 	stw	r5,1288(sp)
    1ec0:	003d6106 	br	1448 <___vfprintf_internal_r+0xa6c>
    1ec4:	d9015017 	ldw	r4,1344(sp)
    1ec8:	b00b883a 	mov	r5,r22
    1ecc:	d9800d04 	addi	r6,sp,52
    1ed0:	00009840 	call	984 <__sprint_r>
    1ed4:	103c791e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1ed8:	dc800f17 	ldw	r18,60(sp)
    1edc:	d8c01a04 	addi	r3,sp,104
    1ee0:	003cff06 	br	12e0 <___vfprintf_internal_r+0x904>
    1ee4:	d8c14d17 	ldw	r3,1332(sp)
    1ee8:	1880040c 	andi	r2,r3,16
    1eec:	1000711e 	bne	r2,zero,20b4 <___vfprintf_internal_r+0x16d8>
    1ef0:	d9014d17 	ldw	r4,1332(sp)
    1ef4:	2080100c 	andi	r2,r4,64
    1ef8:	10006e26 	beq	r2,zero,20b4 <___vfprintf_internal_r+0x16d8>
    1efc:	3c00000b 	ldhu	r16,0(r7)
    1f00:	0023883a 	mov	r17,zero
    1f04:	39c00104 	addi	r7,r7,4
    1f08:	d9c14115 	stw	r7,1284(sp)
    1f0c:	003f0006 	br	1b10 <___vfprintf_internal_r+0x1134>
    1f10:	dc400e17 	ldw	r17,56(sp)
    1f14:	07000074 	movhi	fp,1
    1f18:	e7317004 	addi	fp,fp,-14912
    1f1c:	9425883a 	add	r18,r18,r16
    1f20:	8c400044 	addi	r17,r17,1
    1f24:	008001c4 	movi	r2,7
    1f28:	1f000015 	stw	fp,0(r3)
    1f2c:	1c000115 	stw	r16,4(r3)
    1f30:	dc800f15 	stw	r18,60(sp)
    1f34:	dc400e15 	stw	r17,56(sp)
    1f38:	147d7616 	blt	r2,r17,1514 <___vfprintf_internal_r+0xb38>
    1f3c:	18c00204 	addi	r3,r3,8
    1f40:	003d7b06 	br	1530 <___vfprintf_internal_r+0xb54>
    1f44:	dc800f17 	ldw	r18,60(sp)
    1f48:	dc400e17 	ldw	r17,56(sp)
    1f4c:	07000074 	movhi	fp,1
    1f50:	e7317404 	addi	fp,fp,-14896
    1f54:	003bc006 	br	e58 <___vfprintf_internal_r+0x47c>
    1f58:	d9015017 	ldw	r4,1344(sp)
    1f5c:	b00b883a 	mov	r5,r22
    1f60:	d9800d04 	addi	r6,sp,52
    1f64:	00009840 	call	984 <__sprint_r>
    1f68:	103c541e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    1f6c:	dc800f17 	ldw	r18,60(sp)
    1f70:	d8c01a04 	addi	r3,sp,104
    1f74:	003ce906 	br	131c <___vfprintf_internal_r+0x940>
    1f78:	3c000017 	ldw	r16,0(r7)
    1f7c:	0009883a 	mov	r4,zero
    1f80:	39c00104 	addi	r7,r7,4
    1f84:	0023883a 	mov	r17,zero
    1f88:	d9c14115 	stw	r7,1284(sp)
    1f8c:	d8000405 	stb	zero,16(sp)
    1f90:	003d2006 	br	1414 <___vfprintf_internal_r+0xa38>
    1f94:	38800017 	ldw	r2,0(r7)
    1f98:	39c00104 	addi	r7,r7,4
    1f9c:	d9c14115 	stw	r7,1284(sp)
    1fa0:	1023d7fa 	srai	r17,r2,31
    1fa4:	1021883a 	mov	r16,r2
    1fa8:	003d1806 	br	140c <___vfprintf_internal_r+0xa30>
    1fac:	3c000017 	ldw	r16,0(r7)
    1fb0:	01000044 	movi	r4,1
    1fb4:	39c00104 	addi	r7,r7,4
    1fb8:	0023883a 	mov	r17,zero
    1fbc:	d9c14115 	stw	r7,1284(sp)
    1fc0:	d8000405 	stb	zero,16(sp)
    1fc4:	003d1306 	br	1414 <___vfprintf_internal_r+0xa38>
    1fc8:	00800074 	movhi	r2,1
    1fcc:	10b16f04 	addi	r2,r2,-14916
    1fd0:	94800044 	addi	r18,r18,1
    1fd4:	8c400044 	addi	r17,r17,1
    1fd8:	a8800015 	stw	r2,0(r21)
    1fdc:	00c00044 	movi	r3,1
    1fe0:	008001c4 	movi	r2,7
    1fe4:	a8c00115 	stw	r3,4(r21)
    1fe8:	dc800f15 	stw	r18,60(sp)
    1fec:	dc400e15 	stw	r17,56(sp)
    1ff0:	1440ca16 	blt	r2,r17,231c <___vfprintf_internal_r+0x1940>
    1ff4:	a8c00204 	addi	r3,r21,8
    1ff8:	2000061e 	bne	r4,zero,2014 <___vfprintf_internal_r+0x1638>
    1ffc:	d9414817 	ldw	r5,1312(sp)
    2000:	2800041e 	bne	r5,zero,2014 <___vfprintf_internal_r+0x1638>
    2004:	d9814d17 	ldw	r6,1332(sp)
    2008:	3080004c 	andi	r2,r6,1
    200c:	1005003a 	cmpeq	r2,r2,zero
    2010:	103bf01e 	bne	r2,zero,fd4 <___vfprintf_internal_r+0x5f8>
    2014:	00800044 	movi	r2,1
    2018:	dc400e17 	ldw	r17,56(sp)
    201c:	18800115 	stw	r2,4(r3)
    2020:	d8814a17 	ldw	r2,1320(sp)
    2024:	94800044 	addi	r18,r18,1
    2028:	8c400044 	addi	r17,r17,1
    202c:	18800015 	stw	r2,0(r3)
    2030:	008001c4 	movi	r2,7
    2034:	dc800f15 	stw	r18,60(sp)
    2038:	dc400e15 	stw	r17,56(sp)
    203c:	1440ca16 	blt	r2,r17,2368 <___vfprintf_internal_r+0x198c>
    2040:	18c00204 	addi	r3,r3,8
    2044:	0121c83a 	sub	r16,zero,r4
    2048:	0400500e 	bge	zero,r16,218c <___vfprintf_internal_r+0x17b0>
    204c:	00800404 	movi	r2,16
    2050:	1400800e 	bge	r2,r16,2254 <___vfprintf_internal_r+0x1878>
    2054:	1027883a 	mov	r19,r2
    2058:	07000074 	movhi	fp,1
    205c:	e7317004 	addi	fp,fp,-14912
    2060:	050001c4 	movi	r20,7
    2064:	00000306 	br	2074 <___vfprintf_internal_r+0x1698>
    2068:	18c00204 	addi	r3,r3,8
    206c:	843ffc04 	addi	r16,r16,-16
    2070:	9c007a0e 	bge	r19,r16,225c <___vfprintf_internal_r+0x1880>
    2074:	94800404 	addi	r18,r18,16
    2078:	8c400044 	addi	r17,r17,1
    207c:	1f000015 	stw	fp,0(r3)
    2080:	1cc00115 	stw	r19,4(r3)
    2084:	dc800f15 	stw	r18,60(sp)
    2088:	dc400e15 	stw	r17,56(sp)
    208c:	a47ff60e 	bge	r20,r17,2068 <___vfprintf_internal_r+0x168c>
    2090:	d9015017 	ldw	r4,1344(sp)
    2094:	b00b883a 	mov	r5,r22
    2098:	d9800d04 	addi	r6,sp,52
    209c:	00009840 	call	984 <__sprint_r>
    20a0:	103c061e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    20a4:	dc800f17 	ldw	r18,60(sp)
    20a8:	dc400e17 	ldw	r17,56(sp)
    20ac:	d8c01a04 	addi	r3,sp,104
    20b0:	003fee06 	br	206c <___vfprintf_internal_r+0x1690>
    20b4:	3c000017 	ldw	r16,0(r7)
    20b8:	0023883a 	mov	r17,zero
    20bc:	39c00104 	addi	r7,r7,4
    20c0:	d9c14115 	stw	r7,1284(sp)
    20c4:	003e9206 	br	1b10 <___vfprintf_internal_r+0x1134>
    20c8:	d9401a04 	addi	r5,sp,104
    20cc:	dd001004 	addi	r20,sp,64
    20d0:	d9414215 	stw	r5,1288(sp)
    20d4:	d9814517 	ldw	r6,1300(sp)
    20d8:	880a973a 	slli	r5,r17,28
    20dc:	8004d13a 	srli	r2,r16,4
    20e0:	810003cc 	andi	r4,r16,15
    20e4:	3109883a 	add	r4,r6,r4
    20e8:	2884b03a 	or	r2,r5,r2
    20ec:	21400003 	ldbu	r5,0(r4)
    20f0:	d9014217 	ldw	r4,1288(sp)
    20f4:	8806d13a 	srli	r3,r17,4
    20f8:	1021883a 	mov	r16,r2
    20fc:	213fffc4 	addi	r4,r4,-1
    2100:	d9014215 	stw	r4,1288(sp)
    2104:	d9814217 	ldw	r6,1288(sp)
    2108:	10c8b03a 	or	r4,r2,r3
    210c:	1823883a 	mov	r17,r3
    2110:	31400005 	stb	r5,0(r6)
    2114:	203fef1e 	bne	r4,zero,20d4 <___vfprintf_internal_r+0x16f8>
    2118:	003ccb06 	br	1448 <___vfprintf_internal_r+0xa6c>
    211c:	00800c04 	movi	r2,48
    2120:	d98019c4 	addi	r6,sp,103
    2124:	dd001004 	addi	r20,sp,64
    2128:	d88019c5 	stb	r2,103(sp)
    212c:	d9814215 	stw	r6,1288(sp)
    2130:	003cc506 	br	1448 <___vfprintf_internal_r+0xa6c>
    2134:	dc400e17 	ldw	r17,56(sp)
    2138:	07000074 	movhi	fp,1
    213c:	e7317404 	addi	fp,fp,-14896
    2140:	003bc706 	br	1060 <___vfprintf_internal_r+0x684>
    2144:	d9414d17 	ldw	r5,1332(sp)
    2148:	2880040c 	andi	r2,r5,16
    214c:	10007c26 	beq	r2,zero,2340 <___vfprintf_internal_r+0x1964>
    2150:	38800017 	ldw	r2,0(r7)
    2154:	39c00104 	addi	r7,r7,4
    2158:	d9c14115 	stw	r7,1284(sp)
    215c:	d9814c17 	ldw	r6,1328(sp)
    2160:	d9c14117 	ldw	r7,1284(sp)
    2164:	11800015 	stw	r6,0(r2)
    2168:	003a7806 	br	b4c <___vfprintf_internal_r+0x170>
    216c:	d9015017 	ldw	r4,1344(sp)
    2170:	b00b883a 	mov	r5,r22
    2174:	d9800d04 	addi	r6,sp,52
    2178:	00009840 	call	984 <__sprint_r>
    217c:	103bcf1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    2180:	dc800f17 	ldw	r18,60(sp)
    2184:	dc400e17 	ldw	r17,56(sp)
    2188:	d8c01a04 	addi	r3,sp,104
    218c:	d9014817 	ldw	r4,1312(sp)
    2190:	d9414217 	ldw	r5,1288(sp)
    2194:	8c400044 	addi	r17,r17,1
    2198:	9125883a 	add	r18,r18,r4
    219c:	008001c4 	movi	r2,7
    21a0:	19400015 	stw	r5,0(r3)
    21a4:	19000115 	stw	r4,4(r3)
    21a8:	dc800f15 	stw	r18,60(sp)
    21ac:	dc400e15 	stw	r17,56(sp)
    21b0:	147cee16 	blt	r2,r17,156c <___vfprintf_internal_r+0xb90>
    21b4:	18c00204 	addi	r3,r3,8
    21b8:	003b8606 	br	fd4 <___vfprintf_internal_r+0x5f8>
    21bc:	38c00017 	ldw	r3,0(r7)
    21c0:	39000204 	addi	r4,r7,8
    21c4:	d9014115 	stw	r4,1284(sp)
    21c8:	d8c14315 	stw	r3,1292(sp)
    21cc:	39c00117 	ldw	r7,4(r7)
    21d0:	d9c14415 	stw	r7,1296(sp)
    21d4:	003e2006 	br	1a58 <___vfprintf_internal_r+0x107c>
    21d8:	0005883a 	mov	r2,zero
    21dc:	1409c83a 	sub	r4,r2,r16
    21e0:	1105803a 	cmpltu	r2,r2,r4
    21e4:	044bc83a 	sub	r5,zero,r17
    21e8:	2885c83a 	sub	r2,r5,r2
    21ec:	2021883a 	mov	r16,r4
    21f0:	1023883a 	mov	r17,r2
    21f4:	01000044 	movi	r4,1
    21f8:	00800b44 	movi	r2,45
    21fc:	d8800405 	stb	r2,16(sp)
    2200:	003c8406 	br	1414 <___vfprintf_internal_r+0xa38>
    2204:	d9015017 	ldw	r4,1344(sp)
    2208:	b00b883a 	mov	r5,r22
    220c:	d9800d04 	addi	r6,sp,52
    2210:	00009840 	call	984 <__sprint_r>
    2214:	103ba91e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    2218:	dc800f17 	ldw	r18,60(sp)
    221c:	dc400e17 	ldw	r17,56(sp)
    2220:	d9000617 	ldw	r4,24(sp)
    2224:	d9401a04 	addi	r5,sp,104
    2228:	003da706 	br	18c8 <___vfprintf_internal_r+0xeec>
    222c:	d9015017 	ldw	r4,1344(sp)
    2230:	b00b883a 	mov	r5,r22
    2234:	d9800d04 	addi	r6,sp,52
    2238:	00009840 	call	984 <__sprint_r>
    223c:	103b9f1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    2240:	dc800f17 	ldw	r18,60(sp)
    2244:	dc400e17 	ldw	r17,56(sp)
    2248:	d9000617 	ldw	r4,24(sp)
    224c:	d8c01a04 	addi	r3,sp,104
    2250:	003d9106 	br	1898 <___vfprintf_internal_r+0xebc>
    2254:	07000074 	movhi	fp,1
    2258:	e7317004 	addi	fp,fp,-14912
    225c:	9425883a 	add	r18,r18,r16
    2260:	8c400044 	addi	r17,r17,1
    2264:	008001c4 	movi	r2,7
    2268:	1f000015 	stw	fp,0(r3)
    226c:	1c000115 	stw	r16,4(r3)
    2270:	dc800f15 	stw	r18,60(sp)
    2274:	dc400e15 	stw	r17,56(sp)
    2278:	147fbc16 	blt	r2,r17,216c <___vfprintf_internal_r+0x1790>
    227c:	18c00204 	addi	r3,r3,8
    2280:	003fc206 	br	218c <___vfprintf_internal_r+0x17b0>
    2284:	d9015017 	ldw	r4,1344(sp)
    2288:	b00b883a 	mov	r5,r22
    228c:	d9800d04 	addi	r6,sp,52
    2290:	00009840 	call	984 <__sprint_r>
    2294:	103b891e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    2298:	dc800f17 	ldw	r18,60(sp)
    229c:	d9000617 	ldw	r4,24(sp)
    22a0:	d8c01a04 	addi	r3,sp,104
    22a4:	003d0206 	br	16b0 <___vfprintf_internal_r+0xcd4>
    22a8:	07000074 	movhi	fp,1
    22ac:	e7317004 	addi	fp,fp,-14912
    22b0:	003be406 	br	1244 <___vfprintf_internal_r+0x868>
    22b4:	00800074 	movhi	r2,1
    22b8:	10b15e04 	addi	r2,r2,-14984
    22bc:	d8814215 	stw	r2,1288(sp)
    22c0:	003df506 	br	1a98 <___vfprintf_internal_r+0x10bc>
    22c4:	d9014317 	ldw	r4,1292(sp)
    22c8:	d9414417 	ldw	r5,1296(sp)
    22cc:	00073bc0 	call	73bc <__isnand>
    22d0:	10003926 	beq	r2,zero,23b8 <___vfprintf_internal_r+0x19dc>
    22d4:	d9414e17 	ldw	r5,1336(sp)
    22d8:	008011c4 	movi	r2,71
    22dc:	1140ce16 	blt	r2,r5,2618 <___vfprintf_internal_r+0x1c3c>
    22e0:	01800074 	movhi	r6,1
    22e4:	31b15f04 	addi	r6,r6,-14980
    22e8:	d9814215 	stw	r6,1288(sp)
    22ec:	003dea06 	br	1a98 <___vfprintf_internal_r+0x10bc>
    22f0:	d9014d17 	ldw	r4,1332(sp)
    22f4:	bdc00044 	addi	r23,r23,1
    22f8:	b8c00007 	ldb	r3,0(r23)
    22fc:	21000814 	ori	r4,r4,32
    2300:	d9014d15 	stw	r4,1332(sp)
    2304:	003a3406 	br	bd8 <___vfprintf_internal_r+0x1fc>
    2308:	dcc14615 	stw	r19,1304(sp)
    230c:	98011016 	blt	r19,zero,2750 <___vfprintf_internal_r+0x1d74>
    2310:	980f883a 	mov	r7,r19
    2314:	d8014715 	stw	zero,1308(sp)
    2318:	003c5206 	br	1464 <___vfprintf_internal_r+0xa88>
    231c:	d9015017 	ldw	r4,1344(sp)
    2320:	b00b883a 	mov	r5,r22
    2324:	d9800d04 	addi	r6,sp,52
    2328:	00009840 	call	984 <__sprint_r>
    232c:	103b631e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    2330:	dc800f17 	ldw	r18,60(sp)
    2334:	d9000617 	ldw	r4,24(sp)
    2338:	d8c01a04 	addi	r3,sp,104
    233c:	003f2e06 	br	1ff8 <___vfprintf_internal_r+0x161c>
    2340:	d8c14d17 	ldw	r3,1332(sp)
    2344:	1880100c 	andi	r2,r3,64
    2348:	1000a026 	beq	r2,zero,25cc <___vfprintf_internal_r+0x1bf0>
    234c:	38800017 	ldw	r2,0(r7)
    2350:	39c00104 	addi	r7,r7,4
    2354:	d9c14115 	stw	r7,1284(sp)
    2358:	d9014c17 	ldw	r4,1328(sp)
    235c:	d9c14117 	ldw	r7,1284(sp)
    2360:	1100000d 	sth	r4,0(r2)
    2364:	0039f906 	br	b4c <___vfprintf_internal_r+0x170>
    2368:	d9015017 	ldw	r4,1344(sp)
    236c:	b00b883a 	mov	r5,r22
    2370:	d9800d04 	addi	r6,sp,52
    2374:	00009840 	call	984 <__sprint_r>
    2378:	103b501e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    237c:	dc800f17 	ldw	r18,60(sp)
    2380:	dc400e17 	ldw	r17,56(sp)
    2384:	d9000617 	ldw	r4,24(sp)
    2388:	d8c01a04 	addi	r3,sp,104
    238c:	003f2d06 	br	2044 <___vfprintf_internal_r+0x1668>
    2390:	00800184 	movi	r2,6
    2394:	14c09a36 	bltu	r2,r19,2600 <___vfprintf_internal_r+0x1c24>
    2398:	dcc14615 	stw	r19,1304(sp)
    239c:	9800010e 	bge	r19,zero,23a4 <___vfprintf_internal_r+0x19c8>
    23a0:	d8014615 	stw	zero,1304(sp)
    23a4:	00800074 	movhi	r2,1
    23a8:	10b16104 	addi	r2,r2,-14972
    23ac:	980f883a 	mov	r7,r19
    23b0:	d8814215 	stw	r2,1288(sp)
    23b4:	003a7806 	br	d98 <___vfprintf_internal_r+0x3bc>
    23b8:	00bfffc4 	movi	r2,-1
    23bc:	9880e226 	beq	r19,r2,2748 <___vfprintf_internal_r+0x1d6c>
    23c0:	d9414e17 	ldw	r5,1336(sp)
    23c4:	008019c4 	movi	r2,103
    23c8:	2880dc26 	beq	r5,r2,273c <___vfprintf_internal_r+0x1d60>
    23cc:	008011c4 	movi	r2,71
    23d0:	2880da26 	beq	r5,r2,273c <___vfprintf_internal_r+0x1d60>
    23d4:	d9414d17 	ldw	r5,1332(sp)
    23d8:	d9014417 	ldw	r4,1296(sp)
    23dc:	d9814317 	ldw	r6,1292(sp)
    23e0:	29404014 	ori	r5,r5,256
    23e4:	d9414d15 	stw	r5,1332(sp)
    23e8:	2000cc16 	blt	r4,zero,271c <___vfprintf_internal_r+0x1d40>
    23ec:	3021883a 	mov	r16,r6
    23f0:	2023883a 	mov	r17,r4
    23f4:	0039883a 	mov	fp,zero
    23f8:	d9414e17 	ldw	r5,1336(sp)
    23fc:	00801984 	movi	r2,102
    2400:	2880b726 	beq	r5,r2,26e0 <___vfprintf_internal_r+0x1d04>
    2404:	00801184 	movi	r2,70
    2408:	2880b526 	beq	r5,r2,26e0 <___vfprintf_internal_r+0x1d04>
    240c:	00801944 	movi	r2,101
    2410:	2880c826 	beq	r5,r2,2734 <___vfprintf_internal_r+0x1d58>
    2414:	00801144 	movi	r2,69
    2418:	2880c626 	beq	r5,r2,2734 <___vfprintf_internal_r+0x1d58>
    241c:	9829883a 	mov	r20,r19
    2420:	d9015017 	ldw	r4,1344(sp)
    2424:	d8800604 	addi	r2,sp,24
    2428:	880d883a 	mov	r6,r17
    242c:	d8800115 	stw	r2,4(sp)
    2430:	d8c00704 	addi	r3,sp,28
    2434:	d8800804 	addi	r2,sp,32
    2438:	800b883a 	mov	r5,r16
    243c:	01c00084 	movi	r7,2
    2440:	d8c00215 	stw	r3,8(sp)
    2444:	d8800315 	stw	r2,12(sp)
    2448:	dd000015 	stw	r20,0(sp)
    244c:	0002c000 	call	2c00 <_dtoa_r>
    2450:	d9814e17 	ldw	r6,1336(sp)
    2454:	d8814215 	stw	r2,1288(sp)
    2458:	008019c4 	movi	r2,103
    245c:	30809526 	beq	r6,r2,26b4 <___vfprintf_internal_r+0x1cd8>
    2460:	d8c14e17 	ldw	r3,1336(sp)
    2464:	008011c4 	movi	r2,71
    2468:	18809226 	beq	r3,r2,26b4 <___vfprintf_internal_r+0x1cd8>
    246c:	d9414217 	ldw	r5,1288(sp)
    2470:	d9814e17 	ldw	r6,1336(sp)
    2474:	00801984 	movi	r2,102
    2478:	2d25883a 	add	r18,r5,r20
    247c:	30808626 	beq	r6,r2,2698 <___vfprintf_internal_r+0x1cbc>
    2480:	00801184 	movi	r2,70
    2484:	30808426 	beq	r6,r2,2698 <___vfprintf_internal_r+0x1cbc>
    2488:	000d883a 	mov	r6,zero
    248c:	000f883a 	mov	r7,zero
    2490:	880b883a 	mov	r5,r17
    2494:	8009883a 	mov	r4,r16
    2498:	00092180 	call	9218 <__eqdf2>
    249c:	1000751e 	bne	r2,zero,2674 <___vfprintf_internal_r+0x1c98>
    24a0:	9005883a 	mov	r2,r18
    24a4:	dc800815 	stw	r18,32(sp)
    24a8:	d9014217 	ldw	r4,1288(sp)
    24ac:	d9414e17 	ldw	r5,1336(sp)
    24b0:	00c019c4 	movi	r3,103
    24b4:	1125c83a 	sub	r18,r2,r4
    24b8:	28c06826 	beq	r5,r3,265c <___vfprintf_internal_r+0x1c80>
    24bc:	008011c4 	movi	r2,71
    24c0:	28806626 	beq	r5,r2,265c <___vfprintf_internal_r+0x1c80>
    24c4:	d9000617 	ldw	r4,24(sp)
    24c8:	d8c14e17 	ldw	r3,1336(sp)
    24cc:	00801944 	movi	r2,101
    24d0:	10c05516 	blt	r2,r3,2628 <___vfprintf_internal_r+0x1c4c>
    24d4:	213fffc4 	addi	r4,r4,-1
    24d8:	d9000615 	stw	r4,24(sp)
    24dc:	d8c00905 	stb	r3,36(sp)
    24e0:	2021883a 	mov	r16,r4
    24e4:	2000c116 	blt	r4,zero,27ec <___vfprintf_internal_r+0x1e10>
    24e8:	00800ac4 	movi	r2,43
    24ec:	d8800945 	stb	r2,37(sp)
    24f0:	00800244 	movi	r2,9
    24f4:	1400af0e 	bge	r2,r16,27b4 <___vfprintf_internal_r+0x1dd8>
    24f8:	1027883a 	mov	r19,r2
    24fc:	dc400cc4 	addi	r17,sp,51
    2500:	8009883a 	mov	r4,r16
    2504:	01400284 	movi	r5,10
    2508:	000089c0 	call	89c <__modsi3>
    250c:	10800c04 	addi	r2,r2,48
    2510:	8c7fffc4 	addi	r17,r17,-1
    2514:	8009883a 	mov	r4,r16
    2518:	01400284 	movi	r5,10
    251c:	88800005 	stb	r2,0(r17)
    2520:	000083c0 	call	83c <__divsi3>
    2524:	1021883a 	mov	r16,r2
    2528:	98bff516 	blt	r19,r2,2500 <___vfprintf_internal_r+0x1b24>
    252c:	10c00c04 	addi	r3,r2,48
    2530:	d8800b04 	addi	r2,sp,44
    2534:	108001c4 	addi	r2,r2,7
    2538:	897fffc4 	addi	r5,r17,-1
    253c:	88ffffc5 	stb	r3,-1(r17)
    2540:	2880a72e 	bgeu	r5,r2,27e0 <___vfprintf_internal_r+0x1e04>
    2544:	1009883a 	mov	r4,r2
    2548:	d9800904 	addi	r6,sp,36
    254c:	d8c00984 	addi	r3,sp,38
    2550:	28800003 	ldbu	r2,0(r5)
    2554:	29400044 	addi	r5,r5,1
    2558:	18800005 	stb	r2,0(r3)
    255c:	18c00044 	addi	r3,r3,1
    2560:	293ffb36 	bltu	r5,r4,2550 <___vfprintf_internal_r+0x1b74>
    2564:	1987c83a 	sub	r3,r3,r6
    2568:	00800044 	movi	r2,1
    256c:	d8c14915 	stw	r3,1316(sp)
    2570:	90cf883a 	add	r7,r18,r3
    2574:	1480960e 	bge	r2,r18,27d0 <___vfprintf_internal_r+0x1df4>
    2578:	39c00044 	addi	r7,r7,1
    257c:	d9c14615 	stw	r7,1304(sp)
    2580:	38003416 	blt	r7,zero,2654 <___vfprintf_internal_r+0x1c78>
    2584:	e0803fcc 	andi	r2,fp,255
    2588:	1080201c 	xori	r2,r2,128
    258c:	10bfe004 	addi	r2,r2,-128
    2590:	10004e26 	beq	r2,zero,26cc <___vfprintf_internal_r+0x1cf0>
    2594:	00800b44 	movi	r2,45
    2598:	dc814815 	stw	r18,1312(sp)
    259c:	d8014715 	stw	zero,1308(sp)
    25a0:	d8800405 	stb	r2,16(sp)
    25a4:	003bb106 	br	146c <___vfprintf_internal_r+0xa90>
    25a8:	00800b44 	movi	r2,45
    25ac:	d8800405 	stb	r2,16(sp)
    25b0:	003d3306 	br	1a80 <___vfprintf_internal_r+0x10a4>
    25b4:	d9015017 	ldw	r4,1344(sp)
    25b8:	b00b883a 	mov	r5,r22
    25bc:	d9800d04 	addi	r6,sp,52
    25c0:	00009840 	call	984 <__sprint_r>
    25c4:	103abd1e 	bne	r2,zero,10bc <___vfprintf_internal_r+0x6e0>
    25c8:	003abb06 	br	10b8 <___vfprintf_internal_r+0x6dc>
    25cc:	38800017 	ldw	r2,0(r7)
    25d0:	39c00104 	addi	r7,r7,4
    25d4:	d9c14115 	stw	r7,1284(sp)
    25d8:	d9414c17 	ldw	r5,1328(sp)
    25dc:	d9c14117 	ldw	r7,1284(sp)
    25e0:	11400015 	stw	r5,0(r2)
    25e4:	00395906 	br	b4c <___vfprintf_internal_r+0x170>
    25e8:	980f883a 	mov	r7,r19
    25ec:	dcc14615 	stw	r19,1304(sp)
    25f0:	d8014715 	stw	zero,1308(sp)
    25f4:	003b9b06 	br	1464 <___vfprintf_internal_r+0xa88>
    25f8:	0027883a 	mov	r19,zero
    25fc:	00397806 	br	be0 <___vfprintf_internal_r+0x204>
    2600:	00c00074 	movhi	r3,1
    2604:	18f16104 	addi	r3,r3,-14972
    2608:	100f883a 	mov	r7,r2
    260c:	d8814615 	stw	r2,1304(sp)
    2610:	d8c14215 	stw	r3,1288(sp)
    2614:	0039e006 	br	d98 <___vfprintf_internal_r+0x3bc>
    2618:	00800074 	movhi	r2,1
    261c:	10b16004 	addi	r2,r2,-14976
    2620:	d8814215 	stw	r2,1288(sp)
    2624:	003d1c06 	br	1a98 <___vfprintf_internal_r+0x10bc>
    2628:	d9414e17 	ldw	r5,1336(sp)
    262c:	00801984 	movi	r2,102
    2630:	28804926 	beq	r5,r2,2758 <___vfprintf_internal_r+0x1d7c>
    2634:	200f883a 	mov	r7,r4
    2638:	24805716 	blt	r4,r18,2798 <___vfprintf_internal_r+0x1dbc>
    263c:	d9414d17 	ldw	r5,1332(sp)
    2640:	2880004c 	andi	r2,r5,1
    2644:	10000126 	beq	r2,zero,264c <___vfprintf_internal_r+0x1c70>
    2648:	21c00044 	addi	r7,r4,1
    264c:	d9c14615 	stw	r7,1304(sp)
    2650:	383fcc0e 	bge	r7,zero,2584 <___vfprintf_internal_r+0x1ba8>
    2654:	d8014615 	stw	zero,1304(sp)
    2658:	003fca06 	br	2584 <___vfprintf_internal_r+0x1ba8>
    265c:	d9000617 	ldw	r4,24(sp)
    2660:	00bfff04 	movi	r2,-4
    2664:	1100480e 	bge	r2,r4,2788 <___vfprintf_internal_r+0x1dac>
    2668:	99004716 	blt	r19,r4,2788 <___vfprintf_internal_r+0x1dac>
    266c:	d8c14e15 	stw	r3,1336(sp)
    2670:	003ff006 	br	2634 <___vfprintf_internal_r+0x1c58>
    2674:	d8800817 	ldw	r2,32(sp)
    2678:	14bf8b2e 	bgeu	r2,r18,24a8 <___vfprintf_internal_r+0x1acc>
    267c:	9007883a 	mov	r3,r18
    2680:	01000c04 	movi	r4,48
    2684:	11000005 	stb	r4,0(r2)
    2688:	10800044 	addi	r2,r2,1
    268c:	d8800815 	stw	r2,32(sp)
    2690:	18bffc1e 	bne	r3,r2,2684 <___vfprintf_internal_r+0x1ca8>
    2694:	003f8406 	br	24a8 <___vfprintf_internal_r+0x1acc>
    2698:	d8814217 	ldw	r2,1288(sp)
    269c:	10c00007 	ldb	r3,0(r2)
    26a0:	00800c04 	movi	r2,48
    26a4:	18805b26 	beq	r3,r2,2814 <___vfprintf_internal_r+0x1e38>
    26a8:	d9000617 	ldw	r4,24(sp)
    26ac:	9125883a 	add	r18,r18,r4
    26b0:	003f7506 	br	2488 <___vfprintf_internal_r+0x1aac>
    26b4:	d9014d17 	ldw	r4,1332(sp)
    26b8:	2080004c 	andi	r2,r4,1
    26bc:	1005003a 	cmpeq	r2,r2,zero
    26c0:	103f6a26 	beq	r2,zero,246c <___vfprintf_internal_r+0x1a90>
    26c4:	d8800817 	ldw	r2,32(sp)
    26c8:	003f7706 	br	24a8 <___vfprintf_internal_r+0x1acc>
    26cc:	d9c14615 	stw	r7,1304(sp)
    26d0:	38004d16 	blt	r7,zero,2808 <___vfprintf_internal_r+0x1e2c>
    26d4:	dc814815 	stw	r18,1312(sp)
    26d8:	d8014715 	stw	zero,1308(sp)
    26dc:	003b6106 	br	1464 <___vfprintf_internal_r+0xa88>
    26e0:	d9015017 	ldw	r4,1344(sp)
    26e4:	d8800604 	addi	r2,sp,24
    26e8:	d8800115 	stw	r2,4(sp)
    26ec:	d8c00704 	addi	r3,sp,28
    26f0:	d8800804 	addi	r2,sp,32
    26f4:	800b883a 	mov	r5,r16
    26f8:	880d883a 	mov	r6,r17
    26fc:	01c000c4 	movi	r7,3
    2700:	d8c00215 	stw	r3,8(sp)
    2704:	d8800315 	stw	r2,12(sp)
    2708:	dcc00015 	stw	r19,0(sp)
    270c:	9829883a 	mov	r20,r19
    2710:	0002c000 	call	2c00 <_dtoa_r>
    2714:	d8814215 	stw	r2,1288(sp)
    2718:	003f5106 	br	2460 <___vfprintf_internal_r+0x1a84>
    271c:	d8c14317 	ldw	r3,1292(sp)
    2720:	d9014417 	ldw	r4,1296(sp)
    2724:	07000b44 	movi	fp,45
    2728:	1821883a 	mov	r16,r3
    272c:	2460003c 	xorhi	r17,r4,32768
    2730:	003f3106 	br	23f8 <___vfprintf_internal_r+0x1a1c>
    2734:	9d000044 	addi	r20,r19,1
    2738:	003f3906 	br	2420 <___vfprintf_internal_r+0x1a44>
    273c:	983f251e 	bne	r19,zero,23d4 <___vfprintf_internal_r+0x19f8>
    2740:	04c00044 	movi	r19,1
    2744:	003f2306 	br	23d4 <___vfprintf_internal_r+0x19f8>
    2748:	04c00184 	movi	r19,6
    274c:	003f2106 	br	23d4 <___vfprintf_internal_r+0x19f8>
    2750:	d8014615 	stw	zero,1304(sp)
    2754:	003eee06 	br	2310 <___vfprintf_internal_r+0x1934>
    2758:	200f883a 	mov	r7,r4
    275c:	0100370e 	bge	zero,r4,283c <___vfprintf_internal_r+0x1e60>
    2760:	9800031e 	bne	r19,zero,2770 <___vfprintf_internal_r+0x1d94>
    2764:	d9814d17 	ldw	r6,1332(sp)
    2768:	3080004c 	andi	r2,r6,1
    276c:	103fb726 	beq	r2,zero,264c <___vfprintf_internal_r+0x1c70>
    2770:	20800044 	addi	r2,r4,1
    2774:	98a7883a 	add	r19,r19,r2
    2778:	dcc14615 	stw	r19,1304(sp)
    277c:	980f883a 	mov	r7,r19
    2780:	983f800e 	bge	r19,zero,2584 <___vfprintf_internal_r+0x1ba8>
    2784:	003fb306 	br	2654 <___vfprintf_internal_r+0x1c78>
    2788:	d9814e17 	ldw	r6,1336(sp)
    278c:	31bfff84 	addi	r6,r6,-2
    2790:	d9814e15 	stw	r6,1336(sp)
    2794:	003f4c06 	br	24c8 <___vfprintf_internal_r+0x1aec>
    2798:	0100180e 	bge	zero,r4,27fc <___vfprintf_internal_r+0x1e20>
    279c:	00800044 	movi	r2,1
    27a0:	1485883a 	add	r2,r2,r18
    27a4:	d8814615 	stw	r2,1304(sp)
    27a8:	100f883a 	mov	r7,r2
    27ac:	103f750e 	bge	r2,zero,2584 <___vfprintf_internal_r+0x1ba8>
    27b0:	003fa806 	br	2654 <___vfprintf_internal_r+0x1c78>
    27b4:	80c00c04 	addi	r3,r16,48
    27b8:	00800c04 	movi	r2,48
    27bc:	d8c009c5 	stb	r3,39(sp)
    27c0:	d9800904 	addi	r6,sp,36
    27c4:	d8c00a04 	addi	r3,sp,40
    27c8:	d8800985 	stb	r2,38(sp)
    27cc:	003f6506 	br	2564 <___vfprintf_internal_r+0x1b88>
    27d0:	d9014d17 	ldw	r4,1332(sp)
    27d4:	2084703a 	and	r2,r4,r2
    27d8:	103f9c26 	beq	r2,zero,264c <___vfprintf_internal_r+0x1c70>
    27dc:	003f6606 	br	2578 <___vfprintf_internal_r+0x1b9c>
    27e0:	d9800904 	addi	r6,sp,36
    27e4:	d8c00984 	addi	r3,sp,38
    27e8:	003f5e06 	br	2564 <___vfprintf_internal_r+0x1b88>
    27ec:	00800b44 	movi	r2,45
    27f0:	0121c83a 	sub	r16,zero,r4
    27f4:	d8800945 	stb	r2,37(sp)
    27f8:	003f3d06 	br	24f0 <___vfprintf_internal_r+0x1b14>
    27fc:	00800084 	movi	r2,2
    2800:	1105c83a 	sub	r2,r2,r4
    2804:	003fe606 	br	27a0 <___vfprintf_internal_r+0x1dc4>
    2808:	d8014615 	stw	zero,1304(sp)
    280c:	dc814815 	stw	r18,1312(sp)
    2810:	003fb106 	br	26d8 <___vfprintf_internal_r+0x1cfc>
    2814:	000d883a 	mov	r6,zero
    2818:	000f883a 	mov	r7,zero
    281c:	8009883a 	mov	r4,r16
    2820:	880b883a 	mov	r5,r17
    2824:	00092a00 	call	92a0 <__nedf2>
    2828:	103f9f26 	beq	r2,zero,26a8 <___vfprintf_internal_r+0x1ccc>
    282c:	00800044 	movi	r2,1
    2830:	1509c83a 	sub	r4,r2,r20
    2834:	d9000615 	stw	r4,24(sp)
    2838:	003f9b06 	br	26a8 <___vfprintf_internal_r+0x1ccc>
    283c:	98000d1e 	bne	r19,zero,2874 <___vfprintf_internal_r+0x1e98>
    2840:	d8c14d17 	ldw	r3,1332(sp)
    2844:	1880004c 	andi	r2,r3,1
    2848:	10000a1e 	bne	r2,zero,2874 <___vfprintf_internal_r+0x1e98>
    284c:	01000044 	movi	r4,1
    2850:	200f883a 	mov	r7,r4
    2854:	d9014615 	stw	r4,1304(sp)
    2858:	003f4a06 	br	2584 <___vfprintf_internal_r+0x1ba8>
    285c:	3cc00017 	ldw	r19,0(r7)
    2860:	39c00104 	addi	r7,r7,4
    2864:	983d0e0e 	bge	r19,zero,1ca0 <___vfprintf_internal_r+0x12c4>
    2868:	b8c00007 	ldb	r3,0(r23)
    286c:	04ffffc4 	movi	r19,-1
    2870:	0038d906 	br	bd8 <___vfprintf_internal_r+0x1fc>
    2874:	9cc00084 	addi	r19,r19,2
    2878:	dcc14615 	stw	r19,1304(sp)
    287c:	980f883a 	mov	r7,r19
    2880:	983f400e 	bge	r19,zero,2584 <___vfprintf_internal_r+0x1ba8>
    2884:	003f7306 	br	2654 <___vfprintf_internal_r+0x1c78>

00002888 <__vfprintf_internal>:
    2888:	00800074 	movhi	r2,1
    288c:	10b4cc04 	addi	r2,r2,-11472
    2890:	2013883a 	mov	r9,r4
    2894:	11000017 	ldw	r4,0(r2)
    2898:	2805883a 	mov	r2,r5
    289c:	300f883a 	mov	r7,r6
    28a0:	480b883a 	mov	r5,r9
    28a4:	100d883a 	mov	r6,r2
    28a8:	00009dc1 	jmpi	9dc <___vfprintf_internal_r>

000028ac <__swsetup_r>:
    28ac:	00800074 	movhi	r2,1
    28b0:	10b4cc04 	addi	r2,r2,-11472
    28b4:	10c00017 	ldw	r3,0(r2)
    28b8:	defffd04 	addi	sp,sp,-12
    28bc:	dc400115 	stw	r17,4(sp)
    28c0:	dc000015 	stw	r16,0(sp)
    28c4:	dfc00215 	stw	ra,8(sp)
    28c8:	2023883a 	mov	r17,r4
    28cc:	2821883a 	mov	r16,r5
    28d0:	18000226 	beq	r3,zero,28dc <__swsetup_r+0x30>
    28d4:	18800e17 	ldw	r2,56(r3)
    28d8:	10001f26 	beq	r2,zero,2958 <__swsetup_r+0xac>
    28dc:	8100030b 	ldhu	r4,12(r16)
    28e0:	2080020c 	andi	r2,r4,8
    28e4:	10002826 	beq	r2,zero,2988 <__swsetup_r+0xdc>
    28e8:	81400417 	ldw	r5,16(r16)
    28ec:	28001d26 	beq	r5,zero,2964 <__swsetup_r+0xb8>
    28f0:	2080004c 	andi	r2,r4,1
    28f4:	1005003a 	cmpeq	r2,r2,zero
    28f8:	10000b26 	beq	r2,zero,2928 <__swsetup_r+0x7c>
    28fc:	2080008c 	andi	r2,r4,2
    2900:	10001226 	beq	r2,zero,294c <__swsetup_r+0xa0>
    2904:	0005883a 	mov	r2,zero
    2908:	80800215 	stw	r2,8(r16)
    290c:	28000b26 	beq	r5,zero,293c <__swsetup_r+0x90>
    2910:	0005883a 	mov	r2,zero
    2914:	dfc00217 	ldw	ra,8(sp)
    2918:	dc400117 	ldw	r17,4(sp)
    291c:	dc000017 	ldw	r16,0(sp)
    2920:	dec00304 	addi	sp,sp,12
    2924:	f800283a 	ret
    2928:	80800517 	ldw	r2,20(r16)
    292c:	80000215 	stw	zero,8(r16)
    2930:	0085c83a 	sub	r2,zero,r2
    2934:	80800615 	stw	r2,24(r16)
    2938:	283ff51e 	bne	r5,zero,2910 <__swsetup_r+0x64>
    293c:	2080200c 	andi	r2,r4,128
    2940:	103ff326 	beq	r2,zero,2910 <__swsetup_r+0x64>
    2944:	00bfffc4 	movi	r2,-1
    2948:	003ff206 	br	2914 <__swsetup_r+0x68>
    294c:	80800517 	ldw	r2,20(r16)
    2950:	80800215 	stw	r2,8(r16)
    2954:	003fed06 	br	290c <__swsetup_r+0x60>
    2958:	1809883a 	mov	r4,r3
    295c:	000444c0 	call	444c <__sinit>
    2960:	003fde06 	br	28dc <__swsetup_r+0x30>
    2964:	20c0a00c 	andi	r3,r4,640
    2968:	00808004 	movi	r2,512
    296c:	18bfe026 	beq	r3,r2,28f0 <__swsetup_r+0x44>
    2970:	8809883a 	mov	r4,r17
    2974:	800b883a 	mov	r5,r16
    2978:	00051c40 	call	51c4 <__smakebuf_r>
    297c:	8100030b 	ldhu	r4,12(r16)
    2980:	81400417 	ldw	r5,16(r16)
    2984:	003fda06 	br	28f0 <__swsetup_r+0x44>
    2988:	2080040c 	andi	r2,r4,16
    298c:	103fed26 	beq	r2,zero,2944 <__swsetup_r+0x98>
    2990:	2080010c 	andi	r2,r4,4
    2994:	10001226 	beq	r2,zero,29e0 <__swsetup_r+0x134>
    2998:	81400c17 	ldw	r5,48(r16)
    299c:	28000526 	beq	r5,zero,29b4 <__swsetup_r+0x108>
    29a0:	80801004 	addi	r2,r16,64
    29a4:	28800226 	beq	r5,r2,29b0 <__swsetup_r+0x104>
    29a8:	8809883a 	mov	r4,r17
    29ac:	00047d00 	call	47d0 <_free_r>
    29b0:	80000c15 	stw	zero,48(r16)
    29b4:	8080030b 	ldhu	r2,12(r16)
    29b8:	81400417 	ldw	r5,16(r16)
    29bc:	80000115 	stw	zero,4(r16)
    29c0:	10bff6cc 	andi	r2,r2,65499
    29c4:	8080030d 	sth	r2,12(r16)
    29c8:	81400015 	stw	r5,0(r16)
    29cc:	8080030b 	ldhu	r2,12(r16)
    29d0:	10800214 	ori	r2,r2,8
    29d4:	113fffcc 	andi	r4,r2,65535
    29d8:	8080030d 	sth	r2,12(r16)
    29dc:	003fc306 	br	28ec <__swsetup_r+0x40>
    29e0:	81400417 	ldw	r5,16(r16)
    29e4:	003ff906 	br	29cc <__swsetup_r+0x120>

000029e8 <quorem>:
    29e8:	28c00417 	ldw	r3,16(r5)
    29ec:	20800417 	ldw	r2,16(r4)
    29f0:	defff604 	addi	sp,sp,-40
    29f4:	ddc00715 	stw	r23,28(sp)
    29f8:	dd400515 	stw	r21,20(sp)
    29fc:	dfc00915 	stw	ra,36(sp)
    2a00:	df000815 	stw	fp,32(sp)
    2a04:	dd800615 	stw	r22,24(sp)
    2a08:	dd000415 	stw	r20,16(sp)
    2a0c:	dcc00315 	stw	r19,12(sp)
    2a10:	dc800215 	stw	r18,8(sp)
    2a14:	dc400115 	stw	r17,4(sp)
    2a18:	dc000015 	stw	r16,0(sp)
    2a1c:	202f883a 	mov	r23,r4
    2a20:	282b883a 	mov	r21,r5
    2a24:	10c07416 	blt	r2,r3,2bf8 <quorem+0x210>
    2a28:	1c7fffc4 	addi	r17,r3,-1
    2a2c:	8c45883a 	add	r2,r17,r17
    2a30:	1085883a 	add	r2,r2,r2
    2a34:	2c000504 	addi	r16,r5,20
    2a38:	24c00504 	addi	r19,r4,20
    2a3c:	14ed883a 	add	r22,r2,r19
    2a40:	80a5883a 	add	r18,r16,r2
    2a44:	b7000017 	ldw	fp,0(r22)
    2a48:	91400017 	ldw	r5,0(r18)
    2a4c:	e009883a 	mov	r4,fp
    2a50:	29400044 	addi	r5,r5,1
    2a54:	00008fc0 	call	8fc <__udivsi3>
    2a58:	1029883a 	mov	r20,r2
    2a5c:	10003c1e 	bne	r2,zero,2b50 <quorem+0x168>
    2a60:	a80b883a 	mov	r5,r21
    2a64:	b809883a 	mov	r4,r23
    2a68:	0005ef00 	call	5ef0 <__mcmp>
    2a6c:	10002b16 	blt	r2,zero,2b1c <quorem+0x134>
    2a70:	a5000044 	addi	r20,r20,1
    2a74:	980f883a 	mov	r7,r19
    2a78:	0011883a 	mov	r8,zero
    2a7c:	0009883a 	mov	r4,zero
    2a80:	81400017 	ldw	r5,0(r16)
    2a84:	38c00017 	ldw	r3,0(r7)
    2a88:	84000104 	addi	r16,r16,4
    2a8c:	28bfffcc 	andi	r2,r5,65535
    2a90:	2085883a 	add	r2,r4,r2
    2a94:	11bfffcc 	andi	r6,r2,65535
    2a98:	193fffcc 	andi	r4,r3,65535
    2a9c:	1004d43a 	srli	r2,r2,16
    2aa0:	280ad43a 	srli	r5,r5,16
    2aa4:	2189c83a 	sub	r4,r4,r6
    2aa8:	2209883a 	add	r4,r4,r8
    2aac:	1806d43a 	srli	r3,r3,16
    2ab0:	288b883a 	add	r5,r5,r2
    2ab4:	200dd43a 	srai	r6,r4,16
    2ab8:	28bfffcc 	andi	r2,r5,65535
    2abc:	1887c83a 	sub	r3,r3,r2
    2ac0:	1987883a 	add	r3,r3,r6
    2ac4:	3900000d 	sth	r4,0(r7)
    2ac8:	38c0008d 	sth	r3,2(r7)
    2acc:	2808d43a 	srli	r4,r5,16
    2ad0:	39c00104 	addi	r7,r7,4
    2ad4:	1811d43a 	srai	r8,r3,16
    2ad8:	943fe92e 	bgeu	r18,r16,2a80 <quorem+0x98>
    2adc:	8c45883a 	add	r2,r17,r17
    2ae0:	1085883a 	add	r2,r2,r2
    2ae4:	9885883a 	add	r2,r19,r2
    2ae8:	10c00017 	ldw	r3,0(r2)
    2aec:	18000b1e 	bne	r3,zero,2b1c <quorem+0x134>
    2af0:	113fff04 	addi	r4,r2,-4
    2af4:	9900082e 	bgeu	r19,r4,2b18 <quorem+0x130>
    2af8:	10bfff17 	ldw	r2,-4(r2)
    2afc:	10000326 	beq	r2,zero,2b0c <quorem+0x124>
    2b00:	00000506 	br	2b18 <quorem+0x130>
    2b04:	20800017 	ldw	r2,0(r4)
    2b08:	1000031e 	bne	r2,zero,2b18 <quorem+0x130>
    2b0c:	213fff04 	addi	r4,r4,-4
    2b10:	8c7fffc4 	addi	r17,r17,-1
    2b14:	993ffb36 	bltu	r19,r4,2b04 <quorem+0x11c>
    2b18:	bc400415 	stw	r17,16(r23)
    2b1c:	a005883a 	mov	r2,r20
    2b20:	dfc00917 	ldw	ra,36(sp)
    2b24:	df000817 	ldw	fp,32(sp)
    2b28:	ddc00717 	ldw	r23,28(sp)
    2b2c:	dd800617 	ldw	r22,24(sp)
    2b30:	dd400517 	ldw	r21,20(sp)
    2b34:	dd000417 	ldw	r20,16(sp)
    2b38:	dcc00317 	ldw	r19,12(sp)
    2b3c:	dc800217 	ldw	r18,8(sp)
    2b40:	dc400117 	ldw	r17,4(sp)
    2b44:	dc000017 	ldw	r16,0(sp)
    2b48:	dec00a04 	addi	sp,sp,40
    2b4c:	f800283a 	ret
    2b50:	980f883a 	mov	r7,r19
    2b54:	8011883a 	mov	r8,r16
    2b58:	0013883a 	mov	r9,zero
    2b5c:	000d883a 	mov	r6,zero
    2b60:	40c00017 	ldw	r3,0(r8)
    2b64:	39000017 	ldw	r4,0(r7)
    2b68:	42000104 	addi	r8,r8,4
    2b6c:	18bfffcc 	andi	r2,r3,65535
    2b70:	a085383a 	mul	r2,r20,r2
    2b74:	1806d43a 	srli	r3,r3,16
    2b78:	217fffcc 	andi	r5,r4,65535
    2b7c:	3085883a 	add	r2,r6,r2
    2b80:	11bfffcc 	andi	r6,r2,65535
    2b84:	a0c7383a 	mul	r3,r20,r3
    2b88:	1004d43a 	srli	r2,r2,16
    2b8c:	298bc83a 	sub	r5,r5,r6
    2b90:	2a4b883a 	add	r5,r5,r9
    2b94:	2008d43a 	srli	r4,r4,16
    2b98:	1887883a 	add	r3,r3,r2
    2b9c:	280dd43a 	srai	r6,r5,16
    2ba0:	18bfffcc 	andi	r2,r3,65535
    2ba4:	2089c83a 	sub	r4,r4,r2
    2ba8:	2189883a 	add	r4,r4,r6
    2bac:	3900008d 	sth	r4,2(r7)
    2bb0:	3940000d 	sth	r5,0(r7)
    2bb4:	180cd43a 	srli	r6,r3,16
    2bb8:	39c00104 	addi	r7,r7,4
    2bbc:	2013d43a 	srai	r9,r4,16
    2bc0:	923fe72e 	bgeu	r18,r8,2b60 <quorem+0x178>
    2bc4:	e03fa61e 	bne	fp,zero,2a60 <quorem+0x78>
    2bc8:	b0ffff04 	addi	r3,r22,-4
    2bcc:	98c0082e 	bgeu	r19,r3,2bf0 <quorem+0x208>
    2bd0:	b0bfff17 	ldw	r2,-4(r22)
    2bd4:	10000326 	beq	r2,zero,2be4 <quorem+0x1fc>
    2bd8:	00000506 	br	2bf0 <quorem+0x208>
    2bdc:	18800017 	ldw	r2,0(r3)
    2be0:	1000031e 	bne	r2,zero,2bf0 <quorem+0x208>
    2be4:	18ffff04 	addi	r3,r3,-4
    2be8:	8c7fffc4 	addi	r17,r17,-1
    2bec:	98fffb36 	bltu	r19,r3,2bdc <quorem+0x1f4>
    2bf0:	bc400415 	stw	r17,16(r23)
    2bf4:	003f9a06 	br	2a60 <quorem+0x78>
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	003fc806 	br	2b20 <quorem+0x138>

00002c00 <_dtoa_r>:
    2c00:	22001017 	ldw	r8,64(r4)
    2c04:	deffda04 	addi	sp,sp,-152
    2c08:	dd402115 	stw	r21,132(sp)
    2c0c:	dd002015 	stw	r20,128(sp)
    2c10:	dc801e15 	stw	r18,120(sp)
    2c14:	dc401d15 	stw	r17,116(sp)
    2c18:	dfc02515 	stw	ra,148(sp)
    2c1c:	df002415 	stw	fp,144(sp)
    2c20:	ddc02315 	stw	r23,140(sp)
    2c24:	dd802215 	stw	r22,136(sp)
    2c28:	dcc01f15 	stw	r19,124(sp)
    2c2c:	dc001c15 	stw	r16,112(sp)
    2c30:	d9001615 	stw	r4,88(sp)
    2c34:	3023883a 	mov	r17,r6
    2c38:	2829883a 	mov	r20,r5
    2c3c:	d9c01715 	stw	r7,92(sp)
    2c40:	dc802817 	ldw	r18,160(sp)
    2c44:	302b883a 	mov	r21,r6
    2c48:	40000a26 	beq	r8,zero,2c74 <_dtoa_r+0x74>
    2c4c:	20801117 	ldw	r2,68(r4)
    2c50:	400b883a 	mov	r5,r8
    2c54:	40800115 	stw	r2,4(r8)
    2c58:	20c01117 	ldw	r3,68(r4)
    2c5c:	00800044 	movi	r2,1
    2c60:	10c4983a 	sll	r2,r2,r3
    2c64:	40800215 	stw	r2,8(r8)
    2c68:	0005d940 	call	5d94 <_Bfree>
    2c6c:	d8c01617 	ldw	r3,88(sp)
    2c70:	18001015 	stw	zero,64(r3)
    2c74:	8800a316 	blt	r17,zero,2f04 <_dtoa_r+0x304>
    2c78:	90000015 	stw	zero,0(r18)
    2c7c:	a8dffc2c 	andhi	r3,r21,32752
    2c80:	009ffc34 	movhi	r2,32752
    2c84:	18809126 	beq	r3,r2,2ecc <_dtoa_r+0x2cc>
    2c88:	000d883a 	mov	r6,zero
    2c8c:	000f883a 	mov	r7,zero
    2c90:	a009883a 	mov	r4,r20
    2c94:	a80b883a 	mov	r5,r21
    2c98:	dd001215 	stw	r20,72(sp)
    2c9c:	dd401315 	stw	r21,76(sp)
    2ca0:	00092a00 	call	92a0 <__nedf2>
    2ca4:	1000171e 	bne	r2,zero,2d04 <_dtoa_r+0x104>
    2ca8:	d9802717 	ldw	r6,156(sp)
    2cac:	00800044 	movi	r2,1
    2cb0:	30800015 	stw	r2,0(r6)
    2cb4:	d8802917 	ldw	r2,164(sp)
    2cb8:	10029b26 	beq	r2,zero,3728 <_dtoa_r+0xb28>
    2cbc:	d9002917 	ldw	r4,164(sp)
    2cc0:	00800074 	movhi	r2,1
    2cc4:	10b16f44 	addi	r2,r2,-14915
    2cc8:	10ffffc4 	addi	r3,r2,-1
    2ccc:	20800015 	stw	r2,0(r4)
    2cd0:	1805883a 	mov	r2,r3
    2cd4:	dfc02517 	ldw	ra,148(sp)
    2cd8:	df002417 	ldw	fp,144(sp)
    2cdc:	ddc02317 	ldw	r23,140(sp)
    2ce0:	dd802217 	ldw	r22,136(sp)
    2ce4:	dd402117 	ldw	r21,132(sp)
    2ce8:	dd002017 	ldw	r20,128(sp)
    2cec:	dcc01f17 	ldw	r19,124(sp)
    2cf0:	dc801e17 	ldw	r18,120(sp)
    2cf4:	dc401d17 	ldw	r17,116(sp)
    2cf8:	dc001c17 	ldw	r16,112(sp)
    2cfc:	dec02604 	addi	sp,sp,152
    2d00:	f800283a 	ret
    2d04:	d9001617 	ldw	r4,88(sp)
    2d08:	d9401217 	ldw	r5,72(sp)
    2d0c:	d8800104 	addi	r2,sp,4
    2d10:	a80d883a 	mov	r6,r21
    2d14:	d9c00204 	addi	r7,sp,8
    2d18:	d8800015 	stw	r2,0(sp)
    2d1c:	00063d00 	call	63d0 <__d2b>
    2d20:	d8800715 	stw	r2,28(sp)
    2d24:	a804d53a 	srli	r2,r21,20
    2d28:	1101ffcc 	andi	r4,r2,2047
    2d2c:	20008626 	beq	r4,zero,2f48 <_dtoa_r+0x348>
    2d30:	d8c01217 	ldw	r3,72(sp)
    2d34:	00800434 	movhi	r2,16
    2d38:	10bfffc4 	addi	r2,r2,-1
    2d3c:	ddc00117 	ldw	r23,4(sp)
    2d40:	a884703a 	and	r2,r21,r2
    2d44:	1811883a 	mov	r8,r3
    2d48:	124ffc34 	orhi	r9,r2,16368
    2d4c:	25bf0044 	addi	r22,r4,-1023
    2d50:	d8000815 	stw	zero,32(sp)
    2d54:	0005883a 	mov	r2,zero
    2d58:	00cffe34 	movhi	r3,16376
    2d5c:	480b883a 	mov	r5,r9
    2d60:	4009883a 	mov	r4,r8
    2d64:	180f883a 	mov	r7,r3
    2d68:	100d883a 	mov	r6,r2
    2d6c:	0008b080 	call	8b08 <__subdf3>
    2d70:	0218dbf4 	movhi	r8,25455
    2d74:	4210d844 	addi	r8,r8,17249
    2d78:	024ff4f4 	movhi	r9,16339
    2d7c:	4a61e9c4 	addi	r9,r9,-30809
    2d80:	480f883a 	mov	r7,r9
    2d84:	400d883a 	mov	r6,r8
    2d88:	180b883a 	mov	r5,r3
    2d8c:	1009883a 	mov	r4,r2
    2d90:	0008bfc0 	call	8bfc <__muldf3>
    2d94:	0222d874 	movhi	r8,35681
    2d98:	42322cc4 	addi	r8,r8,-14157
    2d9c:	024ff1f4 	movhi	r9,16327
    2da0:	4a628a04 	addi	r9,r9,-30168
    2da4:	480f883a 	mov	r7,r9
    2da8:	400d883a 	mov	r6,r8
    2dac:	180b883a 	mov	r5,r3
    2db0:	1009883a 	mov	r4,r2
    2db4:	0008b880 	call	8b88 <__adddf3>
    2db8:	b009883a 	mov	r4,r22
    2dbc:	1021883a 	mov	r16,r2
    2dc0:	1823883a 	mov	r17,r3
    2dc4:	00094c00 	call	94c0 <__floatsidf>
    2dc8:	021427f4 	movhi	r8,20639
    2dcc:	421e7ec4 	addi	r8,r8,31227
    2dd0:	024ff4f4 	movhi	r9,16339
    2dd4:	4a5104c4 	addi	r9,r9,17427
    2dd8:	480f883a 	mov	r7,r9
    2ddc:	400d883a 	mov	r6,r8
    2de0:	180b883a 	mov	r5,r3
    2de4:	1009883a 	mov	r4,r2
    2de8:	0008bfc0 	call	8bfc <__muldf3>
    2dec:	180f883a 	mov	r7,r3
    2df0:	880b883a 	mov	r5,r17
    2df4:	100d883a 	mov	r6,r2
    2df8:	8009883a 	mov	r4,r16
    2dfc:	0008b880 	call	8b88 <__adddf3>
    2e00:	1009883a 	mov	r4,r2
    2e04:	180b883a 	mov	r5,r3
    2e08:	1021883a 	mov	r16,r2
    2e0c:	1823883a 	mov	r17,r3
    2e10:	00095b80 	call	95b8 <__fixdfsi>
    2e14:	000d883a 	mov	r6,zero
    2e18:	000f883a 	mov	r7,zero
    2e1c:	8009883a 	mov	r4,r16
    2e20:	880b883a 	mov	r5,r17
    2e24:	d8800d15 	stw	r2,52(sp)
    2e28:	00094380 	call	9438 <__ltdf2>
    2e2c:	10031716 	blt	r2,zero,3a8c <_dtoa_r+0xe8c>
    2e30:	d8c00d17 	ldw	r3,52(sp)
    2e34:	00800584 	movi	r2,22
    2e38:	10c1482e 	bgeu	r2,r3,335c <_dtoa_r+0x75c>
    2e3c:	01000044 	movi	r4,1
    2e40:	d9000c15 	stw	r4,48(sp)
    2e44:	bd85c83a 	sub	r2,r23,r22
    2e48:	11bfffc4 	addi	r6,r2,-1
    2e4c:	30030b16 	blt	r6,zero,3a7c <_dtoa_r+0xe7c>
    2e50:	d9800a15 	stw	r6,40(sp)
    2e54:	d8001115 	stw	zero,68(sp)
    2e58:	d8c00d17 	ldw	r3,52(sp)
    2e5c:	1802ff16 	blt	r3,zero,3a5c <_dtoa_r+0xe5c>
    2e60:	d9000a17 	ldw	r4,40(sp)
    2e64:	d8c00915 	stw	r3,36(sp)
    2e68:	d8001015 	stw	zero,64(sp)
    2e6c:	20c9883a 	add	r4,r4,r3
    2e70:	d9000a15 	stw	r4,40(sp)
    2e74:	d9001717 	ldw	r4,92(sp)
    2e78:	00800244 	movi	r2,9
    2e7c:	11004636 	bltu	r2,r4,2f98 <_dtoa_r+0x398>
    2e80:	00800144 	movi	r2,5
    2e84:	11020416 	blt	r2,r4,3698 <_dtoa_r+0xa98>
    2e88:	04400044 	movi	r17,1
    2e8c:	d8c01717 	ldw	r3,92(sp)
    2e90:	00800144 	movi	r2,5
    2e94:	10c1ed36 	bltu	r2,r3,364c <_dtoa_r+0xa4c>
    2e98:	18c5883a 	add	r2,r3,r3
    2e9c:	1085883a 	add	r2,r2,r2
    2ea0:	00c00034 	movhi	r3,0
    2ea4:	18cbad04 	addi	r3,r3,11956
    2ea8:	10c5883a 	add	r2,r2,r3
    2eac:	11000017 	ldw	r4,0(r2)
    2eb0:	2000683a 	jmp	r4
    2eb4:	00002fa0 	cmpeqi	zero,zero,190
    2eb8:	00002fa0 	cmpeqi	zero,zero,190
    2ebc:	000039a0 	cmpeqi	zero,zero,230
    2ec0:	00003978 	rdprs	zero,zero,229
    2ec4:	000039bc 	xorhi	zero,zero,230
    2ec8:	000039c8 	cmpgei	zero,zero,231
    2ecc:	d9002717 	ldw	r4,156(sp)
    2ed0:	0089c3c4 	movi	r2,9999
    2ed4:	20800015 	stw	r2,0(r4)
    2ed8:	a0001026 	beq	r20,zero,2f1c <_dtoa_r+0x31c>
    2edc:	00c00074 	movhi	r3,1
    2ee0:	18f17b04 	addi	r3,r3,-14868
    2ee4:	d9802917 	ldw	r6,164(sp)
    2ee8:	303f7926 	beq	r6,zero,2cd0 <_dtoa_r+0xd0>
    2eec:	188000c7 	ldb	r2,3(r3)
    2ef0:	190000c4 	addi	r4,r3,3
    2ef4:	1000101e 	bne	r2,zero,2f38 <_dtoa_r+0x338>
    2ef8:	d8802917 	ldw	r2,164(sp)
    2efc:	11000015 	stw	r4,0(r2)
    2f00:	003f7306 	br	2cd0 <_dtoa_r+0xd0>
    2f04:	00a00034 	movhi	r2,32768
    2f08:	10bfffc4 	addi	r2,r2,-1
    2f0c:	00c00044 	movi	r3,1
    2f10:	88aa703a 	and	r21,r17,r2
    2f14:	90c00015 	stw	r3,0(r18)
    2f18:	003f5806 	br	2c7c <_dtoa_r+0x7c>
    2f1c:	00800434 	movhi	r2,16
    2f20:	10bfffc4 	addi	r2,r2,-1
    2f24:	a884703a 	and	r2,r21,r2
    2f28:	103fec1e 	bne	r2,zero,2edc <_dtoa_r+0x2dc>
    2f2c:	00c00074 	movhi	r3,1
    2f30:	18f17804 	addi	r3,r3,-14880
    2f34:	003feb06 	br	2ee4 <_dtoa_r+0x2e4>
    2f38:	d8802917 	ldw	r2,164(sp)
    2f3c:	19000204 	addi	r4,r3,8
    2f40:	11000015 	stw	r4,0(r2)
    2f44:	003f6206 	br	2cd0 <_dtoa_r+0xd0>
    2f48:	ddc00117 	ldw	r23,4(sp)
    2f4c:	d8800217 	ldw	r2,8(sp)
    2f50:	01000804 	movi	r4,32
    2f54:	b8c10c84 	addi	r3,r23,1074
    2f58:	18a3883a 	add	r17,r3,r2
    2f5c:	2441b80e 	bge	r4,r17,3640 <_dtoa_r+0xa40>
    2f60:	00c01004 	movi	r3,64
    2f64:	1c47c83a 	sub	r3,r3,r17
    2f68:	88bff804 	addi	r2,r17,-32
    2f6c:	a8c6983a 	sll	r3,r21,r3
    2f70:	a084d83a 	srl	r2,r20,r2
    2f74:	1888b03a 	or	r4,r3,r2
    2f78:	00096900 	call	9690 <__floatunsidf>
    2f7c:	1011883a 	mov	r8,r2
    2f80:	00bf8434 	movhi	r2,65040
    2f84:	01000044 	movi	r4,1
    2f88:	10d3883a 	add	r9,r2,r3
    2f8c:	8dbef344 	addi	r22,r17,-1075
    2f90:	d9000815 	stw	r4,32(sp)
    2f94:	003f6f06 	br	2d54 <_dtoa_r+0x154>
    2f98:	d8001715 	stw	zero,92(sp)
    2f9c:	04400044 	movi	r17,1
    2fa0:	00bfffc4 	movi	r2,-1
    2fa4:	00c00044 	movi	r3,1
    2fa8:	d8800e15 	stw	r2,56(sp)
    2fac:	d8002615 	stw	zero,152(sp)
    2fb0:	d8800f15 	stw	r2,60(sp)
    2fb4:	d8c00b15 	stw	r3,44(sp)
    2fb8:	1021883a 	mov	r16,r2
    2fbc:	d8801617 	ldw	r2,88(sp)
    2fc0:	10001115 	stw	zero,68(r2)
    2fc4:	d8801617 	ldw	r2,88(sp)
    2fc8:	11401117 	ldw	r5,68(r2)
    2fcc:	1009883a 	mov	r4,r2
    2fd0:	00063140 	call	6314 <_Balloc>
    2fd4:	d8c01617 	ldw	r3,88(sp)
    2fd8:	d8800515 	stw	r2,20(sp)
    2fdc:	18801015 	stw	r2,64(r3)
    2fe0:	00800384 	movi	r2,14
    2fe4:	14006836 	bltu	r2,r16,3188 <_dtoa_r+0x588>
    2fe8:	8805003a 	cmpeq	r2,r17,zero
    2fec:	1000661e 	bne	r2,zero,3188 <_dtoa_r+0x588>
    2ff0:	d9000d17 	ldw	r4,52(sp)
    2ff4:	0102300e 	bge	zero,r4,38b8 <_dtoa_r+0xcb8>
    2ff8:	208003cc 	andi	r2,r4,15
    2ffc:	100490fa 	slli	r2,r2,3
    3000:	2025d13a 	srai	r18,r4,4
    3004:	00c00074 	movhi	r3,1
    3008:	18f18d04 	addi	r3,r3,-14796
    300c:	10c5883a 	add	r2,r2,r3
    3010:	90c0040c 	andi	r3,r18,16
    3014:	14000017 	ldw	r16,0(r2)
    3018:	14400117 	ldw	r17,4(r2)
    301c:	18036a1e 	bne	r3,zero,3dc8 <_dtoa_r+0x11c8>
    3020:	05800084 	movi	r22,2
    3024:	90001026 	beq	r18,zero,3068 <_dtoa_r+0x468>
    3028:	04c00074 	movhi	r19,1
    302c:	9cf1bf04 	addi	r19,r19,-14596
    3030:	9080004c 	andi	r2,r18,1
    3034:	1005003a 	cmpeq	r2,r2,zero
    3038:	1000081e 	bne	r2,zero,305c <_dtoa_r+0x45c>
    303c:	99800017 	ldw	r6,0(r19)
    3040:	99c00117 	ldw	r7,4(r19)
    3044:	880b883a 	mov	r5,r17
    3048:	8009883a 	mov	r4,r16
    304c:	0008bfc0 	call	8bfc <__muldf3>
    3050:	1021883a 	mov	r16,r2
    3054:	b5800044 	addi	r22,r22,1
    3058:	1823883a 	mov	r17,r3
    305c:	9025d07a 	srai	r18,r18,1
    3060:	9cc00204 	addi	r19,r19,8
    3064:	903ff21e 	bne	r18,zero,3030 <_dtoa_r+0x430>
    3068:	a80b883a 	mov	r5,r21
    306c:	a009883a 	mov	r4,r20
    3070:	880f883a 	mov	r7,r17
    3074:	800d883a 	mov	r6,r16
    3078:	0008fc00 	call	8fc0 <__divdf3>
    307c:	1029883a 	mov	r20,r2
    3080:	182b883a 	mov	r21,r3
    3084:	d8c00c17 	ldw	r3,48(sp)
    3088:	1805003a 	cmpeq	r2,r3,zero
    308c:	1000081e 	bne	r2,zero,30b0 <_dtoa_r+0x4b0>
    3090:	0005883a 	mov	r2,zero
    3094:	00cffc34 	movhi	r3,16368
    3098:	180f883a 	mov	r7,r3
    309c:	a009883a 	mov	r4,r20
    30a0:	a80b883a 	mov	r5,r21
    30a4:	100d883a 	mov	r6,r2
    30a8:	00094380 	call	9438 <__ltdf2>
    30ac:	1003fe16 	blt	r2,zero,40a8 <_dtoa_r+0x14a8>
    30b0:	b009883a 	mov	r4,r22
    30b4:	00094c00 	call	94c0 <__floatsidf>
    30b8:	180b883a 	mov	r5,r3
    30bc:	1009883a 	mov	r4,r2
    30c0:	a00d883a 	mov	r6,r20
    30c4:	a80f883a 	mov	r7,r21
    30c8:	0008bfc0 	call	8bfc <__muldf3>
    30cc:	0011883a 	mov	r8,zero
    30d0:	02500734 	movhi	r9,16412
    30d4:	1009883a 	mov	r4,r2
    30d8:	180b883a 	mov	r5,r3
    30dc:	480f883a 	mov	r7,r9
    30e0:	400d883a 	mov	r6,r8
    30e4:	0008b880 	call	8b88 <__adddf3>
    30e8:	d9000f17 	ldw	r4,60(sp)
    30ec:	102d883a 	mov	r22,r2
    30f0:	00bf3034 	movhi	r2,64704
    30f4:	18b9883a 	add	fp,r3,r2
    30f8:	e02f883a 	mov	r23,fp
    30fc:	20028f1e 	bne	r4,zero,3b3c <_dtoa_r+0xf3c>
    3100:	0005883a 	mov	r2,zero
    3104:	00d00534 	movhi	r3,16404
    3108:	a009883a 	mov	r4,r20
    310c:	a80b883a 	mov	r5,r21
    3110:	180f883a 	mov	r7,r3
    3114:	100d883a 	mov	r6,r2
    3118:	0008b080 	call	8b08 <__subdf3>
    311c:	1009883a 	mov	r4,r2
    3120:	e00f883a 	mov	r7,fp
    3124:	180b883a 	mov	r5,r3
    3128:	b00d883a 	mov	r6,r22
    312c:	1025883a 	mov	r18,r2
    3130:	1827883a 	mov	r19,r3
    3134:	00093280 	call	9328 <__gtdf2>
    3138:	00834f16 	blt	zero,r2,3e78 <_dtoa_r+0x1278>
    313c:	e0e0003c 	xorhi	r3,fp,32768
    3140:	9009883a 	mov	r4,r18
    3144:	980b883a 	mov	r5,r19
    3148:	180f883a 	mov	r7,r3
    314c:	b00d883a 	mov	r6,r22
    3150:	00094380 	call	9438 <__ltdf2>
    3154:	1000080e 	bge	r2,zero,3178 <_dtoa_r+0x578>
    3158:	0027883a 	mov	r19,zero
    315c:	0025883a 	mov	r18,zero
    3160:	d8802617 	ldw	r2,152(sp)
    3164:	df000517 	ldw	fp,20(sp)
    3168:	d8000615 	stw	zero,24(sp)
    316c:	0084303a 	nor	r2,zero,r2
    3170:	d8800d15 	stw	r2,52(sp)
    3174:	00019b06 	br	37e4 <_dtoa_r+0xbe4>
    3178:	d9801217 	ldw	r6,72(sp)
    317c:	d8801317 	ldw	r2,76(sp)
    3180:	3029883a 	mov	r20,r6
    3184:	102b883a 	mov	r21,r2
    3188:	d8c00217 	ldw	r3,8(sp)
    318c:	18008516 	blt	r3,zero,33a4 <_dtoa_r+0x7a4>
    3190:	d9000d17 	ldw	r4,52(sp)
    3194:	00800384 	movi	r2,14
    3198:	11008216 	blt	r2,r4,33a4 <_dtoa_r+0x7a4>
    319c:	200490fa 	slli	r2,r4,3
    31a0:	d9802617 	ldw	r6,152(sp)
    31a4:	00c00074 	movhi	r3,1
    31a8:	18f18d04 	addi	r3,r3,-14796
    31ac:	10c5883a 	add	r2,r2,r3
    31b0:	14800017 	ldw	r18,0(r2)
    31b4:	14c00117 	ldw	r19,4(r2)
    31b8:	30031e16 	blt	r6,zero,3e34 <_dtoa_r+0x1234>
    31bc:	d9000517 	ldw	r4,20(sp)
    31c0:	d8c00f17 	ldw	r3,60(sp)
    31c4:	a823883a 	mov	r17,r21
    31c8:	a021883a 	mov	r16,r20
    31cc:	192b883a 	add	r21,r3,r4
    31d0:	2039883a 	mov	fp,r4
    31d4:	00000f06 	br	3214 <_dtoa_r+0x614>
    31d8:	0005883a 	mov	r2,zero
    31dc:	00d00934 	movhi	r3,16420
    31e0:	5009883a 	mov	r4,r10
    31e4:	580b883a 	mov	r5,r11
    31e8:	180f883a 	mov	r7,r3
    31ec:	100d883a 	mov	r6,r2
    31f0:	0008bfc0 	call	8bfc <__muldf3>
    31f4:	180b883a 	mov	r5,r3
    31f8:	000d883a 	mov	r6,zero
    31fc:	000f883a 	mov	r7,zero
    3200:	1009883a 	mov	r4,r2
    3204:	1021883a 	mov	r16,r2
    3208:	1823883a 	mov	r17,r3
    320c:	00092a00 	call	92a0 <__nedf2>
    3210:	10004526 	beq	r2,zero,3328 <_dtoa_r+0x728>
    3214:	900d883a 	mov	r6,r18
    3218:	980f883a 	mov	r7,r19
    321c:	8009883a 	mov	r4,r16
    3220:	880b883a 	mov	r5,r17
    3224:	0008fc00 	call	8fc0 <__divdf3>
    3228:	180b883a 	mov	r5,r3
    322c:	1009883a 	mov	r4,r2
    3230:	00095b80 	call	95b8 <__fixdfsi>
    3234:	1009883a 	mov	r4,r2
    3238:	1029883a 	mov	r20,r2
    323c:	00094c00 	call	94c0 <__floatsidf>
    3240:	180f883a 	mov	r7,r3
    3244:	9009883a 	mov	r4,r18
    3248:	980b883a 	mov	r5,r19
    324c:	100d883a 	mov	r6,r2
    3250:	0008bfc0 	call	8bfc <__muldf3>
    3254:	180f883a 	mov	r7,r3
    3258:	880b883a 	mov	r5,r17
    325c:	8009883a 	mov	r4,r16
    3260:	100d883a 	mov	r6,r2
    3264:	0008b080 	call	8b08 <__subdf3>
    3268:	1015883a 	mov	r10,r2
    326c:	a0800c04 	addi	r2,r20,48
    3270:	e0800005 	stb	r2,0(fp)
    3274:	e7000044 	addi	fp,fp,1
    3278:	1817883a 	mov	r11,r3
    327c:	e57fd61e 	bne	fp,r21,31d8 <_dtoa_r+0x5d8>
    3280:	500d883a 	mov	r6,r10
    3284:	180f883a 	mov	r7,r3
    3288:	5009883a 	mov	r4,r10
    328c:	180b883a 	mov	r5,r3
    3290:	0008b880 	call	8b88 <__adddf3>
    3294:	100d883a 	mov	r6,r2
    3298:	9009883a 	mov	r4,r18
    329c:	980b883a 	mov	r5,r19
    32a0:	180f883a 	mov	r7,r3
    32a4:	1021883a 	mov	r16,r2
    32a8:	1823883a 	mov	r17,r3
    32ac:	00094380 	call	9438 <__ltdf2>
    32b0:	10000816 	blt	r2,zero,32d4 <_dtoa_r+0x6d4>
    32b4:	980b883a 	mov	r5,r19
    32b8:	800d883a 	mov	r6,r16
    32bc:	880f883a 	mov	r7,r17
    32c0:	9009883a 	mov	r4,r18
    32c4:	00092180 	call	9218 <__eqdf2>
    32c8:	1000171e 	bne	r2,zero,3328 <_dtoa_r+0x728>
    32cc:	a080004c 	andi	r2,r20,1
    32d0:	10001526 	beq	r2,zero,3328 <_dtoa_r+0x728>
    32d4:	d8800d17 	ldw	r2,52(sp)
    32d8:	d8800415 	stw	r2,16(sp)
    32dc:	e009883a 	mov	r4,fp
    32e0:	213fffc4 	addi	r4,r4,-1
    32e4:	20c00007 	ldb	r3,0(r4)
    32e8:	00800e44 	movi	r2,57
    32ec:	1880081e 	bne	r3,r2,3310 <_dtoa_r+0x710>
    32f0:	d8800517 	ldw	r2,20(sp)
    32f4:	113ffa1e 	bne	r2,r4,32e0 <_dtoa_r+0x6e0>
    32f8:	d8c00417 	ldw	r3,16(sp)
    32fc:	d9800517 	ldw	r6,20(sp)
    3300:	00800c04 	movi	r2,48
    3304:	18c00044 	addi	r3,r3,1
    3308:	d8c00415 	stw	r3,16(sp)
    330c:	30800005 	stb	r2,0(r6)
    3310:	20800003 	ldbu	r2,0(r4)
    3314:	d8c00417 	ldw	r3,16(sp)
    3318:	27000044 	addi	fp,r4,1
    331c:	10800044 	addi	r2,r2,1
    3320:	d8c00d15 	stw	r3,52(sp)
    3324:	20800005 	stb	r2,0(r4)
    3328:	d9001617 	ldw	r4,88(sp)
    332c:	d9400717 	ldw	r5,28(sp)
    3330:	0005d940 	call	5d94 <_Bfree>
    3334:	e0000005 	stb	zero,0(fp)
    3338:	d9800d17 	ldw	r6,52(sp)
    333c:	d8c02717 	ldw	r3,156(sp)
    3340:	d9002917 	ldw	r4,164(sp)
    3344:	30800044 	addi	r2,r6,1
    3348:	18800015 	stw	r2,0(r3)
    334c:	20029c26 	beq	r4,zero,3dc0 <_dtoa_r+0x11c0>
    3350:	d8c00517 	ldw	r3,20(sp)
    3354:	27000015 	stw	fp,0(r4)
    3358:	003e5d06 	br	2cd0 <_dtoa_r+0xd0>
    335c:	d9800d17 	ldw	r6,52(sp)
    3360:	00c00074 	movhi	r3,1
    3364:	18f18d04 	addi	r3,r3,-14796
    3368:	d9001217 	ldw	r4,72(sp)
    336c:	300490fa 	slli	r2,r6,3
    3370:	d9401317 	ldw	r5,76(sp)
    3374:	10c5883a 	add	r2,r2,r3
    3378:	12000017 	ldw	r8,0(r2)
    337c:	12400117 	ldw	r9,4(r2)
    3380:	400d883a 	mov	r6,r8
    3384:	480f883a 	mov	r7,r9
    3388:	00094380 	call	9438 <__ltdf2>
    338c:	1000030e 	bge	r2,zero,339c <_dtoa_r+0x79c>
    3390:	d8800d17 	ldw	r2,52(sp)
    3394:	10bfffc4 	addi	r2,r2,-1
    3398:	d8800d15 	stw	r2,52(sp)
    339c:	d8000c15 	stw	zero,48(sp)
    33a0:	003ea806 	br	2e44 <_dtoa_r+0x244>
    33a4:	d9000b17 	ldw	r4,44(sp)
    33a8:	202cc03a 	cmpne	r22,r4,zero
    33ac:	b000c71e 	bne	r22,zero,36cc <_dtoa_r+0xacc>
    33b0:	dc001117 	ldw	r16,68(sp)
    33b4:	dc801017 	ldw	r18,64(sp)
    33b8:	0027883a 	mov	r19,zero
    33bc:	04000b0e 	bge	zero,r16,33ec <_dtoa_r+0x7ec>
    33c0:	d8c00a17 	ldw	r3,40(sp)
    33c4:	00c0090e 	bge	zero,r3,33ec <_dtoa_r+0x7ec>
    33c8:	8005883a 	mov	r2,r16
    33cc:	1c011316 	blt	r3,r16,381c <_dtoa_r+0xc1c>
    33d0:	d9000a17 	ldw	r4,40(sp)
    33d4:	d9801117 	ldw	r6,68(sp)
    33d8:	80a1c83a 	sub	r16,r16,r2
    33dc:	2089c83a 	sub	r4,r4,r2
    33e0:	308dc83a 	sub	r6,r6,r2
    33e4:	d9000a15 	stw	r4,40(sp)
    33e8:	d9801115 	stw	r6,68(sp)
    33ec:	d8801017 	ldw	r2,64(sp)
    33f0:	0080150e 	bge	zero,r2,3448 <_dtoa_r+0x848>
    33f4:	d8c00b17 	ldw	r3,44(sp)
    33f8:	1805003a 	cmpeq	r2,r3,zero
    33fc:	1001c91e 	bne	r2,zero,3b24 <_dtoa_r+0xf24>
    3400:	04800e0e 	bge	zero,r18,343c <_dtoa_r+0x83c>
    3404:	d9001617 	ldw	r4,88(sp)
    3408:	980b883a 	mov	r5,r19
    340c:	900d883a 	mov	r6,r18
    3410:	0006b480 	call	6b48 <__pow5mult>
    3414:	d9001617 	ldw	r4,88(sp)
    3418:	d9800717 	ldw	r6,28(sp)
    341c:	100b883a 	mov	r5,r2
    3420:	1027883a 	mov	r19,r2
    3424:	00068240 	call	6824 <__multiply>
    3428:	d9001617 	ldw	r4,88(sp)
    342c:	d9400717 	ldw	r5,28(sp)
    3430:	1023883a 	mov	r17,r2
    3434:	0005d940 	call	5d94 <_Bfree>
    3438:	dc400715 	stw	r17,28(sp)
    343c:	d9001017 	ldw	r4,64(sp)
    3440:	248dc83a 	sub	r6,r4,r18
    3444:	30010e1e 	bne	r6,zero,3880 <_dtoa_r+0xc80>
    3448:	d9001617 	ldw	r4,88(sp)
    344c:	04400044 	movi	r17,1
    3450:	880b883a 	mov	r5,r17
    3454:	0006a0c0 	call	6a0c <__i2b>
    3458:	d9800917 	ldw	r6,36(sp)
    345c:	1025883a 	mov	r18,r2
    3460:	0180040e 	bge	zero,r6,3474 <_dtoa_r+0x874>
    3464:	d9001617 	ldw	r4,88(sp)
    3468:	100b883a 	mov	r5,r2
    346c:	0006b480 	call	6b48 <__pow5mult>
    3470:	1025883a 	mov	r18,r2
    3474:	d8801717 	ldw	r2,92(sp)
    3478:	8880f30e 	bge	r17,r2,3848 <_dtoa_r+0xc48>
    347c:	0023883a 	mov	r17,zero
    3480:	d9800917 	ldw	r6,36(sp)
    3484:	30019e1e 	bne	r6,zero,3b00 <_dtoa_r+0xf00>
    3488:	00c00044 	movi	r3,1
    348c:	d9000a17 	ldw	r4,40(sp)
    3490:	20c5883a 	add	r2,r4,r3
    3494:	10c007cc 	andi	r3,r2,31
    3498:	1800841e 	bne	r3,zero,36ac <_dtoa_r+0xaac>
    349c:	00800704 	movi	r2,28
    34a0:	d9000a17 	ldw	r4,40(sp)
    34a4:	d9801117 	ldw	r6,68(sp)
    34a8:	80a1883a 	add	r16,r16,r2
    34ac:	2089883a 	add	r4,r4,r2
    34b0:	308d883a 	add	r6,r6,r2
    34b4:	d9000a15 	stw	r4,40(sp)
    34b8:	d9801115 	stw	r6,68(sp)
    34bc:	d8801117 	ldw	r2,68(sp)
    34c0:	0080050e 	bge	zero,r2,34d8 <_dtoa_r+0x8d8>
    34c4:	d9400717 	ldw	r5,28(sp)
    34c8:	d9001617 	ldw	r4,88(sp)
    34cc:	100d883a 	mov	r6,r2
    34d0:	00066d80 	call	66d8 <__lshift>
    34d4:	d8800715 	stw	r2,28(sp)
    34d8:	d8c00a17 	ldw	r3,40(sp)
    34dc:	00c0050e 	bge	zero,r3,34f4 <_dtoa_r+0x8f4>
    34e0:	d9001617 	ldw	r4,88(sp)
    34e4:	900b883a 	mov	r5,r18
    34e8:	180d883a 	mov	r6,r3
    34ec:	00066d80 	call	66d8 <__lshift>
    34f0:	1025883a 	mov	r18,r2
    34f4:	d9000c17 	ldw	r4,48(sp)
    34f8:	2005003a 	cmpeq	r2,r4,zero
    34fc:	10016f26 	beq	r2,zero,3abc <_dtoa_r+0xebc>
    3500:	d9000f17 	ldw	r4,60(sp)
    3504:	0102170e 	bge	zero,r4,3d64 <_dtoa_r+0x1164>
    3508:	d9800b17 	ldw	r6,44(sp)
    350c:	3005003a 	cmpeq	r2,r6,zero
    3510:	1000881e 	bne	r2,zero,3734 <_dtoa_r+0xb34>
    3514:	0400050e 	bge	zero,r16,352c <_dtoa_r+0x92c>
    3518:	d9001617 	ldw	r4,88(sp)
    351c:	980b883a 	mov	r5,r19
    3520:	800d883a 	mov	r6,r16
    3524:	00066d80 	call	66d8 <__lshift>
    3528:	1027883a 	mov	r19,r2
    352c:	8804c03a 	cmpne	r2,r17,zero
    3530:	1002541e 	bne	r2,zero,3e84 <_dtoa_r+0x1284>
    3534:	980b883a 	mov	r5,r19
    3538:	dd800517 	ldw	r22,20(sp)
    353c:	dcc00615 	stw	r19,24(sp)
    3540:	a700004c 	andi	fp,r20,1
    3544:	2827883a 	mov	r19,r5
    3548:	d9000717 	ldw	r4,28(sp)
    354c:	900b883a 	mov	r5,r18
    3550:	00029e80 	call	29e8 <quorem>
    3554:	d9000717 	ldw	r4,28(sp)
    3558:	d9400617 	ldw	r5,24(sp)
    355c:	1023883a 	mov	r17,r2
    3560:	8dc00c04 	addi	r23,r17,48
    3564:	0005ef00 	call	5ef0 <__mcmp>
    3568:	d9001617 	ldw	r4,88(sp)
    356c:	900b883a 	mov	r5,r18
    3570:	980d883a 	mov	r6,r19
    3574:	1029883a 	mov	r20,r2
    3578:	000654c0 	call	654c <__mdiff>
    357c:	102b883a 	mov	r21,r2
    3580:	10800317 	ldw	r2,12(r2)
    3584:	1001281e 	bne	r2,zero,3a28 <_dtoa_r+0xe28>
    3588:	d9000717 	ldw	r4,28(sp)
    358c:	a80b883a 	mov	r5,r21
    3590:	0005ef00 	call	5ef0 <__mcmp>
    3594:	d9001617 	ldw	r4,88(sp)
    3598:	1021883a 	mov	r16,r2
    359c:	a80b883a 	mov	r5,r21
    35a0:	0005d940 	call	5d94 <_Bfree>
    35a4:	8000041e 	bne	r16,zero,35b8 <_dtoa_r+0x9b8>
    35a8:	d8801717 	ldw	r2,92(sp)
    35ac:	1000021e 	bne	r2,zero,35b8 <_dtoa_r+0x9b8>
    35b0:	e004c03a 	cmpne	r2,fp,zero
    35b4:	10011726 	beq	r2,zero,3a14 <_dtoa_r+0xe14>
    35b8:	a0010616 	blt	r20,zero,39d4 <_dtoa_r+0xdd4>
    35bc:	a000041e 	bne	r20,zero,35d0 <_dtoa_r+0x9d0>
    35c0:	d8c01717 	ldw	r3,92(sp)
    35c4:	1800021e 	bne	r3,zero,35d0 <_dtoa_r+0x9d0>
    35c8:	e004c03a 	cmpne	r2,fp,zero
    35cc:	10010126 	beq	r2,zero,39d4 <_dtoa_r+0xdd4>
    35d0:	04023d16 	blt	zero,r16,3ec8 <_dtoa_r+0x12c8>
    35d4:	b5c00005 	stb	r23,0(r22)
    35d8:	d9800517 	ldw	r6,20(sp)
    35dc:	d9000f17 	ldw	r4,60(sp)
    35e0:	b5800044 	addi	r22,r22,1
    35e4:	3105883a 	add	r2,r6,r4
    35e8:	b0806526 	beq	r22,r2,3780 <_dtoa_r+0xb80>
    35ec:	d9400717 	ldw	r5,28(sp)
    35f0:	d9001617 	ldw	r4,88(sp)
    35f4:	01800284 	movi	r6,10
    35f8:	000f883a 	mov	r7,zero
    35fc:	0006a480 	call	6a48 <__multadd>
    3600:	d8800715 	stw	r2,28(sp)
    3604:	d8800617 	ldw	r2,24(sp)
    3608:	14c10c26 	beq	r2,r19,3a3c <_dtoa_r+0xe3c>
    360c:	d9400617 	ldw	r5,24(sp)
    3610:	d9001617 	ldw	r4,88(sp)
    3614:	01800284 	movi	r6,10
    3618:	000f883a 	mov	r7,zero
    361c:	0006a480 	call	6a48 <__multadd>
    3620:	d9001617 	ldw	r4,88(sp)
    3624:	980b883a 	mov	r5,r19
    3628:	01800284 	movi	r6,10
    362c:	000f883a 	mov	r7,zero
    3630:	d8800615 	stw	r2,24(sp)
    3634:	0006a480 	call	6a48 <__multadd>
    3638:	1027883a 	mov	r19,r2
    363c:	003fc206 	br	3548 <_dtoa_r+0x948>
    3640:	2445c83a 	sub	r2,r4,r17
    3644:	a088983a 	sll	r4,r20,r2
    3648:	003e4b06 	br	2f78 <_dtoa_r+0x378>
    364c:	01bfffc4 	movi	r6,-1
    3650:	00800044 	movi	r2,1
    3654:	d9800e15 	stw	r6,56(sp)
    3658:	d9800f15 	stw	r6,60(sp)
    365c:	d8800b15 	stw	r2,44(sp)
    3660:	d8c01617 	ldw	r3,88(sp)
    3664:	008005c4 	movi	r2,23
    3668:	18001115 	stw	zero,68(r3)
    366c:	1580082e 	bgeu	r2,r22,3690 <_dtoa_r+0xa90>
    3670:	00c00104 	movi	r3,4
    3674:	0009883a 	mov	r4,zero
    3678:	18c7883a 	add	r3,r3,r3
    367c:	18800504 	addi	r2,r3,20
    3680:	21000044 	addi	r4,r4,1
    3684:	b0bffc2e 	bgeu	r22,r2,3678 <_dtoa_r+0xa78>
    3688:	d9801617 	ldw	r6,88(sp)
    368c:	31001115 	stw	r4,68(r6)
    3690:	dc000f17 	ldw	r16,60(sp)
    3694:	003e4b06 	br	2fc4 <_dtoa_r+0x3c4>
    3698:	d9801717 	ldw	r6,92(sp)
    369c:	0023883a 	mov	r17,zero
    36a0:	31bfff04 	addi	r6,r6,-4
    36a4:	d9801715 	stw	r6,92(sp)
    36a8:	003df806 	br	2e8c <_dtoa_r+0x28c>
    36ac:	00800804 	movi	r2,32
    36b0:	10c9c83a 	sub	r4,r2,r3
    36b4:	00c00104 	movi	r3,4
    36b8:	19005a16 	blt	r3,r4,3824 <_dtoa_r+0xc24>
    36bc:	008000c4 	movi	r2,3
    36c0:	113f7e16 	blt	r2,r4,34bc <_dtoa_r+0x8bc>
    36c4:	20800704 	addi	r2,r4,28
    36c8:	003f7506 	br	34a0 <_dtoa_r+0x8a0>
    36cc:	d9801717 	ldw	r6,92(sp)
    36d0:	00800044 	movi	r2,1
    36d4:	1180a10e 	bge	r2,r6,395c <_dtoa_r+0xd5c>
    36d8:	d9800f17 	ldw	r6,60(sp)
    36dc:	d8c01017 	ldw	r3,64(sp)
    36e0:	30bfffc4 	addi	r2,r6,-1
    36e4:	1881c616 	blt	r3,r2,3e00 <_dtoa_r+0x1200>
    36e8:	18a5c83a 	sub	r18,r3,r2
    36ec:	d8800f17 	ldw	r2,60(sp)
    36f0:	10026216 	blt	r2,zero,407c <_dtoa_r+0x147c>
    36f4:	dc001117 	ldw	r16,68(sp)
    36f8:	1007883a 	mov	r3,r2
    36fc:	d9800a17 	ldw	r6,40(sp)
    3700:	d8801117 	ldw	r2,68(sp)
    3704:	d9001617 	ldw	r4,88(sp)
    3708:	30cd883a 	add	r6,r6,r3
    370c:	10c5883a 	add	r2,r2,r3
    3710:	01400044 	movi	r5,1
    3714:	d9800a15 	stw	r6,40(sp)
    3718:	d8801115 	stw	r2,68(sp)
    371c:	0006a0c0 	call	6a0c <__i2b>
    3720:	1027883a 	mov	r19,r2
    3724:	003f2506 	br	33bc <_dtoa_r+0x7bc>
    3728:	00c00074 	movhi	r3,1
    372c:	18f16f04 	addi	r3,r3,-14916
    3730:	003d6706 	br	2cd0 <_dtoa_r+0xd0>
    3734:	dd800517 	ldw	r22,20(sp)
    3738:	04000044 	movi	r16,1
    373c:	00000706 	br	375c <_dtoa_r+0xb5c>
    3740:	d9400717 	ldw	r5,28(sp)
    3744:	d9001617 	ldw	r4,88(sp)
    3748:	01800284 	movi	r6,10
    374c:	000f883a 	mov	r7,zero
    3750:	0006a480 	call	6a48 <__multadd>
    3754:	d8800715 	stw	r2,28(sp)
    3758:	84000044 	addi	r16,r16,1
    375c:	d9000717 	ldw	r4,28(sp)
    3760:	900b883a 	mov	r5,r18
    3764:	00029e80 	call	29e8 <quorem>
    3768:	15c00c04 	addi	r23,r2,48
    376c:	b5c00005 	stb	r23,0(r22)
    3770:	d8c00f17 	ldw	r3,60(sp)
    3774:	b5800044 	addi	r22,r22,1
    3778:	80fff116 	blt	r16,r3,3740 <_dtoa_r+0xb40>
    377c:	d8000615 	stw	zero,24(sp)
    3780:	d9400717 	ldw	r5,28(sp)
    3784:	d9001617 	ldw	r4,88(sp)
    3788:	01800044 	movi	r6,1
    378c:	00066d80 	call	66d8 <__lshift>
    3790:	1009883a 	mov	r4,r2
    3794:	900b883a 	mov	r5,r18
    3798:	d8800715 	stw	r2,28(sp)
    379c:	0005ef00 	call	5ef0 <__mcmp>
    37a0:	00803c0e 	bge	zero,r2,3894 <_dtoa_r+0xc94>
    37a4:	b009883a 	mov	r4,r22
    37a8:	213fffc4 	addi	r4,r4,-1
    37ac:	21400003 	ldbu	r5,0(r4)
    37b0:	00800e44 	movi	r2,57
    37b4:	28c03fcc 	andi	r3,r5,255
    37b8:	18c0201c 	xori	r3,r3,128
    37bc:	18ffe004 	addi	r3,r3,-128
    37c0:	1881981e 	bne	r3,r2,3e24 <_dtoa_r+0x1224>
    37c4:	d9800517 	ldw	r6,20(sp)
    37c8:	21bff71e 	bne	r4,r6,37a8 <_dtoa_r+0xba8>
    37cc:	d8800d17 	ldw	r2,52(sp)
    37d0:	37000044 	addi	fp,r6,1
    37d4:	10800044 	addi	r2,r2,1
    37d8:	d8800d15 	stw	r2,52(sp)
    37dc:	00800c44 	movi	r2,49
    37e0:	30800005 	stb	r2,0(r6)
    37e4:	d9001617 	ldw	r4,88(sp)
    37e8:	900b883a 	mov	r5,r18
    37ec:	0005d940 	call	5d94 <_Bfree>
    37f0:	983ecd26 	beq	r19,zero,3328 <_dtoa_r+0x728>
    37f4:	d8c00617 	ldw	r3,24(sp)
    37f8:	18000426 	beq	r3,zero,380c <_dtoa_r+0xc0c>
    37fc:	1cc00326 	beq	r3,r19,380c <_dtoa_r+0xc0c>
    3800:	d9001617 	ldw	r4,88(sp)
    3804:	180b883a 	mov	r5,r3
    3808:	0005d940 	call	5d94 <_Bfree>
    380c:	d9001617 	ldw	r4,88(sp)
    3810:	980b883a 	mov	r5,r19
    3814:	0005d940 	call	5d94 <_Bfree>
    3818:	003ec306 	br	3328 <_dtoa_r+0x728>
    381c:	1805883a 	mov	r2,r3
    3820:	003eeb06 	br	33d0 <_dtoa_r+0x7d0>
    3824:	d9800a17 	ldw	r6,40(sp)
    3828:	d8c01117 	ldw	r3,68(sp)
    382c:	20bfff04 	addi	r2,r4,-4
    3830:	308d883a 	add	r6,r6,r2
    3834:	1887883a 	add	r3,r3,r2
    3838:	80a1883a 	add	r16,r16,r2
    383c:	d9800a15 	stw	r6,40(sp)
    3840:	d8c01115 	stw	r3,68(sp)
    3844:	003f1d06 	br	34bc <_dtoa_r+0x8bc>
    3848:	a03f0c1e 	bne	r20,zero,347c <_dtoa_r+0x87c>
    384c:	00800434 	movhi	r2,16
    3850:	10bfffc4 	addi	r2,r2,-1
    3854:	a884703a 	and	r2,r21,r2
    3858:	103f081e 	bne	r2,zero,347c <_dtoa_r+0x87c>
    385c:	a89ffc2c 	andhi	r2,r21,32752
    3860:	103f0626 	beq	r2,zero,347c <_dtoa_r+0x87c>
    3864:	d8c01117 	ldw	r3,68(sp)
    3868:	d9000a17 	ldw	r4,40(sp)
    386c:	18c00044 	addi	r3,r3,1
    3870:	21000044 	addi	r4,r4,1
    3874:	d8c01115 	stw	r3,68(sp)
    3878:	d9000a15 	stw	r4,40(sp)
    387c:	003f0006 	br	3480 <_dtoa_r+0x880>
    3880:	d9400717 	ldw	r5,28(sp)
    3884:	d9001617 	ldw	r4,88(sp)
    3888:	0006b480 	call	6b48 <__pow5mult>
    388c:	d8800715 	stw	r2,28(sp)
    3890:	003eed06 	br	3448 <_dtoa_r+0x848>
    3894:	1000021e 	bne	r2,zero,38a0 <_dtoa_r+0xca0>
    3898:	b880004c 	andi	r2,r23,1
    389c:	103fc11e 	bne	r2,zero,37a4 <_dtoa_r+0xba4>
    38a0:	b5bfffc4 	addi	r22,r22,-1
    38a4:	b0c00007 	ldb	r3,0(r22)
    38a8:	00800c04 	movi	r2,48
    38ac:	18bffc26 	beq	r3,r2,38a0 <_dtoa_r+0xca0>
    38b0:	b7000044 	addi	fp,r22,1
    38b4:	003fcb06 	br	37e4 <_dtoa_r+0xbe4>
    38b8:	d9800d17 	ldw	r6,52(sp)
    38bc:	018fc83a 	sub	r7,zero,r6
    38c0:	3801f726 	beq	r7,zero,40a0 <_dtoa_r+0x14a0>
    38c4:	398003cc 	andi	r6,r7,15
    38c8:	300c90fa 	slli	r6,r6,3
    38cc:	01400074 	movhi	r5,1
    38d0:	29718d04 	addi	r5,r5,-14796
    38d4:	d9001217 	ldw	r4,72(sp)
    38d8:	314d883a 	add	r6,r6,r5
    38dc:	30c00117 	ldw	r3,4(r6)
    38e0:	30800017 	ldw	r2,0(r6)
    38e4:	d9401317 	ldw	r5,76(sp)
    38e8:	3821d13a 	srai	r16,r7,4
    38ec:	100d883a 	mov	r6,r2
    38f0:	180f883a 	mov	r7,r3
    38f4:	0008bfc0 	call	8bfc <__muldf3>
    38f8:	1011883a 	mov	r8,r2
    38fc:	1813883a 	mov	r9,r3
    3900:	1029883a 	mov	r20,r2
    3904:	182b883a 	mov	r21,r3
    3908:	8001e526 	beq	r16,zero,40a0 <_dtoa_r+0x14a0>
    390c:	05800084 	movi	r22,2
    3910:	04400074 	movhi	r17,1
    3914:	8c71bf04 	addi	r17,r17,-14596
    3918:	8080004c 	andi	r2,r16,1
    391c:	1005003a 	cmpeq	r2,r2,zero
    3920:	1000081e 	bne	r2,zero,3944 <_dtoa_r+0xd44>
    3924:	89800017 	ldw	r6,0(r17)
    3928:	89c00117 	ldw	r7,4(r17)
    392c:	480b883a 	mov	r5,r9
    3930:	4009883a 	mov	r4,r8
    3934:	0008bfc0 	call	8bfc <__muldf3>
    3938:	1011883a 	mov	r8,r2
    393c:	b5800044 	addi	r22,r22,1
    3940:	1813883a 	mov	r9,r3
    3944:	8021d07a 	srai	r16,r16,1
    3948:	8c400204 	addi	r17,r17,8
    394c:	803ff21e 	bne	r16,zero,3918 <_dtoa_r+0xd18>
    3950:	4029883a 	mov	r20,r8
    3954:	482b883a 	mov	r21,r9
    3958:	003dca06 	br	3084 <_dtoa_r+0x484>
    395c:	d9000817 	ldw	r4,32(sp)
    3960:	2005003a 	cmpeq	r2,r4,zero
    3964:	1001f61e 	bne	r2,zero,4140 <_dtoa_r+0x1540>
    3968:	dc001117 	ldw	r16,68(sp)
    396c:	dc801017 	ldw	r18,64(sp)
    3970:	18c10cc4 	addi	r3,r3,1075
    3974:	003f6106 	br	36fc <_dtoa_r+0xafc>
    3978:	d8000b15 	stw	zero,44(sp)
    397c:	d9802617 	ldw	r6,152(sp)
    3980:	d8c00d17 	ldw	r3,52(sp)
    3984:	30800044 	addi	r2,r6,1
    3988:	18ad883a 	add	r22,r3,r2
    398c:	b13fffc4 	addi	r4,r22,-1
    3990:	d9000e15 	stw	r4,56(sp)
    3994:	0581f60e 	bge	zero,r22,4170 <_dtoa_r+0x1570>
    3998:	dd800f15 	stw	r22,60(sp)
    399c:	003f3006 	br	3660 <_dtoa_r+0xa60>
    39a0:	d8000b15 	stw	zero,44(sp)
    39a4:	d9002617 	ldw	r4,152(sp)
    39a8:	0101eb0e 	bge	zero,r4,4158 <_dtoa_r+0x1558>
    39ac:	202d883a 	mov	r22,r4
    39b0:	d9000e15 	stw	r4,56(sp)
    39b4:	d9000f15 	stw	r4,60(sp)
    39b8:	003f2906 	br	3660 <_dtoa_r+0xa60>
    39bc:	01800044 	movi	r6,1
    39c0:	d9800b15 	stw	r6,44(sp)
    39c4:	003ff706 	br	39a4 <_dtoa_r+0xda4>
    39c8:	01000044 	movi	r4,1
    39cc:	d9000b15 	stw	r4,44(sp)
    39d0:	003fea06 	br	397c <_dtoa_r+0xd7c>
    39d4:	04000c0e 	bge	zero,r16,3a08 <_dtoa_r+0xe08>
    39d8:	d9400717 	ldw	r5,28(sp)
    39dc:	d9001617 	ldw	r4,88(sp)
    39e0:	01800044 	movi	r6,1
    39e4:	00066d80 	call	66d8 <__lshift>
    39e8:	1009883a 	mov	r4,r2
    39ec:	900b883a 	mov	r5,r18
    39f0:	d8800715 	stw	r2,28(sp)
    39f4:	0005ef00 	call	5ef0 <__mcmp>
    39f8:	0081e00e 	bge	zero,r2,417c <_dtoa_r+0x157c>
    39fc:	bdc00044 	addi	r23,r23,1
    3a00:	00800e84 	movi	r2,58
    3a04:	b881a226 	beq	r23,r2,4090 <_dtoa_r+0x1490>
    3a08:	b7000044 	addi	fp,r22,1
    3a0c:	b5c00005 	stb	r23,0(r22)
    3a10:	003f7406 	br	37e4 <_dtoa_r+0xbe4>
    3a14:	00800e44 	movi	r2,57
    3a18:	b8819d26 	beq	r23,r2,4090 <_dtoa_r+0x1490>
    3a1c:	053ffa0e 	bge	zero,r20,3a08 <_dtoa_r+0xe08>
    3a20:	8dc00c44 	addi	r23,r17,49
    3a24:	003ff806 	br	3a08 <_dtoa_r+0xe08>
    3a28:	d9001617 	ldw	r4,88(sp)
    3a2c:	a80b883a 	mov	r5,r21
    3a30:	04000044 	movi	r16,1
    3a34:	0005d940 	call	5d94 <_Bfree>
    3a38:	003edf06 	br	35b8 <_dtoa_r+0x9b8>
    3a3c:	d9001617 	ldw	r4,88(sp)
    3a40:	980b883a 	mov	r5,r19
    3a44:	01800284 	movi	r6,10
    3a48:	000f883a 	mov	r7,zero
    3a4c:	0006a480 	call	6a48 <__multadd>
    3a50:	1027883a 	mov	r19,r2
    3a54:	d8800615 	stw	r2,24(sp)
    3a58:	003ebb06 	br	3548 <_dtoa_r+0x948>
    3a5c:	d9801117 	ldw	r6,68(sp)
    3a60:	d8800d17 	ldw	r2,52(sp)
    3a64:	d8000915 	stw	zero,36(sp)
    3a68:	308dc83a 	sub	r6,r6,r2
    3a6c:	0087c83a 	sub	r3,zero,r2
    3a70:	d9801115 	stw	r6,68(sp)
    3a74:	d8c01015 	stw	r3,64(sp)
    3a78:	003cfe06 	br	2e74 <_dtoa_r+0x274>
    3a7c:	018dc83a 	sub	r6,zero,r6
    3a80:	d9801115 	stw	r6,68(sp)
    3a84:	d8000a15 	stw	zero,40(sp)
    3a88:	003cf306 	br	2e58 <_dtoa_r+0x258>
    3a8c:	d9000d17 	ldw	r4,52(sp)
    3a90:	00094c00 	call	94c0 <__floatsidf>
    3a94:	880b883a 	mov	r5,r17
    3a98:	8009883a 	mov	r4,r16
    3a9c:	180f883a 	mov	r7,r3
    3aa0:	100d883a 	mov	r6,r2
    3aa4:	00092a00 	call	92a0 <__nedf2>
    3aa8:	103ce126 	beq	r2,zero,2e30 <_dtoa_r+0x230>
    3aac:	d9800d17 	ldw	r6,52(sp)
    3ab0:	31bfffc4 	addi	r6,r6,-1
    3ab4:	d9800d15 	stw	r6,52(sp)
    3ab8:	003cdd06 	br	2e30 <_dtoa_r+0x230>
    3abc:	d9000717 	ldw	r4,28(sp)
    3ac0:	900b883a 	mov	r5,r18
    3ac4:	0005ef00 	call	5ef0 <__mcmp>
    3ac8:	103e8d0e 	bge	r2,zero,3500 <_dtoa_r+0x900>
    3acc:	d9400717 	ldw	r5,28(sp)
    3ad0:	d9001617 	ldw	r4,88(sp)
    3ad4:	01800284 	movi	r6,10
    3ad8:	000f883a 	mov	r7,zero
    3adc:	0006a480 	call	6a48 <__multadd>
    3ae0:	d9800d17 	ldw	r6,52(sp)
    3ae4:	d8800715 	stw	r2,28(sp)
    3ae8:	31bfffc4 	addi	r6,r6,-1
    3aec:	d9800d15 	stw	r6,52(sp)
    3af0:	b001a71e 	bne	r22,zero,4190 <_dtoa_r+0x1590>
    3af4:	d8800e17 	ldw	r2,56(sp)
    3af8:	d8800f15 	stw	r2,60(sp)
    3afc:	003e8006 	br	3500 <_dtoa_r+0x900>
    3b00:	90800417 	ldw	r2,16(r18)
    3b04:	1085883a 	add	r2,r2,r2
    3b08:	1085883a 	add	r2,r2,r2
    3b0c:	1485883a 	add	r2,r2,r18
    3b10:	11000417 	ldw	r4,16(r2)
    3b14:	0005dbc0 	call	5dbc <__hi0bits>
    3b18:	00c00804 	movi	r3,32
    3b1c:	1887c83a 	sub	r3,r3,r2
    3b20:	003e5a06 	br	348c <_dtoa_r+0x88c>
    3b24:	d9400717 	ldw	r5,28(sp)
    3b28:	d9801017 	ldw	r6,64(sp)
    3b2c:	d9001617 	ldw	r4,88(sp)
    3b30:	0006b480 	call	6b48 <__pow5mult>
    3b34:	d8800715 	stw	r2,28(sp)
    3b38:	003e4306 	br	3448 <_dtoa_r+0x848>
    3b3c:	d9800f17 	ldw	r6,60(sp)
    3b40:	d8800d17 	ldw	r2,52(sp)
    3b44:	d9800315 	stw	r6,12(sp)
    3b48:	d8800415 	stw	r2,16(sp)
    3b4c:	d8c00b17 	ldw	r3,44(sp)
    3b50:	1805003a 	cmpeq	r2,r3,zero
    3b54:	1000e21e 	bne	r2,zero,3ee0 <_dtoa_r+0x12e0>
    3b58:	d9000317 	ldw	r4,12(sp)
    3b5c:	0005883a 	mov	r2,zero
    3b60:	00cff834 	movhi	r3,16352
    3b64:	200c90fa 	slli	r6,r4,3
    3b68:	01000074 	movhi	r4,1
    3b6c:	21318d04 	addi	r4,r4,-14796
    3b70:	180b883a 	mov	r5,r3
    3b74:	310d883a 	add	r6,r6,r4
    3b78:	327fff17 	ldw	r9,-4(r6)
    3b7c:	323ffe17 	ldw	r8,-8(r6)
    3b80:	1009883a 	mov	r4,r2
    3b84:	480f883a 	mov	r7,r9
    3b88:	400d883a 	mov	r6,r8
    3b8c:	0008fc00 	call	8fc0 <__divdf3>
    3b90:	180b883a 	mov	r5,r3
    3b94:	b00d883a 	mov	r6,r22
    3b98:	b80f883a 	mov	r7,r23
    3b9c:	1009883a 	mov	r4,r2
    3ba0:	0008b080 	call	8b08 <__subdf3>
    3ba4:	a80b883a 	mov	r5,r21
    3ba8:	a009883a 	mov	r4,r20
    3bac:	d8c01915 	stw	r3,100(sp)
    3bb0:	d8801815 	stw	r2,96(sp)
    3bb4:	00095b80 	call	95b8 <__fixdfsi>
    3bb8:	1009883a 	mov	r4,r2
    3bbc:	1027883a 	mov	r19,r2
    3bc0:	00094c00 	call	94c0 <__floatsidf>
    3bc4:	a80b883a 	mov	r5,r21
    3bc8:	a009883a 	mov	r4,r20
    3bcc:	180f883a 	mov	r7,r3
    3bd0:	100d883a 	mov	r6,r2
    3bd4:	0008b080 	call	8b08 <__subdf3>
    3bd8:	d9801817 	ldw	r6,96(sp)
    3bdc:	1823883a 	mov	r17,r3
    3be0:	d8801415 	stw	r2,80(sp)
    3be4:	302d883a 	mov	r22,r6
    3be8:	d9800517 	ldw	r6,20(sp)
    3bec:	9cc00c04 	addi	r19,r19,48
    3bf0:	dc401515 	stw	r17,84(sp)
    3bf4:	d8c01917 	ldw	r3,100(sp)
    3bf8:	34c00005 	stb	r19,0(r6)
    3bfc:	d8800517 	ldw	r2,20(sp)
    3c00:	d9401917 	ldw	r5,100(sp)
    3c04:	d9801417 	ldw	r6,80(sp)
    3c08:	b009883a 	mov	r4,r22
    3c0c:	880f883a 	mov	r7,r17
    3c10:	182f883a 	mov	r23,r3
    3c14:	17000044 	addi	fp,r2,1
    3c18:	00093280 	call	9328 <__gtdf2>
    3c1c:	00804e16 	blt	zero,r2,3d58 <_dtoa_r+0x1158>
    3c20:	d9801417 	ldw	r6,80(sp)
    3c24:	0005883a 	mov	r2,zero
    3c28:	00cffc34 	movhi	r3,16368
    3c2c:	180b883a 	mov	r5,r3
    3c30:	880f883a 	mov	r7,r17
    3c34:	1009883a 	mov	r4,r2
    3c38:	0008b080 	call	8b08 <__subdf3>
    3c3c:	d9401917 	ldw	r5,100(sp)
    3c40:	180f883a 	mov	r7,r3
    3c44:	b009883a 	mov	r4,r22
    3c48:	100d883a 	mov	r6,r2
    3c4c:	00093280 	call	9328 <__gtdf2>
    3c50:	00bda216 	blt	zero,r2,32dc <_dtoa_r+0x6dc>
    3c54:	d8c00317 	ldw	r3,12(sp)
    3c58:	00800044 	movi	r2,1
    3c5c:	10c01216 	blt	r2,r3,3ca8 <_dtoa_r+0x10a8>
    3c60:	003d4506 	br	3178 <_dtoa_r+0x578>
    3c64:	d9801417 	ldw	r6,80(sp)
    3c68:	0005883a 	mov	r2,zero
    3c6c:	00cffc34 	movhi	r3,16368
    3c70:	180b883a 	mov	r5,r3
    3c74:	880f883a 	mov	r7,r17
    3c78:	1009883a 	mov	r4,r2
    3c7c:	0008b080 	call	8b08 <__subdf3>
    3c80:	d9c01b17 	ldw	r7,108(sp)
    3c84:	180b883a 	mov	r5,r3
    3c88:	1009883a 	mov	r4,r2
    3c8c:	b00d883a 	mov	r6,r22
    3c90:	00094380 	call	9438 <__ltdf2>
    3c94:	103d9116 	blt	r2,zero,32dc <_dtoa_r+0x6dc>
    3c98:	d9800517 	ldw	r6,20(sp)
    3c9c:	d9000317 	ldw	r4,12(sp)
    3ca0:	3105883a 	add	r2,r6,r4
    3ca4:	e0bd3426 	beq	fp,r2,3178 <_dtoa_r+0x578>
    3ca8:	04500934 	movhi	r17,16420
    3cac:	0021883a 	mov	r16,zero
    3cb0:	b80b883a 	mov	r5,r23
    3cb4:	b009883a 	mov	r4,r22
    3cb8:	800d883a 	mov	r6,r16
    3cbc:	880f883a 	mov	r7,r17
    3cc0:	0008bfc0 	call	8bfc <__muldf3>
    3cc4:	d9401517 	ldw	r5,84(sp)
    3cc8:	d9001417 	ldw	r4,80(sp)
    3ccc:	880f883a 	mov	r7,r17
    3cd0:	000d883a 	mov	r6,zero
    3cd4:	d8801a15 	stw	r2,104(sp)
    3cd8:	d8c01b15 	stw	r3,108(sp)
    3cdc:	0008bfc0 	call	8bfc <__muldf3>
    3ce0:	180b883a 	mov	r5,r3
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	1823883a 	mov	r17,r3
    3cec:	1021883a 	mov	r16,r2
    3cf0:	00095b80 	call	95b8 <__fixdfsi>
    3cf4:	1009883a 	mov	r4,r2
    3cf8:	102b883a 	mov	r21,r2
    3cfc:	00094c00 	call	94c0 <__floatsidf>
    3d00:	880b883a 	mov	r5,r17
    3d04:	8009883a 	mov	r4,r16
    3d08:	180f883a 	mov	r7,r3
    3d0c:	100d883a 	mov	r6,r2
    3d10:	0008b080 	call	8b08 <__subdf3>
    3d14:	1021883a 	mov	r16,r2
    3d18:	d9001b17 	ldw	r4,108(sp)
    3d1c:	1823883a 	mov	r17,r3
    3d20:	dc001415 	stw	r16,80(sp)
    3d24:	ad400c04 	addi	r21,r21,48
    3d28:	dc401515 	stw	r17,84(sp)
    3d2c:	d8801a17 	ldw	r2,104(sp)
    3d30:	e5400005 	stb	r21,0(fp)
    3d34:	202f883a 	mov	r23,r4
    3d38:	d9c01b17 	ldw	r7,108(sp)
    3d3c:	d9001417 	ldw	r4,80(sp)
    3d40:	880b883a 	mov	r5,r17
    3d44:	100d883a 	mov	r6,r2
    3d48:	102d883a 	mov	r22,r2
    3d4c:	e7000044 	addi	fp,fp,1
    3d50:	00094380 	call	9438 <__ltdf2>
    3d54:	103fc30e 	bge	r2,zero,3c64 <_dtoa_r+0x1064>
    3d58:	d9000417 	ldw	r4,16(sp)
    3d5c:	d9000d15 	stw	r4,52(sp)
    3d60:	003d7106 	br	3328 <_dtoa_r+0x728>
    3d64:	d9801717 	ldw	r6,92(sp)
    3d68:	00800084 	movi	r2,2
    3d6c:	11bde60e 	bge	r2,r6,3508 <_dtoa_r+0x908>
    3d70:	203cfb1e 	bne	r4,zero,3160 <_dtoa_r+0x560>
    3d74:	d9001617 	ldw	r4,88(sp)
    3d78:	900b883a 	mov	r5,r18
    3d7c:	01800144 	movi	r6,5
    3d80:	000f883a 	mov	r7,zero
    3d84:	0006a480 	call	6a48 <__multadd>
    3d88:	d9000717 	ldw	r4,28(sp)
    3d8c:	100b883a 	mov	r5,r2
    3d90:	1025883a 	mov	r18,r2
    3d94:	0005ef00 	call	5ef0 <__mcmp>
    3d98:	00bcf10e 	bge	zero,r2,3160 <_dtoa_r+0x560>
    3d9c:	d8c00d17 	ldw	r3,52(sp)
    3da0:	d9000517 	ldw	r4,20(sp)
    3da4:	d8000615 	stw	zero,24(sp)
    3da8:	18c00044 	addi	r3,r3,1
    3dac:	d8c00d15 	stw	r3,52(sp)
    3db0:	00800c44 	movi	r2,49
    3db4:	27000044 	addi	fp,r4,1
    3db8:	20800005 	stb	r2,0(r4)
    3dbc:	003e8906 	br	37e4 <_dtoa_r+0xbe4>
    3dc0:	d8c00517 	ldw	r3,20(sp)
    3dc4:	003bc206 	br	2cd0 <_dtoa_r+0xd0>
    3dc8:	01800074 	movhi	r6,1
    3dcc:	31b1bf04 	addi	r6,r6,-14596
    3dd0:	30c00917 	ldw	r3,36(r6)
    3dd4:	30800817 	ldw	r2,32(r6)
    3dd8:	d9001217 	ldw	r4,72(sp)
    3ddc:	d9401317 	ldw	r5,76(sp)
    3de0:	180f883a 	mov	r7,r3
    3de4:	100d883a 	mov	r6,r2
    3de8:	0008fc00 	call	8fc0 <__divdf3>
    3dec:	948003cc 	andi	r18,r18,15
    3df0:	058000c4 	movi	r22,3
    3df4:	1029883a 	mov	r20,r2
    3df8:	182b883a 	mov	r21,r3
    3dfc:	003c8906 	br	3024 <_dtoa_r+0x424>
    3e00:	d9001017 	ldw	r4,64(sp)
    3e04:	d9800917 	ldw	r6,36(sp)
    3e08:	0025883a 	mov	r18,zero
    3e0c:	1105c83a 	sub	r2,r2,r4
    3e10:	2089883a 	add	r4,r4,r2
    3e14:	308d883a 	add	r6,r6,r2
    3e18:	d9001015 	stw	r4,64(sp)
    3e1c:	d9800915 	stw	r6,36(sp)
    3e20:	003e3206 	br	36ec <_dtoa_r+0xaec>
    3e24:	28800044 	addi	r2,r5,1
    3e28:	27000044 	addi	fp,r4,1
    3e2c:	20800005 	stb	r2,0(r4)
    3e30:	003e6c06 	br	37e4 <_dtoa_r+0xbe4>
    3e34:	d8800f17 	ldw	r2,60(sp)
    3e38:	00bce016 	blt	zero,r2,31bc <_dtoa_r+0x5bc>
    3e3c:	d9800f17 	ldw	r6,60(sp)
    3e40:	303cc51e 	bne	r6,zero,3158 <_dtoa_r+0x558>
    3e44:	0005883a 	mov	r2,zero
    3e48:	00d00534 	movhi	r3,16404
    3e4c:	980b883a 	mov	r5,r19
    3e50:	180f883a 	mov	r7,r3
    3e54:	9009883a 	mov	r4,r18
    3e58:	100d883a 	mov	r6,r2
    3e5c:	0008bfc0 	call	8bfc <__muldf3>
    3e60:	180b883a 	mov	r5,r3
    3e64:	a80f883a 	mov	r7,r21
    3e68:	1009883a 	mov	r4,r2
    3e6c:	a00d883a 	mov	r6,r20
    3e70:	00093b00 	call	93b0 <__gedf2>
    3e74:	103cb80e 	bge	r2,zero,3158 <_dtoa_r+0x558>
    3e78:	0027883a 	mov	r19,zero
    3e7c:	0025883a 	mov	r18,zero
    3e80:	003fc606 	br	3d9c <_dtoa_r+0x119c>
    3e84:	99400117 	ldw	r5,4(r19)
    3e88:	d9001617 	ldw	r4,88(sp)
    3e8c:	00063140 	call	6314 <_Balloc>
    3e90:	99800417 	ldw	r6,16(r19)
    3e94:	11000304 	addi	r4,r2,12
    3e98:	99400304 	addi	r5,r19,12
    3e9c:	318d883a 	add	r6,r6,r6
    3ea0:	318d883a 	add	r6,r6,r6
    3ea4:	31800204 	addi	r6,r6,8
    3ea8:	1023883a 	mov	r17,r2
    3eac:	0005b7c0 	call	5b7c <memcpy>
    3eb0:	d9001617 	ldw	r4,88(sp)
    3eb4:	880b883a 	mov	r5,r17
    3eb8:	01800044 	movi	r6,1
    3ebc:	00066d80 	call	66d8 <__lshift>
    3ec0:	100b883a 	mov	r5,r2
    3ec4:	003d9c06 	br	3538 <_dtoa_r+0x938>
    3ec8:	00800e44 	movi	r2,57
    3ecc:	b8807026 	beq	r23,r2,4090 <_dtoa_r+0x1490>
    3ed0:	b8800044 	addi	r2,r23,1
    3ed4:	b7000044 	addi	fp,r22,1
    3ed8:	b0800005 	stb	r2,0(r22)
    3edc:	003e4106 	br	37e4 <_dtoa_r+0xbe4>
    3ee0:	d8800317 	ldw	r2,12(sp)
    3ee4:	01800074 	movhi	r6,1
    3ee8:	31b18d04 	addi	r6,r6,-14796
    3eec:	b009883a 	mov	r4,r22
    3ef0:	100e90fa 	slli	r7,r2,3
    3ef4:	b80b883a 	mov	r5,r23
    3ef8:	398f883a 	add	r7,r7,r6
    3efc:	38bffe17 	ldw	r2,-8(r7)
    3f00:	d9800517 	ldw	r6,20(sp)
    3f04:	38ffff17 	ldw	r3,-4(r7)
    3f08:	37000044 	addi	fp,r6,1
    3f0c:	180f883a 	mov	r7,r3
    3f10:	100d883a 	mov	r6,r2
    3f14:	0008bfc0 	call	8bfc <__muldf3>
    3f18:	a80b883a 	mov	r5,r21
    3f1c:	a009883a 	mov	r4,r20
    3f20:	182f883a 	mov	r23,r3
    3f24:	102d883a 	mov	r22,r2
    3f28:	00095b80 	call	95b8 <__fixdfsi>
    3f2c:	1009883a 	mov	r4,r2
    3f30:	1027883a 	mov	r19,r2
    3f34:	00094c00 	call	94c0 <__floatsidf>
    3f38:	a80b883a 	mov	r5,r21
    3f3c:	a009883a 	mov	r4,r20
    3f40:	180f883a 	mov	r7,r3
    3f44:	100d883a 	mov	r6,r2
    3f48:	0008b080 	call	8b08 <__subdf3>
    3f4c:	180b883a 	mov	r5,r3
    3f50:	d8c00517 	ldw	r3,20(sp)
    3f54:	9cc00c04 	addi	r19,r19,48
    3f58:	1009883a 	mov	r4,r2
    3f5c:	1cc00005 	stb	r19,0(r3)
    3f60:	2021883a 	mov	r16,r4
    3f64:	d9000317 	ldw	r4,12(sp)
    3f68:	00800044 	movi	r2,1
    3f6c:	2823883a 	mov	r17,r5
    3f70:	20802226 	beq	r4,r2,3ffc <_dtoa_r+0x13fc>
    3f74:	1029883a 	mov	r20,r2
    3f78:	0005883a 	mov	r2,zero
    3f7c:	00d00934 	movhi	r3,16420
    3f80:	180f883a 	mov	r7,r3
    3f84:	100d883a 	mov	r6,r2
    3f88:	880b883a 	mov	r5,r17
    3f8c:	8009883a 	mov	r4,r16
    3f90:	0008bfc0 	call	8bfc <__muldf3>
    3f94:	180b883a 	mov	r5,r3
    3f98:	1009883a 	mov	r4,r2
    3f9c:	1823883a 	mov	r17,r3
    3fa0:	1021883a 	mov	r16,r2
    3fa4:	00095b80 	call	95b8 <__fixdfsi>
    3fa8:	1009883a 	mov	r4,r2
    3fac:	102b883a 	mov	r21,r2
    3fb0:	00094c00 	call	94c0 <__floatsidf>
    3fb4:	880b883a 	mov	r5,r17
    3fb8:	8009883a 	mov	r4,r16
    3fbc:	180f883a 	mov	r7,r3
    3fc0:	100d883a 	mov	r6,r2
    3fc4:	0008b080 	call	8b08 <__subdf3>
    3fc8:	180b883a 	mov	r5,r3
    3fcc:	d8c00517 	ldw	r3,20(sp)
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	ad400c04 	addi	r21,r21,48
    3fd8:	1d05883a 	add	r2,r3,r20
    3fdc:	15400005 	stb	r21,0(r2)
    3fe0:	2021883a 	mov	r16,r4
    3fe4:	d9000317 	ldw	r4,12(sp)
    3fe8:	a5000044 	addi	r20,r20,1
    3fec:	2823883a 	mov	r17,r5
    3ff0:	a13fe11e 	bne	r20,r4,3f78 <_dtoa_r+0x1378>
    3ff4:	e505883a 	add	r2,fp,r20
    3ff8:	173fffc4 	addi	fp,r2,-1
    3ffc:	0025883a 	mov	r18,zero
    4000:	04cff834 	movhi	r19,16352
    4004:	b009883a 	mov	r4,r22
    4008:	b80b883a 	mov	r5,r23
    400c:	900d883a 	mov	r6,r18
    4010:	980f883a 	mov	r7,r19
    4014:	0008b880 	call	8b88 <__adddf3>
    4018:	180b883a 	mov	r5,r3
    401c:	1009883a 	mov	r4,r2
    4020:	800d883a 	mov	r6,r16
    4024:	880f883a 	mov	r7,r17
    4028:	00094380 	call	9438 <__ltdf2>
    402c:	103cab16 	blt	r2,zero,32dc <_dtoa_r+0x6dc>
    4030:	0009883a 	mov	r4,zero
    4034:	980b883a 	mov	r5,r19
    4038:	b80f883a 	mov	r7,r23
    403c:	b00d883a 	mov	r6,r22
    4040:	0008b080 	call	8b08 <__subdf3>
    4044:	180b883a 	mov	r5,r3
    4048:	880f883a 	mov	r7,r17
    404c:	1009883a 	mov	r4,r2
    4050:	800d883a 	mov	r6,r16
    4054:	00093280 	call	9328 <__gtdf2>
    4058:	00bc470e 	bge	zero,r2,3178 <_dtoa_r+0x578>
    405c:	00c00c04 	movi	r3,48
    4060:	e73fffc4 	addi	fp,fp,-1
    4064:	e0800007 	ldb	r2,0(fp)
    4068:	10fffd26 	beq	r2,r3,4060 <_dtoa_r+0x1460>
    406c:	d9800417 	ldw	r6,16(sp)
    4070:	e7000044 	addi	fp,fp,1
    4074:	d9800d15 	stw	r6,52(sp)
    4078:	003cab06 	br	3328 <_dtoa_r+0x728>
    407c:	d8c00f17 	ldw	r3,60(sp)
    4080:	d9001117 	ldw	r4,68(sp)
    4084:	20e1c83a 	sub	r16,r4,r3
    4088:	0007883a 	mov	r3,zero
    408c:	003d9b06 	br	36fc <_dtoa_r+0xafc>
    4090:	00800e44 	movi	r2,57
    4094:	b0800005 	stb	r2,0(r22)
    4098:	b5800044 	addi	r22,r22,1
    409c:	003dc106 	br	37a4 <_dtoa_r+0xba4>
    40a0:	05800084 	movi	r22,2
    40a4:	003bf706 	br	3084 <_dtoa_r+0x484>
    40a8:	d9000f17 	ldw	r4,60(sp)
    40ac:	013c000e 	bge	zero,r4,30b0 <_dtoa_r+0x4b0>
    40b0:	d9800e17 	ldw	r6,56(sp)
    40b4:	01bc300e 	bge	zero,r6,3178 <_dtoa_r+0x578>
    40b8:	0005883a 	mov	r2,zero
    40bc:	00d00934 	movhi	r3,16420
    40c0:	a80b883a 	mov	r5,r21
    40c4:	180f883a 	mov	r7,r3
    40c8:	a009883a 	mov	r4,r20
    40cc:	100d883a 	mov	r6,r2
    40d0:	0008bfc0 	call	8bfc <__muldf3>
    40d4:	b1000044 	addi	r4,r22,1
    40d8:	1021883a 	mov	r16,r2
    40dc:	1823883a 	mov	r17,r3
    40e0:	00094c00 	call	94c0 <__floatsidf>
    40e4:	880b883a 	mov	r5,r17
    40e8:	8009883a 	mov	r4,r16
    40ec:	180f883a 	mov	r7,r3
    40f0:	100d883a 	mov	r6,r2
    40f4:	0008bfc0 	call	8bfc <__muldf3>
    40f8:	0011883a 	mov	r8,zero
    40fc:	02500734 	movhi	r9,16412
    4100:	180b883a 	mov	r5,r3
    4104:	480f883a 	mov	r7,r9
    4108:	1009883a 	mov	r4,r2
    410c:	400d883a 	mov	r6,r8
    4110:	0008b880 	call	8b88 <__adddf3>
    4114:	102d883a 	mov	r22,r2
    4118:	00bf3034 	movhi	r2,64704
    411c:	10ef883a 	add	r23,r2,r3
    4120:	d8800d17 	ldw	r2,52(sp)
    4124:	d8c00e17 	ldw	r3,56(sp)
    4128:	8029883a 	mov	r20,r16
    412c:	10bfffc4 	addi	r2,r2,-1
    4130:	882b883a 	mov	r21,r17
    4134:	d8800415 	stw	r2,16(sp)
    4138:	d8c00315 	stw	r3,12(sp)
    413c:	003e8306 	br	3b4c <_dtoa_r+0xf4c>
    4140:	d8800117 	ldw	r2,4(sp)
    4144:	dc001117 	ldw	r16,68(sp)
    4148:	dc801017 	ldw	r18,64(sp)
    414c:	00c00d84 	movi	r3,54
    4150:	1887c83a 	sub	r3,r3,r2
    4154:	003d6906 	br	36fc <_dtoa_r+0xafc>
    4158:	01800044 	movi	r6,1
    415c:	3021883a 	mov	r16,r6
    4160:	d9800f15 	stw	r6,60(sp)
    4164:	d9802615 	stw	r6,152(sp)
    4168:	d9800e15 	stw	r6,56(sp)
    416c:	003b9306 	br	2fbc <_dtoa_r+0x3bc>
    4170:	b021883a 	mov	r16,r22
    4174:	dd800f15 	stw	r22,60(sp)
    4178:	003b9006 	br	2fbc <_dtoa_r+0x3bc>
    417c:	103e221e 	bne	r2,zero,3a08 <_dtoa_r+0xe08>
    4180:	b880004c 	andi	r2,r23,1
    4184:	1005003a 	cmpeq	r2,r2,zero
    4188:	103e1f1e 	bne	r2,zero,3a08 <_dtoa_r+0xe08>
    418c:	003e1b06 	br	39fc <_dtoa_r+0xdfc>
    4190:	d9001617 	ldw	r4,88(sp)
    4194:	980b883a 	mov	r5,r19
    4198:	01800284 	movi	r6,10
    419c:	000f883a 	mov	r7,zero
    41a0:	0006a480 	call	6a48 <__multadd>
    41a4:	d8c00e17 	ldw	r3,56(sp)
    41a8:	1027883a 	mov	r19,r2
    41ac:	d8c00f15 	stw	r3,60(sp)
    41b0:	003cd306 	br	3500 <_dtoa_r+0x900>

000041b4 <_fflush_r>:
    41b4:	defffb04 	addi	sp,sp,-20
    41b8:	dcc00315 	stw	r19,12(sp)
    41bc:	dc800215 	stw	r18,8(sp)
    41c0:	dfc00415 	stw	ra,16(sp)
    41c4:	dc400115 	stw	r17,4(sp)
    41c8:	dc000015 	stw	r16,0(sp)
    41cc:	2027883a 	mov	r19,r4
    41d0:	2825883a 	mov	r18,r5
    41d4:	20000226 	beq	r4,zero,41e0 <_fflush_r+0x2c>
    41d8:	20800e17 	ldw	r2,56(r4)
    41dc:	10005626 	beq	r2,zero,4338 <_fflush_r+0x184>
    41e0:	9100030b 	ldhu	r4,12(r18)
    41e4:	20ffffcc 	andi	r3,r4,65535
    41e8:	18e0001c 	xori	r3,r3,32768
    41ec:	18e00004 	addi	r3,r3,-32768
    41f0:	1880020c 	andi	r2,r3,8
    41f4:	1000261e 	bne	r2,zero,4290 <_fflush_r+0xdc>
    41f8:	90c00117 	ldw	r3,4(r18)
    41fc:	20820014 	ori	r2,r4,2048
    4200:	9080030d 	sth	r2,12(r18)
    4204:	1009883a 	mov	r4,r2
    4208:	00c0400e 	bge	zero,r3,430c <_fflush_r+0x158>
    420c:	92000a17 	ldw	r8,40(r18)
    4210:	40004026 	beq	r8,zero,4314 <_fflush_r+0x160>
    4214:	2084000c 	andi	r2,r4,4096
    4218:	10005326 	beq	r2,zero,4368 <_fflush_r+0x1b4>
    421c:	94001417 	ldw	r16,80(r18)
    4220:	9080030b 	ldhu	r2,12(r18)
    4224:	1080010c 	andi	r2,r2,4
    4228:	1000481e 	bne	r2,zero,434c <_fflush_r+0x198>
    422c:	91400717 	ldw	r5,28(r18)
    4230:	9809883a 	mov	r4,r19
    4234:	800d883a 	mov	r6,r16
    4238:	000f883a 	mov	r7,zero
    423c:	403ee83a 	callr	r8
    4240:	8080261e 	bne	r16,r2,42dc <_fflush_r+0x128>
    4244:	9080030b 	ldhu	r2,12(r18)
    4248:	91000417 	ldw	r4,16(r18)
    424c:	90000115 	stw	zero,4(r18)
    4250:	10bdffcc 	andi	r2,r2,63487
    4254:	10ffffcc 	andi	r3,r2,65535
    4258:	18c4000c 	andi	r3,r3,4096
    425c:	9080030d 	sth	r2,12(r18)
    4260:	91000015 	stw	r4,0(r18)
    4264:	18002b26 	beq	r3,zero,4314 <_fflush_r+0x160>
    4268:	0007883a 	mov	r3,zero
    426c:	1805883a 	mov	r2,r3
    4270:	94001415 	stw	r16,80(r18)
    4274:	dfc00417 	ldw	ra,16(sp)
    4278:	dcc00317 	ldw	r19,12(sp)
    427c:	dc800217 	ldw	r18,8(sp)
    4280:	dc400117 	ldw	r17,4(sp)
    4284:	dc000017 	ldw	r16,0(sp)
    4288:	dec00504 	addi	sp,sp,20
    428c:	f800283a 	ret
    4290:	94400417 	ldw	r17,16(r18)
    4294:	88001f26 	beq	r17,zero,4314 <_fflush_r+0x160>
    4298:	90800017 	ldw	r2,0(r18)
    429c:	18c000cc 	andi	r3,r3,3
    42a0:	94400015 	stw	r17,0(r18)
    42a4:	1461c83a 	sub	r16,r2,r17
    42a8:	18002526 	beq	r3,zero,4340 <_fflush_r+0x18c>
    42ac:	0005883a 	mov	r2,zero
    42b0:	90800215 	stw	r2,8(r18)
    42b4:	0400170e 	bge	zero,r16,4314 <_fflush_r+0x160>
    42b8:	90c00917 	ldw	r3,36(r18)
    42bc:	91400717 	ldw	r5,28(r18)
    42c0:	880d883a 	mov	r6,r17
    42c4:	800f883a 	mov	r7,r16
    42c8:	9809883a 	mov	r4,r19
    42cc:	183ee83a 	callr	r3
    42d0:	88a3883a 	add	r17,r17,r2
    42d4:	80a1c83a 	sub	r16,r16,r2
    42d8:	00bff616 	blt	zero,r2,42b4 <_fflush_r+0x100>
    42dc:	9080030b 	ldhu	r2,12(r18)
    42e0:	00ffffc4 	movi	r3,-1
    42e4:	10801014 	ori	r2,r2,64
    42e8:	9080030d 	sth	r2,12(r18)
    42ec:	1805883a 	mov	r2,r3
    42f0:	dfc00417 	ldw	ra,16(sp)
    42f4:	dcc00317 	ldw	r19,12(sp)
    42f8:	dc800217 	ldw	r18,8(sp)
    42fc:	dc400117 	ldw	r17,4(sp)
    4300:	dc000017 	ldw	r16,0(sp)
    4304:	dec00504 	addi	sp,sp,20
    4308:	f800283a 	ret
    430c:	90800f17 	ldw	r2,60(r18)
    4310:	00bfbe16 	blt	zero,r2,420c <_fflush_r+0x58>
    4314:	0007883a 	mov	r3,zero
    4318:	1805883a 	mov	r2,r3
    431c:	dfc00417 	ldw	ra,16(sp)
    4320:	dcc00317 	ldw	r19,12(sp)
    4324:	dc800217 	ldw	r18,8(sp)
    4328:	dc400117 	ldw	r17,4(sp)
    432c:	dc000017 	ldw	r16,0(sp)
    4330:	dec00504 	addi	sp,sp,20
    4334:	f800283a 	ret
    4338:	000444c0 	call	444c <__sinit>
    433c:	003fa806 	br	41e0 <_fflush_r+0x2c>
    4340:	90800517 	ldw	r2,20(r18)
    4344:	90800215 	stw	r2,8(r18)
    4348:	003fda06 	br	42b4 <_fflush_r+0x100>
    434c:	90800117 	ldw	r2,4(r18)
    4350:	90c00c17 	ldw	r3,48(r18)
    4354:	80a1c83a 	sub	r16,r16,r2
    4358:	183fb426 	beq	r3,zero,422c <_fflush_r+0x78>
    435c:	90800f17 	ldw	r2,60(r18)
    4360:	80a1c83a 	sub	r16,r16,r2
    4364:	003fb106 	br	422c <_fflush_r+0x78>
    4368:	91400717 	ldw	r5,28(r18)
    436c:	9809883a 	mov	r4,r19
    4370:	000d883a 	mov	r6,zero
    4374:	01c00044 	movi	r7,1
    4378:	403ee83a 	callr	r8
    437c:	1021883a 	mov	r16,r2
    4380:	00bfffc4 	movi	r2,-1
    4384:	80800226 	beq	r16,r2,4390 <_fflush_r+0x1dc>
    4388:	92000a17 	ldw	r8,40(r18)
    438c:	003fa406 	br	4220 <_fflush_r+0x6c>
    4390:	98c00017 	ldw	r3,0(r19)
    4394:	00800744 	movi	r2,29
    4398:	18bfde26 	beq	r3,r2,4314 <_fflush_r+0x160>
    439c:	9080030b 	ldhu	r2,12(r18)
    43a0:	8007883a 	mov	r3,r16
    43a4:	10801014 	ori	r2,r2,64
    43a8:	9080030d 	sth	r2,12(r18)
    43ac:	003fcf06 	br	42ec <_fflush_r+0x138>

000043b0 <fflush>:
    43b0:	01400034 	movhi	r5,0
    43b4:	29506d04 	addi	r5,r5,16820
    43b8:	2007883a 	mov	r3,r4
    43bc:	20000526 	beq	r4,zero,43d4 <fflush+0x24>
    43c0:	00800074 	movhi	r2,1
    43c4:	10b4cc04 	addi	r2,r2,-11472
    43c8:	11000017 	ldw	r4,0(r2)
    43cc:	180b883a 	mov	r5,r3
    43d0:	00041b41 	jmpi	41b4 <_fflush_r>
    43d4:	00800074 	movhi	r2,1
    43d8:	10b4cd04 	addi	r2,r2,-11468
    43dc:	11000017 	ldw	r4,0(r2)
    43e0:	0004f801 	jmpi	4f80 <_fwalk_reent>

000043e4 <std>:
    43e4:	00800034 	movhi	r2,0
    43e8:	109d1704 	addi	r2,r2,29788
    43ec:	20800b15 	stw	r2,44(r4)
    43f0:	00800034 	movhi	r2,0
    43f4:	109d5204 	addi	r2,r2,30024
    43f8:	20800815 	stw	r2,32(r4)
    43fc:	00c00034 	movhi	r3,0
    4400:	18dd3304 	addi	r3,r3,29900
    4404:	00800034 	movhi	r2,0
    4408:	109d1904 	addi	r2,r2,29796
    440c:	2140030d 	sth	r5,12(r4)
    4410:	2180038d 	sth	r6,14(r4)
    4414:	20c00915 	stw	r3,36(r4)
    4418:	20800a15 	stw	r2,40(r4)
    441c:	20000015 	stw	zero,0(r4)
    4420:	20000115 	stw	zero,4(r4)
    4424:	20000215 	stw	zero,8(r4)
    4428:	20000415 	stw	zero,16(r4)
    442c:	20000515 	stw	zero,20(r4)
    4430:	20000615 	stw	zero,24(r4)
    4434:	21000715 	stw	r4,28(r4)
    4438:	f800283a 	ret

0000443c <__sfp_lock_acquire>:
    443c:	f800283a 	ret

00004440 <__sfp_lock_release>:
    4440:	f800283a 	ret

00004444 <__sinit_lock_acquire>:
    4444:	f800283a 	ret

00004448 <__sinit_lock_release>:
    4448:	f800283a 	ret

0000444c <__sinit>:
    444c:	20800e17 	ldw	r2,56(r4)
    4450:	defffd04 	addi	sp,sp,-12
    4454:	dc400115 	stw	r17,4(sp)
    4458:	dc000015 	stw	r16,0(sp)
    445c:	dfc00215 	stw	ra,8(sp)
    4460:	04400044 	movi	r17,1
    4464:	01400104 	movi	r5,4
    4468:	000d883a 	mov	r6,zero
    446c:	2021883a 	mov	r16,r4
    4470:	2200bb04 	addi	r8,r4,748
    4474:	200f883a 	mov	r7,r4
    4478:	10000526 	beq	r2,zero,4490 <__sinit+0x44>
    447c:	dfc00217 	ldw	ra,8(sp)
    4480:	dc400117 	ldw	r17,4(sp)
    4484:	dc000017 	ldw	r16,0(sp)
    4488:	dec00304 	addi	sp,sp,12
    448c:	f800283a 	ret
    4490:	21000117 	ldw	r4,4(r4)
    4494:	00800034 	movhi	r2,0
    4498:	10914c04 	addi	r2,r2,17712
    449c:	00c000c4 	movi	r3,3
    44a0:	80800f15 	stw	r2,60(r16)
    44a4:	80c0b915 	stw	r3,740(r16)
    44a8:	8200ba15 	stw	r8,744(r16)
    44ac:	84400e15 	stw	r17,56(r16)
    44b0:	8000b815 	stw	zero,736(r16)
    44b4:	00043e40 	call	43e4 <std>
    44b8:	81000217 	ldw	r4,8(r16)
    44bc:	880d883a 	mov	r6,r17
    44c0:	800f883a 	mov	r7,r16
    44c4:	01400284 	movi	r5,10
    44c8:	00043e40 	call	43e4 <std>
    44cc:	81000317 	ldw	r4,12(r16)
    44d0:	800f883a 	mov	r7,r16
    44d4:	01400484 	movi	r5,18
    44d8:	01800084 	movi	r6,2
    44dc:	dfc00217 	ldw	ra,8(sp)
    44e0:	dc400117 	ldw	r17,4(sp)
    44e4:	dc000017 	ldw	r16,0(sp)
    44e8:	dec00304 	addi	sp,sp,12
    44ec:	00043e41 	jmpi	43e4 <std>

000044f0 <__fp_lock>:
    44f0:	0005883a 	mov	r2,zero
    44f4:	f800283a 	ret

000044f8 <__fp_unlock>:
    44f8:	0005883a 	mov	r2,zero
    44fc:	f800283a 	ret

00004500 <__fp_unlock_all>:
    4500:	00800074 	movhi	r2,1
    4504:	10b4cc04 	addi	r2,r2,-11472
    4508:	11000017 	ldw	r4,0(r2)
    450c:	01400034 	movhi	r5,0
    4510:	29513e04 	addi	r5,r5,17656
    4514:	00050481 	jmpi	5048 <_fwalk>

00004518 <__fp_lock_all>:
    4518:	00800074 	movhi	r2,1
    451c:	10b4cc04 	addi	r2,r2,-11472
    4520:	11000017 	ldw	r4,0(r2)
    4524:	01400034 	movhi	r5,0
    4528:	29513c04 	addi	r5,r5,17648
    452c:	00050481 	jmpi	5048 <_fwalk>

00004530 <_cleanup_r>:
    4530:	01400034 	movhi	r5,0
    4534:	295e6104 	addi	r5,r5,31108
    4538:	00050481 	jmpi	5048 <_fwalk>

0000453c <_cleanup>:
    453c:	00800074 	movhi	r2,1
    4540:	10b4cd04 	addi	r2,r2,-11468
    4544:	11000017 	ldw	r4,0(r2)
    4548:	00045301 	jmpi	4530 <_cleanup_r>

0000454c <__sfmoreglue>:
    454c:	defffc04 	addi	sp,sp,-16
    4550:	dc400115 	stw	r17,4(sp)
    4554:	2c401724 	muli	r17,r5,92
    4558:	dc800215 	stw	r18,8(sp)
    455c:	2825883a 	mov	r18,r5
    4560:	89400304 	addi	r5,r17,12
    4564:	dc000015 	stw	r16,0(sp)
    4568:	dfc00315 	stw	ra,12(sp)
    456c:	00053580 	call	5358 <_malloc_r>
    4570:	0021883a 	mov	r16,zero
    4574:	880d883a 	mov	r6,r17
    4578:	000b883a 	mov	r5,zero
    457c:	10000626 	beq	r2,zero,4598 <__sfmoreglue+0x4c>
    4580:	11000304 	addi	r4,r2,12
    4584:	14800115 	stw	r18,4(r2)
    4588:	10000015 	stw	zero,0(r2)
    458c:	11000215 	stw	r4,8(r2)
    4590:	1021883a 	mov	r16,r2
    4594:	0005cfc0 	call	5cfc <memset>
    4598:	8005883a 	mov	r2,r16
    459c:	dfc00317 	ldw	ra,12(sp)
    45a0:	dc800217 	ldw	r18,8(sp)
    45a4:	dc400117 	ldw	r17,4(sp)
    45a8:	dc000017 	ldw	r16,0(sp)
    45ac:	dec00404 	addi	sp,sp,16
    45b0:	f800283a 	ret

000045b4 <__sfp>:
    45b4:	defffd04 	addi	sp,sp,-12
    45b8:	00800074 	movhi	r2,1
    45bc:	10b4cd04 	addi	r2,r2,-11468
    45c0:	dc000015 	stw	r16,0(sp)
    45c4:	14000017 	ldw	r16,0(r2)
    45c8:	dc400115 	stw	r17,4(sp)
    45cc:	dfc00215 	stw	ra,8(sp)
    45d0:	80800e17 	ldw	r2,56(r16)
    45d4:	2023883a 	mov	r17,r4
    45d8:	10002626 	beq	r2,zero,4674 <__sfp+0xc0>
    45dc:	8400b804 	addi	r16,r16,736
    45e0:	80800117 	ldw	r2,4(r16)
    45e4:	81000217 	ldw	r4,8(r16)
    45e8:	10ffffc4 	addi	r3,r2,-1
    45ec:	18000916 	blt	r3,zero,4614 <__sfp+0x60>
    45f0:	2080030f 	ldh	r2,12(r4)
    45f4:	10000b26 	beq	r2,zero,4624 <__sfp+0x70>
    45f8:	017fffc4 	movi	r5,-1
    45fc:	00000206 	br	4608 <__sfp+0x54>
    4600:	2080030f 	ldh	r2,12(r4)
    4604:	10000726 	beq	r2,zero,4624 <__sfp+0x70>
    4608:	18ffffc4 	addi	r3,r3,-1
    460c:	21001704 	addi	r4,r4,92
    4610:	197ffb1e 	bne	r3,r5,4600 <__sfp+0x4c>
    4614:	80800017 	ldw	r2,0(r16)
    4618:	10001926 	beq	r2,zero,4680 <__sfp+0xcc>
    461c:	1021883a 	mov	r16,r2
    4620:	003fef06 	br	45e0 <__sfp+0x2c>
    4624:	00bfffc4 	movi	r2,-1
    4628:	00c00044 	movi	r3,1
    462c:	2080038d 	sth	r2,14(r4)
    4630:	20c0030d 	sth	r3,12(r4)
    4634:	20000015 	stw	zero,0(r4)
    4638:	20000215 	stw	zero,8(r4)
    463c:	20000115 	stw	zero,4(r4)
    4640:	20000415 	stw	zero,16(r4)
    4644:	20000515 	stw	zero,20(r4)
    4648:	20000615 	stw	zero,24(r4)
    464c:	20000c15 	stw	zero,48(r4)
    4650:	20000d15 	stw	zero,52(r4)
    4654:	20001115 	stw	zero,68(r4)
    4658:	20001215 	stw	zero,72(r4)
    465c:	2005883a 	mov	r2,r4
    4660:	dfc00217 	ldw	ra,8(sp)
    4664:	dc400117 	ldw	r17,4(sp)
    4668:	dc000017 	ldw	r16,0(sp)
    466c:	dec00304 	addi	sp,sp,12
    4670:	f800283a 	ret
    4674:	8009883a 	mov	r4,r16
    4678:	000444c0 	call	444c <__sinit>
    467c:	003fd706 	br	45dc <__sfp+0x28>
    4680:	8809883a 	mov	r4,r17
    4684:	01400104 	movi	r5,4
    4688:	000454c0 	call	454c <__sfmoreglue>
    468c:	80800015 	stw	r2,0(r16)
    4690:	103fe21e 	bne	r2,zero,461c <__sfp+0x68>
    4694:	00800304 	movi	r2,12
    4698:	0009883a 	mov	r4,zero
    469c:	88800015 	stw	r2,0(r17)
    46a0:	003fee06 	br	465c <__sfp+0xa8>

000046a4 <_malloc_trim_r>:
    46a4:	defffb04 	addi	sp,sp,-20
    46a8:	dcc00315 	stw	r19,12(sp)
    46ac:	04c00074 	movhi	r19,1
    46b0:	9cf32f04 	addi	r19,r19,-13124
    46b4:	dc800215 	stw	r18,8(sp)
    46b8:	dc400115 	stw	r17,4(sp)
    46bc:	dc000015 	stw	r16,0(sp)
    46c0:	2823883a 	mov	r17,r5
    46c4:	2025883a 	mov	r18,r4
    46c8:	dfc00415 	stw	ra,16(sp)
    46cc:	000a4d40 	call	a4d4 <__malloc_lock>
    46d0:	98800217 	ldw	r2,8(r19)
    46d4:	9009883a 	mov	r4,r18
    46d8:	000b883a 	mov	r5,zero
    46dc:	10c00117 	ldw	r3,4(r2)
    46e0:	00bfff04 	movi	r2,-4
    46e4:	18a0703a 	and	r16,r3,r2
    46e8:	8463c83a 	sub	r17,r16,r17
    46ec:	8c43fbc4 	addi	r17,r17,4079
    46f0:	8822d33a 	srli	r17,r17,12
    46f4:	0083ffc4 	movi	r2,4095
    46f8:	8c7fffc4 	addi	r17,r17,-1
    46fc:	8822933a 	slli	r17,r17,12
    4700:	1440060e 	bge	r2,r17,471c <_malloc_trim_r+0x78>
    4704:	00073ec0 	call	73ec <_sbrk_r>
    4708:	98c00217 	ldw	r3,8(r19)
    470c:	9009883a 	mov	r4,r18
    4710:	044bc83a 	sub	r5,zero,r17
    4714:	80c7883a 	add	r3,r16,r3
    4718:	10c00926 	beq	r2,r3,4740 <_malloc_trim_r+0x9c>
    471c:	000a4f40 	call	a4f4 <__malloc_unlock>
    4720:	0005883a 	mov	r2,zero
    4724:	dfc00417 	ldw	ra,16(sp)
    4728:	dcc00317 	ldw	r19,12(sp)
    472c:	dc800217 	ldw	r18,8(sp)
    4730:	dc400117 	ldw	r17,4(sp)
    4734:	dc000017 	ldw	r16,0(sp)
    4738:	dec00504 	addi	sp,sp,20
    473c:	f800283a 	ret
    4740:	9009883a 	mov	r4,r18
    4744:	00073ec0 	call	73ec <_sbrk_r>
    4748:	844dc83a 	sub	r6,r16,r17
    474c:	00ffffc4 	movi	r3,-1
    4750:	9009883a 	mov	r4,r18
    4754:	000b883a 	mov	r5,zero
    4758:	01c00074 	movhi	r7,1
    475c:	39f7a304 	addi	r7,r7,-8564
    4760:	31800054 	ori	r6,r6,1
    4764:	10c00926 	beq	r2,r3,478c <_malloc_trim_r+0xe8>
    4768:	38800017 	ldw	r2,0(r7)
    476c:	98c00217 	ldw	r3,8(r19)
    4770:	9009883a 	mov	r4,r18
    4774:	1445c83a 	sub	r2,r2,r17
    4778:	38800015 	stw	r2,0(r7)
    477c:	19800115 	stw	r6,4(r3)
    4780:	000a4f40 	call	a4f4 <__malloc_unlock>
    4784:	00800044 	movi	r2,1
    4788:	003fe606 	br	4724 <_malloc_trim_r+0x80>
    478c:	00073ec0 	call	73ec <_sbrk_r>
    4790:	99800217 	ldw	r6,8(r19)
    4794:	100f883a 	mov	r7,r2
    4798:	9009883a 	mov	r4,r18
    479c:	1187c83a 	sub	r3,r2,r6
    47a0:	008003c4 	movi	r2,15
    47a4:	19400054 	ori	r5,r3,1
    47a8:	10ffdc0e 	bge	r2,r3,471c <_malloc_trim_r+0x78>
    47ac:	00800074 	movhi	r2,1
    47b0:	10b4d104 	addi	r2,r2,-11452
    47b4:	10c00017 	ldw	r3,0(r2)
    47b8:	00800074 	movhi	r2,1
    47bc:	10b7a304 	addi	r2,r2,-8564
    47c0:	31400115 	stw	r5,4(r6)
    47c4:	38c7c83a 	sub	r3,r7,r3
    47c8:	10c00015 	stw	r3,0(r2)
    47cc:	003fd306 	br	471c <_malloc_trim_r+0x78>

000047d0 <_free_r>:
    47d0:	defffd04 	addi	sp,sp,-12
    47d4:	dc400115 	stw	r17,4(sp)
    47d8:	dc000015 	stw	r16,0(sp)
    47dc:	dfc00215 	stw	ra,8(sp)
    47e0:	2821883a 	mov	r16,r5
    47e4:	2023883a 	mov	r17,r4
    47e8:	28005a26 	beq	r5,zero,4954 <_free_r+0x184>
    47ec:	000a4d40 	call	a4d4 <__malloc_lock>
    47f0:	823ffe04 	addi	r8,r16,-8
    47f4:	41400117 	ldw	r5,4(r8)
    47f8:	00bfff84 	movi	r2,-2
    47fc:	02800074 	movhi	r10,1
    4800:	52b32f04 	addi	r10,r10,-13124
    4804:	288e703a 	and	r7,r5,r2
    4808:	41cd883a 	add	r6,r8,r7
    480c:	30c00117 	ldw	r3,4(r6)
    4810:	51000217 	ldw	r4,8(r10)
    4814:	00bfff04 	movi	r2,-4
    4818:	1892703a 	and	r9,r3,r2
    481c:	5017883a 	mov	r11,r10
    4820:	31006726 	beq	r6,r4,49c0 <_free_r+0x1f0>
    4824:	2880004c 	andi	r2,r5,1
    4828:	1005003a 	cmpeq	r2,r2,zero
    482c:	32400115 	stw	r9,4(r6)
    4830:	10001a1e 	bne	r2,zero,489c <_free_r+0xcc>
    4834:	000b883a 	mov	r5,zero
    4838:	3247883a 	add	r3,r6,r9
    483c:	18800117 	ldw	r2,4(r3)
    4840:	1080004c 	andi	r2,r2,1
    4844:	1000231e 	bne	r2,zero,48d4 <_free_r+0x104>
    4848:	280ac03a 	cmpne	r5,r5,zero
    484c:	3a4f883a 	add	r7,r7,r9
    4850:	2800451e 	bne	r5,zero,4968 <_free_r+0x198>
    4854:	31000217 	ldw	r4,8(r6)
    4858:	00800074 	movhi	r2,1
    485c:	10b33104 	addi	r2,r2,-13116
    4860:	20807b26 	beq	r4,r2,4a50 <_free_r+0x280>
    4864:	30800317 	ldw	r2,12(r6)
    4868:	3a07883a 	add	r3,r7,r8
    486c:	19c00015 	stw	r7,0(r3)
    4870:	11000215 	stw	r4,8(r2)
    4874:	20800315 	stw	r2,12(r4)
    4878:	38800054 	ori	r2,r7,1
    487c:	40800115 	stw	r2,4(r8)
    4880:	28001a26 	beq	r5,zero,48ec <_free_r+0x11c>
    4884:	8809883a 	mov	r4,r17
    4888:	dfc00217 	ldw	ra,8(sp)
    488c:	dc400117 	ldw	r17,4(sp)
    4890:	dc000017 	ldw	r16,0(sp)
    4894:	dec00304 	addi	sp,sp,12
    4898:	000a4f41 	jmpi	a4f4 <__malloc_unlock>
    489c:	80bffe17 	ldw	r2,-8(r16)
    48a0:	50c00204 	addi	r3,r10,8
    48a4:	4091c83a 	sub	r8,r8,r2
    48a8:	41000217 	ldw	r4,8(r8)
    48ac:	388f883a 	add	r7,r7,r2
    48b0:	20c06126 	beq	r4,r3,4a38 <_free_r+0x268>
    48b4:	40800317 	ldw	r2,12(r8)
    48b8:	3247883a 	add	r3,r6,r9
    48bc:	000b883a 	mov	r5,zero
    48c0:	11000215 	stw	r4,8(r2)
    48c4:	20800315 	stw	r2,12(r4)
    48c8:	18800117 	ldw	r2,4(r3)
    48cc:	1080004c 	andi	r2,r2,1
    48d0:	103fdd26 	beq	r2,zero,4848 <_free_r+0x78>
    48d4:	38800054 	ori	r2,r7,1
    48d8:	3a07883a 	add	r3,r7,r8
    48dc:	280ac03a 	cmpne	r5,r5,zero
    48e0:	40800115 	stw	r2,4(r8)
    48e4:	19c00015 	stw	r7,0(r3)
    48e8:	283fe61e 	bne	r5,zero,4884 <_free_r+0xb4>
    48ec:	00807fc4 	movi	r2,511
    48f0:	11c01f2e 	bgeu	r2,r7,4970 <_free_r+0x1a0>
    48f4:	3806d27a 	srli	r3,r7,9
    48f8:	1800481e 	bne	r3,zero,4a1c <_free_r+0x24c>
    48fc:	3804d0fa 	srli	r2,r7,3
    4900:	100690fa 	slli	r3,r2,3
    4904:	1acd883a 	add	r6,r3,r11
    4908:	31400217 	ldw	r5,8(r6)
    490c:	31405926 	beq	r6,r5,4a74 <_free_r+0x2a4>
    4910:	28800117 	ldw	r2,4(r5)
    4914:	00ffff04 	movi	r3,-4
    4918:	10c4703a 	and	r2,r2,r3
    491c:	3880022e 	bgeu	r7,r2,4928 <_free_r+0x158>
    4920:	29400217 	ldw	r5,8(r5)
    4924:	317ffa1e 	bne	r6,r5,4910 <_free_r+0x140>
    4928:	29800317 	ldw	r6,12(r5)
    492c:	41800315 	stw	r6,12(r8)
    4930:	41400215 	stw	r5,8(r8)
    4934:	8809883a 	mov	r4,r17
    4938:	2a000315 	stw	r8,12(r5)
    493c:	32000215 	stw	r8,8(r6)
    4940:	dfc00217 	ldw	ra,8(sp)
    4944:	dc400117 	ldw	r17,4(sp)
    4948:	dc000017 	ldw	r16,0(sp)
    494c:	dec00304 	addi	sp,sp,12
    4950:	000a4f41 	jmpi	a4f4 <__malloc_unlock>
    4954:	dfc00217 	ldw	ra,8(sp)
    4958:	dc400117 	ldw	r17,4(sp)
    495c:	dc000017 	ldw	r16,0(sp)
    4960:	dec00304 	addi	sp,sp,12
    4964:	f800283a 	ret
    4968:	31000217 	ldw	r4,8(r6)
    496c:	003fbd06 	br	4864 <_free_r+0x94>
    4970:	3806d0fa 	srli	r3,r7,3
    4974:	00800044 	movi	r2,1
    4978:	51400117 	ldw	r5,4(r10)
    497c:	180890fa 	slli	r4,r3,3
    4980:	1807d0ba 	srai	r3,r3,2
    4984:	22c9883a 	add	r4,r4,r11
    4988:	21800217 	ldw	r6,8(r4)
    498c:	10c4983a 	sll	r2,r2,r3
    4990:	41000315 	stw	r4,12(r8)
    4994:	41800215 	stw	r6,8(r8)
    4998:	288ab03a 	or	r5,r5,r2
    499c:	22000215 	stw	r8,8(r4)
    49a0:	8809883a 	mov	r4,r17
    49a4:	51400115 	stw	r5,4(r10)
    49a8:	32000315 	stw	r8,12(r6)
    49ac:	dfc00217 	ldw	ra,8(sp)
    49b0:	dc400117 	ldw	r17,4(sp)
    49b4:	dc000017 	ldw	r16,0(sp)
    49b8:	dec00304 	addi	sp,sp,12
    49bc:	000a4f41 	jmpi	a4f4 <__malloc_unlock>
    49c0:	2880004c 	andi	r2,r5,1
    49c4:	3a4d883a 	add	r6,r7,r9
    49c8:	1000071e 	bne	r2,zero,49e8 <_free_r+0x218>
    49cc:	80bffe17 	ldw	r2,-8(r16)
    49d0:	4091c83a 	sub	r8,r8,r2
    49d4:	41000317 	ldw	r4,12(r8)
    49d8:	40c00217 	ldw	r3,8(r8)
    49dc:	308d883a 	add	r6,r6,r2
    49e0:	20c00215 	stw	r3,8(r4)
    49e4:	19000315 	stw	r4,12(r3)
    49e8:	00800074 	movhi	r2,1
    49ec:	10b4d004 	addi	r2,r2,-11456
    49f0:	11000017 	ldw	r4,0(r2)
    49f4:	30c00054 	ori	r3,r6,1
    49f8:	52000215 	stw	r8,8(r10)
    49fc:	40c00115 	stw	r3,4(r8)
    4a00:	313fa036 	bltu	r6,r4,4884 <_free_r+0xb4>
    4a04:	00800074 	movhi	r2,1
    4a08:	10b79304 	addi	r2,r2,-8628
    4a0c:	11400017 	ldw	r5,0(r2)
    4a10:	8809883a 	mov	r4,r17
    4a14:	00046a40 	call	46a4 <_malloc_trim_r>
    4a18:	003f9a06 	br	4884 <_free_r+0xb4>
    4a1c:	00800104 	movi	r2,4
    4a20:	10c0072e 	bgeu	r2,r3,4a40 <_free_r+0x270>
    4a24:	00800504 	movi	r2,20
    4a28:	10c01936 	bltu	r2,r3,4a90 <_free_r+0x2c0>
    4a2c:	188016c4 	addi	r2,r3,91
    4a30:	100690fa 	slli	r3,r2,3
    4a34:	003fb306 	br	4904 <_free_r+0x134>
    4a38:	01400044 	movi	r5,1
    4a3c:	003f7e06 	br	4838 <_free_r+0x68>
    4a40:	3804d1ba 	srli	r2,r7,6
    4a44:	10800e04 	addi	r2,r2,56
    4a48:	100690fa 	slli	r3,r2,3
    4a4c:	003fad06 	br	4904 <_free_r+0x134>
    4a50:	22000315 	stw	r8,12(r4)
    4a54:	22000215 	stw	r8,8(r4)
    4a58:	3a05883a 	add	r2,r7,r8
    4a5c:	38c00054 	ori	r3,r7,1
    4a60:	11c00015 	stw	r7,0(r2)
    4a64:	41000215 	stw	r4,8(r8)
    4a68:	40c00115 	stw	r3,4(r8)
    4a6c:	41000315 	stw	r4,12(r8)
    4a70:	003f8406 	br	4884 <_free_r+0xb4>
    4a74:	1005d0ba 	srai	r2,r2,2
    4a78:	00c00044 	movi	r3,1
    4a7c:	51000117 	ldw	r4,4(r10)
    4a80:	1886983a 	sll	r3,r3,r2
    4a84:	20c8b03a 	or	r4,r4,r3
    4a88:	51000115 	stw	r4,4(r10)
    4a8c:	003fa706 	br	492c <_free_r+0x15c>
    4a90:	00801504 	movi	r2,84
    4a94:	10c00436 	bltu	r2,r3,4aa8 <_free_r+0x2d8>
    4a98:	3804d33a 	srli	r2,r7,12
    4a9c:	10801b84 	addi	r2,r2,110
    4aa0:	100690fa 	slli	r3,r2,3
    4aa4:	003f9706 	br	4904 <_free_r+0x134>
    4aa8:	00805504 	movi	r2,340
    4aac:	10c00436 	bltu	r2,r3,4ac0 <_free_r+0x2f0>
    4ab0:	3804d3fa 	srli	r2,r7,15
    4ab4:	10801dc4 	addi	r2,r2,119
    4ab8:	100690fa 	slli	r3,r2,3
    4abc:	003f9106 	br	4904 <_free_r+0x134>
    4ac0:	00815504 	movi	r2,1364
    4ac4:	10c0032e 	bgeu	r2,r3,4ad4 <_free_r+0x304>
    4ac8:	00801f84 	movi	r2,126
    4acc:	00c0fc04 	movi	r3,1008
    4ad0:	003f8c06 	br	4904 <_free_r+0x134>
    4ad4:	3804d4ba 	srli	r2,r7,18
    4ad8:	10801f04 	addi	r2,r2,124
    4adc:	100690fa 	slli	r3,r2,3
    4ae0:	003f8806 	br	4904 <_free_r+0x134>

00004ae4 <__sfvwrite_r>:
    4ae4:	30800217 	ldw	r2,8(r6)
    4ae8:	defff504 	addi	sp,sp,-44
    4aec:	df000915 	stw	fp,36(sp)
    4af0:	dd800715 	stw	r22,28(sp)
    4af4:	dc800315 	stw	r18,12(sp)
    4af8:	dfc00a15 	stw	ra,40(sp)
    4afc:	ddc00815 	stw	r23,32(sp)
    4b00:	dd400615 	stw	r21,24(sp)
    4b04:	dd000515 	stw	r20,20(sp)
    4b08:	dcc00415 	stw	r19,16(sp)
    4b0c:	dc400215 	stw	r17,8(sp)
    4b10:	dc000115 	stw	r16,4(sp)
    4b14:	302d883a 	mov	r22,r6
    4b18:	2039883a 	mov	fp,r4
    4b1c:	2825883a 	mov	r18,r5
    4b20:	10001c26 	beq	r2,zero,4b94 <__sfvwrite_r+0xb0>
    4b24:	29c0030b 	ldhu	r7,12(r5)
    4b28:	3880020c 	andi	r2,r7,8
    4b2c:	10002726 	beq	r2,zero,4bcc <__sfvwrite_r+0xe8>
    4b30:	28800417 	ldw	r2,16(r5)
    4b34:	10002526 	beq	r2,zero,4bcc <__sfvwrite_r+0xe8>
    4b38:	3880008c 	andi	r2,r7,2
    4b3c:	b5400017 	ldw	r21,0(r22)
    4b40:	10002826 	beq	r2,zero,4be4 <__sfvwrite_r+0x100>
    4b44:	0021883a 	mov	r16,zero
    4b48:	0023883a 	mov	r17,zero
    4b4c:	880d883a 	mov	r6,r17
    4b50:	e009883a 	mov	r4,fp
    4b54:	00810004 	movi	r2,1024
    4b58:	80006e26 	beq	r16,zero,4d14 <__sfvwrite_r+0x230>
    4b5c:	800f883a 	mov	r7,r16
    4b60:	91400717 	ldw	r5,28(r18)
    4b64:	1400012e 	bgeu	r2,r16,4b6c <__sfvwrite_r+0x88>
    4b68:	100f883a 	mov	r7,r2
    4b6c:	90c00917 	ldw	r3,36(r18)
    4b70:	183ee83a 	callr	r3
    4b74:	1007883a 	mov	r3,r2
    4b78:	80a1c83a 	sub	r16,r16,r2
    4b7c:	88a3883a 	add	r17,r17,r2
    4b80:	00806d0e 	bge	zero,r2,4d38 <__sfvwrite_r+0x254>
    4b84:	b0800217 	ldw	r2,8(r22)
    4b88:	10c5c83a 	sub	r2,r2,r3
    4b8c:	b0800215 	stw	r2,8(r22)
    4b90:	103fee1e 	bne	r2,zero,4b4c <__sfvwrite_r+0x68>
    4b94:	0009883a 	mov	r4,zero
    4b98:	2005883a 	mov	r2,r4
    4b9c:	dfc00a17 	ldw	ra,40(sp)
    4ba0:	df000917 	ldw	fp,36(sp)
    4ba4:	ddc00817 	ldw	r23,32(sp)
    4ba8:	dd800717 	ldw	r22,28(sp)
    4bac:	dd400617 	ldw	r21,24(sp)
    4bb0:	dd000517 	ldw	r20,20(sp)
    4bb4:	dcc00417 	ldw	r19,16(sp)
    4bb8:	dc800317 	ldw	r18,12(sp)
    4bbc:	dc400217 	ldw	r17,8(sp)
    4bc0:	dc000117 	ldw	r16,4(sp)
    4bc4:	dec00b04 	addi	sp,sp,44
    4bc8:	f800283a 	ret
    4bcc:	00028ac0 	call	28ac <__swsetup_r>
    4bd0:	1000e41e 	bne	r2,zero,4f64 <__sfvwrite_r+0x480>
    4bd4:	91c0030b 	ldhu	r7,12(r18)
    4bd8:	b5400017 	ldw	r21,0(r22)
    4bdc:	3880008c 	andi	r2,r7,2
    4be0:	103fd81e 	bne	r2,zero,4b44 <__sfvwrite_r+0x60>
    4be4:	3880004c 	andi	r2,r7,1
    4be8:	1005003a 	cmpeq	r2,r2,zero
    4bec:	10005726 	beq	r2,zero,4d4c <__sfvwrite_r+0x268>
    4bf0:	0029883a 	mov	r20,zero
    4bf4:	002f883a 	mov	r23,zero
    4bf8:	a0004226 	beq	r20,zero,4d04 <__sfvwrite_r+0x220>
    4bfc:	3880800c 	andi	r2,r7,512
    4c00:	94000217 	ldw	r16,8(r18)
    4c04:	10008b26 	beq	r2,zero,4e34 <__sfvwrite_r+0x350>
    4c08:	800d883a 	mov	r6,r16
    4c0c:	a400a536 	bltu	r20,r16,4ea4 <__sfvwrite_r+0x3c0>
    4c10:	3881200c 	andi	r2,r7,1152
    4c14:	10002726 	beq	r2,zero,4cb4 <__sfvwrite_r+0x1d0>
    4c18:	90800517 	ldw	r2,20(r18)
    4c1c:	92000417 	ldw	r8,16(r18)
    4c20:	91400017 	ldw	r5,0(r18)
    4c24:	1087883a 	add	r3,r2,r2
    4c28:	1887883a 	add	r3,r3,r2
    4c2c:	1808d7fa 	srli	r4,r3,31
    4c30:	2a21c83a 	sub	r16,r5,r8
    4c34:	80800044 	addi	r2,r16,1
    4c38:	20c9883a 	add	r4,r4,r3
    4c3c:	2027d07a 	srai	r19,r4,1
    4c40:	a085883a 	add	r2,r20,r2
    4c44:	980d883a 	mov	r6,r19
    4c48:	9880022e 	bgeu	r19,r2,4c54 <__sfvwrite_r+0x170>
    4c4c:	1027883a 	mov	r19,r2
    4c50:	100d883a 	mov	r6,r2
    4c54:	3881000c 	andi	r2,r7,1024
    4c58:	1000b826 	beq	r2,zero,4f3c <__sfvwrite_r+0x458>
    4c5c:	300b883a 	mov	r5,r6
    4c60:	e009883a 	mov	r4,fp
    4c64:	00053580 	call	5358 <_malloc_r>
    4c68:	10003126 	beq	r2,zero,4d30 <__sfvwrite_r+0x24c>
    4c6c:	91400417 	ldw	r5,16(r18)
    4c70:	1009883a 	mov	r4,r2
    4c74:	800d883a 	mov	r6,r16
    4c78:	1023883a 	mov	r17,r2
    4c7c:	0005b7c0 	call	5b7c <memcpy>
    4c80:	90c0030b 	ldhu	r3,12(r18)
    4c84:	00beffc4 	movi	r2,-1025
    4c88:	1886703a 	and	r3,r3,r2
    4c8c:	18c02014 	ori	r3,r3,128
    4c90:	90c0030d 	sth	r3,12(r18)
    4c94:	9c07c83a 	sub	r3,r19,r16
    4c98:	8c05883a 	add	r2,r17,r16
    4c9c:	a00d883a 	mov	r6,r20
    4ca0:	a021883a 	mov	r16,r20
    4ca4:	90800015 	stw	r2,0(r18)
    4ca8:	90c00215 	stw	r3,8(r18)
    4cac:	94400415 	stw	r17,16(r18)
    4cb0:	94c00515 	stw	r19,20(r18)
    4cb4:	91000017 	ldw	r4,0(r18)
    4cb8:	b80b883a 	mov	r5,r23
    4cbc:	a023883a 	mov	r17,r20
    4cc0:	0005c1c0 	call	5c1c <memmove>
    4cc4:	90c00217 	ldw	r3,8(r18)
    4cc8:	90800017 	ldw	r2,0(r18)
    4ccc:	a027883a 	mov	r19,r20
    4cd0:	1c07c83a 	sub	r3,r3,r16
    4cd4:	1405883a 	add	r2,r2,r16
    4cd8:	90c00215 	stw	r3,8(r18)
    4cdc:	a021883a 	mov	r16,r20
    4ce0:	90800015 	stw	r2,0(r18)
    4ce4:	b0800217 	ldw	r2,8(r22)
    4ce8:	1405c83a 	sub	r2,r2,r16
    4cec:	b0800215 	stw	r2,8(r22)
    4cf0:	103fa826 	beq	r2,zero,4b94 <__sfvwrite_r+0xb0>
    4cf4:	a469c83a 	sub	r20,r20,r17
    4cf8:	91c0030b 	ldhu	r7,12(r18)
    4cfc:	bcef883a 	add	r23,r23,r19
    4d00:	a03fbe1e 	bne	r20,zero,4bfc <__sfvwrite_r+0x118>
    4d04:	adc00017 	ldw	r23,0(r21)
    4d08:	ad000117 	ldw	r20,4(r21)
    4d0c:	ad400204 	addi	r21,r21,8
    4d10:	003fb906 	br	4bf8 <__sfvwrite_r+0x114>
    4d14:	ac400017 	ldw	r17,0(r21)
    4d18:	ac000117 	ldw	r16,4(r21)
    4d1c:	ad400204 	addi	r21,r21,8
    4d20:	003f8a06 	br	4b4c <__sfvwrite_r+0x68>
    4d24:	91400417 	ldw	r5,16(r18)
    4d28:	e009883a 	mov	r4,fp
    4d2c:	00047d00 	call	47d0 <_free_r>
    4d30:	00800304 	movi	r2,12
    4d34:	e0800015 	stw	r2,0(fp)
    4d38:	9080030b 	ldhu	r2,12(r18)
    4d3c:	013fffc4 	movi	r4,-1
    4d40:	10801014 	ori	r2,r2,64
    4d44:	9080030d 	sth	r2,12(r18)
    4d48:	003f9306 	br	4b98 <__sfvwrite_r+0xb4>
    4d4c:	0027883a 	mov	r19,zero
    4d50:	002f883a 	mov	r23,zero
    4d54:	d8000015 	stw	zero,0(sp)
    4d58:	0029883a 	mov	r20,zero
    4d5c:	98001e26 	beq	r19,zero,4dd8 <__sfvwrite_r+0x2f4>
    4d60:	d8c00017 	ldw	r3,0(sp)
    4d64:	1804c03a 	cmpne	r2,r3,zero
    4d68:	10005e26 	beq	r2,zero,4ee4 <__sfvwrite_r+0x400>
    4d6c:	9821883a 	mov	r16,r19
    4d70:	a4c0012e 	bgeu	r20,r19,4d78 <__sfvwrite_r+0x294>
    4d74:	a021883a 	mov	r16,r20
    4d78:	91000017 	ldw	r4,0(r18)
    4d7c:	90800417 	ldw	r2,16(r18)
    4d80:	91800217 	ldw	r6,8(r18)
    4d84:	91c00517 	ldw	r7,20(r18)
    4d88:	1100022e 	bgeu	r2,r4,4d94 <__sfvwrite_r+0x2b0>
    4d8c:	31e3883a 	add	r17,r6,r7
    4d90:	8c001616 	blt	r17,r16,4dec <__sfvwrite_r+0x308>
    4d94:	81c03816 	blt	r16,r7,4e78 <__sfvwrite_r+0x394>
    4d98:	90c00917 	ldw	r3,36(r18)
    4d9c:	91400717 	ldw	r5,28(r18)
    4da0:	e009883a 	mov	r4,fp
    4da4:	b80d883a 	mov	r6,r23
    4da8:	183ee83a 	callr	r3
    4dac:	1023883a 	mov	r17,r2
    4db0:	00bfe10e 	bge	zero,r2,4d38 <__sfvwrite_r+0x254>
    4db4:	a469c83a 	sub	r20,r20,r17
    4db8:	a0001826 	beq	r20,zero,4e1c <__sfvwrite_r+0x338>
    4dbc:	b0800217 	ldw	r2,8(r22)
    4dc0:	1445c83a 	sub	r2,r2,r17
    4dc4:	b0800215 	stw	r2,8(r22)
    4dc8:	103f7226 	beq	r2,zero,4b94 <__sfvwrite_r+0xb0>
    4dcc:	9c67c83a 	sub	r19,r19,r17
    4dd0:	bc6f883a 	add	r23,r23,r17
    4dd4:	983fe21e 	bne	r19,zero,4d60 <__sfvwrite_r+0x27c>
    4dd8:	adc00017 	ldw	r23,0(r21)
    4ddc:	acc00117 	ldw	r19,4(r21)
    4de0:	ad400204 	addi	r21,r21,8
    4de4:	d8000015 	stw	zero,0(sp)
    4de8:	003fdc06 	br	4d5c <__sfvwrite_r+0x278>
    4dec:	b80b883a 	mov	r5,r23
    4df0:	880d883a 	mov	r6,r17
    4df4:	0005c1c0 	call	5c1c <memmove>
    4df8:	90c00017 	ldw	r3,0(r18)
    4dfc:	e009883a 	mov	r4,fp
    4e00:	900b883a 	mov	r5,r18
    4e04:	1c47883a 	add	r3,r3,r17
    4e08:	90c00015 	stw	r3,0(r18)
    4e0c:	00041b40 	call	41b4 <_fflush_r>
    4e10:	103fc91e 	bne	r2,zero,4d38 <__sfvwrite_r+0x254>
    4e14:	a469c83a 	sub	r20,r20,r17
    4e18:	a03fe81e 	bne	r20,zero,4dbc <__sfvwrite_r+0x2d8>
    4e1c:	e009883a 	mov	r4,fp
    4e20:	900b883a 	mov	r5,r18
    4e24:	00041b40 	call	41b4 <_fflush_r>
    4e28:	103fc31e 	bne	r2,zero,4d38 <__sfvwrite_r+0x254>
    4e2c:	d8000015 	stw	zero,0(sp)
    4e30:	003fe206 	br	4dbc <__sfvwrite_r+0x2d8>
    4e34:	91000017 	ldw	r4,0(r18)
    4e38:	90800417 	ldw	r2,16(r18)
    4e3c:	1100022e 	bgeu	r2,r4,4e48 <__sfvwrite_r+0x364>
    4e40:	8023883a 	mov	r17,r16
    4e44:	85003136 	bltu	r16,r20,4f0c <__sfvwrite_r+0x428>
    4e48:	91c00517 	ldw	r7,20(r18)
    4e4c:	a1c01836 	bltu	r20,r7,4eb0 <__sfvwrite_r+0x3cc>
    4e50:	90c00917 	ldw	r3,36(r18)
    4e54:	91400717 	ldw	r5,28(r18)
    4e58:	e009883a 	mov	r4,fp
    4e5c:	b80d883a 	mov	r6,r23
    4e60:	183ee83a 	callr	r3
    4e64:	1021883a 	mov	r16,r2
    4e68:	00bfb30e 	bge	zero,r2,4d38 <__sfvwrite_r+0x254>
    4e6c:	1023883a 	mov	r17,r2
    4e70:	1027883a 	mov	r19,r2
    4e74:	003f9b06 	br	4ce4 <__sfvwrite_r+0x200>
    4e78:	b80b883a 	mov	r5,r23
    4e7c:	800d883a 	mov	r6,r16
    4e80:	0005c1c0 	call	5c1c <memmove>
    4e84:	90c00217 	ldw	r3,8(r18)
    4e88:	90800017 	ldw	r2,0(r18)
    4e8c:	8023883a 	mov	r17,r16
    4e90:	1c07c83a 	sub	r3,r3,r16
    4e94:	1405883a 	add	r2,r2,r16
    4e98:	90c00215 	stw	r3,8(r18)
    4e9c:	90800015 	stw	r2,0(r18)
    4ea0:	003fc406 	br	4db4 <__sfvwrite_r+0x2d0>
    4ea4:	a00d883a 	mov	r6,r20
    4ea8:	a021883a 	mov	r16,r20
    4eac:	003f8106 	br	4cb4 <__sfvwrite_r+0x1d0>
    4eb0:	b80b883a 	mov	r5,r23
    4eb4:	a00d883a 	mov	r6,r20
    4eb8:	0005c1c0 	call	5c1c <memmove>
    4ebc:	90c00217 	ldw	r3,8(r18)
    4ec0:	90800017 	ldw	r2,0(r18)
    4ec4:	a021883a 	mov	r16,r20
    4ec8:	1d07c83a 	sub	r3,r3,r20
    4ecc:	1505883a 	add	r2,r2,r20
    4ed0:	a023883a 	mov	r17,r20
    4ed4:	a027883a 	mov	r19,r20
    4ed8:	90c00215 	stw	r3,8(r18)
    4edc:	90800015 	stw	r2,0(r18)
    4ee0:	003f8006 	br	4ce4 <__sfvwrite_r+0x200>
    4ee4:	b809883a 	mov	r4,r23
    4ee8:	01400284 	movi	r5,10
    4eec:	980d883a 	mov	r6,r19
    4ef0:	0005a980 	call	5a98 <memchr>
    4ef4:	10001726 	beq	r2,zero,4f54 <__sfvwrite_r+0x470>
    4ef8:	15c5c83a 	sub	r2,r2,r23
    4efc:	15000044 	addi	r20,r2,1
    4f00:	00800044 	movi	r2,1
    4f04:	d8800015 	stw	r2,0(sp)
    4f08:	003f9806 	br	4d6c <__sfvwrite_r+0x288>
    4f0c:	b80b883a 	mov	r5,r23
    4f10:	800d883a 	mov	r6,r16
    4f14:	0005c1c0 	call	5c1c <memmove>
    4f18:	90c00017 	ldw	r3,0(r18)
    4f1c:	e009883a 	mov	r4,fp
    4f20:	900b883a 	mov	r5,r18
    4f24:	1c07883a 	add	r3,r3,r16
    4f28:	90c00015 	stw	r3,0(r18)
    4f2c:	8027883a 	mov	r19,r16
    4f30:	00041b40 	call	41b4 <_fflush_r>
    4f34:	103f6b26 	beq	r2,zero,4ce4 <__sfvwrite_r+0x200>
    4f38:	003f7f06 	br	4d38 <__sfvwrite_r+0x254>
    4f3c:	400b883a 	mov	r5,r8
    4f40:	e009883a 	mov	r4,fp
    4f44:	0006d880 	call	6d88 <_realloc_r>
    4f48:	103f7626 	beq	r2,zero,4d24 <__sfvwrite_r+0x240>
    4f4c:	1023883a 	mov	r17,r2
    4f50:	003f5006 	br	4c94 <__sfvwrite_r+0x1b0>
    4f54:	00c00044 	movi	r3,1
    4f58:	9d000044 	addi	r20,r19,1
    4f5c:	d8c00015 	stw	r3,0(sp)
    4f60:	003f8206 	br	4d6c <__sfvwrite_r+0x288>
    4f64:	9080030b 	ldhu	r2,12(r18)
    4f68:	00c00244 	movi	r3,9
    4f6c:	013fffc4 	movi	r4,-1
    4f70:	10801014 	ori	r2,r2,64
    4f74:	9080030d 	sth	r2,12(r18)
    4f78:	e0c00015 	stw	r3,0(fp)
    4f7c:	003f0606 	br	4b98 <__sfvwrite_r+0xb4>

00004f80 <_fwalk_reent>:
    4f80:	defff704 	addi	sp,sp,-36
    4f84:	dcc00315 	stw	r19,12(sp)
    4f88:	24c0b804 	addi	r19,r4,736
    4f8c:	dd800615 	stw	r22,24(sp)
    4f90:	dd400515 	stw	r21,20(sp)
    4f94:	dfc00815 	stw	ra,32(sp)
    4f98:	ddc00715 	stw	r23,28(sp)
    4f9c:	dd000415 	stw	r20,16(sp)
    4fa0:	dc800215 	stw	r18,8(sp)
    4fa4:	dc400115 	stw	r17,4(sp)
    4fa8:	dc000015 	stw	r16,0(sp)
    4fac:	202b883a 	mov	r21,r4
    4fb0:	282d883a 	mov	r22,r5
    4fb4:	000443c0 	call	443c <__sfp_lock_acquire>
    4fb8:	98002126 	beq	r19,zero,5040 <_fwalk_reent+0xc0>
    4fbc:	002f883a 	mov	r23,zero
    4fc0:	9c800117 	ldw	r18,4(r19)
    4fc4:	9c000217 	ldw	r16,8(r19)
    4fc8:	90bfffc4 	addi	r2,r18,-1
    4fcc:	10000d16 	blt	r2,zero,5004 <_fwalk_reent+0x84>
    4fd0:	0023883a 	mov	r17,zero
    4fd4:	053fffc4 	movi	r20,-1
    4fd8:	8080030f 	ldh	r2,12(r16)
    4fdc:	8c400044 	addi	r17,r17,1
    4fe0:	10000626 	beq	r2,zero,4ffc <_fwalk_reent+0x7c>
    4fe4:	8080038f 	ldh	r2,14(r16)
    4fe8:	800b883a 	mov	r5,r16
    4fec:	a809883a 	mov	r4,r21
    4ff0:	15000226 	beq	r2,r20,4ffc <_fwalk_reent+0x7c>
    4ff4:	b03ee83a 	callr	r22
    4ff8:	b8aeb03a 	or	r23,r23,r2
    4ffc:	84001704 	addi	r16,r16,92
    5000:	947ff51e 	bne	r18,r17,4fd8 <_fwalk_reent+0x58>
    5004:	9cc00017 	ldw	r19,0(r19)
    5008:	983fed1e 	bne	r19,zero,4fc0 <_fwalk_reent+0x40>
    500c:	00044400 	call	4440 <__sfp_lock_release>
    5010:	b805883a 	mov	r2,r23
    5014:	dfc00817 	ldw	ra,32(sp)
    5018:	ddc00717 	ldw	r23,28(sp)
    501c:	dd800617 	ldw	r22,24(sp)
    5020:	dd400517 	ldw	r21,20(sp)
    5024:	dd000417 	ldw	r20,16(sp)
    5028:	dcc00317 	ldw	r19,12(sp)
    502c:	dc800217 	ldw	r18,8(sp)
    5030:	dc400117 	ldw	r17,4(sp)
    5034:	dc000017 	ldw	r16,0(sp)
    5038:	dec00904 	addi	sp,sp,36
    503c:	f800283a 	ret
    5040:	002f883a 	mov	r23,zero
    5044:	003ff106 	br	500c <_fwalk_reent+0x8c>

00005048 <_fwalk>:
    5048:	defff804 	addi	sp,sp,-32
    504c:	dcc00315 	stw	r19,12(sp)
    5050:	24c0b804 	addi	r19,r4,736
    5054:	dd400515 	stw	r21,20(sp)
    5058:	dfc00715 	stw	ra,28(sp)
    505c:	dd800615 	stw	r22,24(sp)
    5060:	dd000415 	stw	r20,16(sp)
    5064:	dc800215 	stw	r18,8(sp)
    5068:	dc400115 	stw	r17,4(sp)
    506c:	dc000015 	stw	r16,0(sp)
    5070:	282b883a 	mov	r21,r5
    5074:	000443c0 	call	443c <__sfp_lock_acquire>
    5078:	98001f26 	beq	r19,zero,50f8 <_fwalk+0xb0>
    507c:	002d883a 	mov	r22,zero
    5080:	9c800117 	ldw	r18,4(r19)
    5084:	9c000217 	ldw	r16,8(r19)
    5088:	90bfffc4 	addi	r2,r18,-1
    508c:	10000c16 	blt	r2,zero,50c0 <_fwalk+0x78>
    5090:	0023883a 	mov	r17,zero
    5094:	053fffc4 	movi	r20,-1
    5098:	8080030f 	ldh	r2,12(r16)
    509c:	8c400044 	addi	r17,r17,1
    50a0:	10000526 	beq	r2,zero,50b8 <_fwalk+0x70>
    50a4:	8080038f 	ldh	r2,14(r16)
    50a8:	8009883a 	mov	r4,r16
    50ac:	15000226 	beq	r2,r20,50b8 <_fwalk+0x70>
    50b0:	a83ee83a 	callr	r21
    50b4:	b0acb03a 	or	r22,r22,r2
    50b8:	84001704 	addi	r16,r16,92
    50bc:	947ff61e 	bne	r18,r17,5098 <_fwalk+0x50>
    50c0:	9cc00017 	ldw	r19,0(r19)
    50c4:	983fee1e 	bne	r19,zero,5080 <_fwalk+0x38>
    50c8:	00044400 	call	4440 <__sfp_lock_release>
    50cc:	b005883a 	mov	r2,r22
    50d0:	dfc00717 	ldw	ra,28(sp)
    50d4:	dd800617 	ldw	r22,24(sp)
    50d8:	dd400517 	ldw	r21,20(sp)
    50dc:	dd000417 	ldw	r20,16(sp)
    50e0:	dcc00317 	ldw	r19,12(sp)
    50e4:	dc800217 	ldw	r18,8(sp)
    50e8:	dc400117 	ldw	r17,4(sp)
    50ec:	dc000017 	ldw	r16,0(sp)
    50f0:	dec00804 	addi	sp,sp,32
    50f4:	f800283a 	ret
    50f8:	002d883a 	mov	r22,zero
    50fc:	003ff206 	br	50c8 <_fwalk+0x80>

00005100 <__locale_charset>:
    5100:	d0a00317 	ldw	r2,-32756(gp)
    5104:	f800283a 	ret

00005108 <_localeconv_r>:
    5108:	00800074 	movhi	r2,1
    510c:	10b18104 	addi	r2,r2,-14844
    5110:	f800283a 	ret

00005114 <localeconv>:
    5114:	00800074 	movhi	r2,1
    5118:	10b4cc04 	addi	r2,r2,-11472
    511c:	11000017 	ldw	r4,0(r2)
    5120:	00051081 	jmpi	5108 <_localeconv_r>

00005124 <_setlocale_r>:
    5124:	defffc04 	addi	sp,sp,-16
    5128:	00c00074 	movhi	r3,1
    512c:	18f17c04 	addi	r3,r3,-14864
    5130:	dc800215 	stw	r18,8(sp)
    5134:	dc400115 	stw	r17,4(sp)
    5138:	dc000015 	stw	r16,0(sp)
    513c:	2023883a 	mov	r17,r4
    5140:	2825883a 	mov	r18,r5
    5144:	dfc00315 	stw	ra,12(sp)
    5148:	3021883a 	mov	r16,r6
    514c:	3009883a 	mov	r4,r6
    5150:	180b883a 	mov	r5,r3
    5154:	30000926 	beq	r6,zero,517c <_setlocale_r+0x58>
    5158:	00075a80 	call	75a8 <strcmp>
    515c:	8009883a 	mov	r4,r16
    5160:	01400074 	movhi	r5,1
    5164:	29716704 	addi	r5,r5,-14948
    5168:	10000b1e 	bne	r2,zero,5198 <_setlocale_r+0x74>
    516c:	8c000d15 	stw	r16,52(r17)
    5170:	8c800c15 	stw	r18,48(r17)
    5174:	00c00074 	movhi	r3,1
    5178:	18f17c04 	addi	r3,r3,-14864
    517c:	1805883a 	mov	r2,r3
    5180:	dfc00317 	ldw	ra,12(sp)
    5184:	dc800217 	ldw	r18,8(sp)
    5188:	dc400117 	ldw	r17,4(sp)
    518c:	dc000017 	ldw	r16,0(sp)
    5190:	dec00404 	addi	sp,sp,16
    5194:	f800283a 	ret
    5198:	00075a80 	call	75a8 <strcmp>
    519c:	0007883a 	mov	r3,zero
    51a0:	103ff226 	beq	r2,zero,516c <_setlocale_r+0x48>
    51a4:	003ff506 	br	517c <_setlocale_r+0x58>

000051a8 <setlocale>:
    51a8:	01800074 	movhi	r6,1
    51ac:	31b4cc04 	addi	r6,r6,-11472
    51b0:	2007883a 	mov	r3,r4
    51b4:	31000017 	ldw	r4,0(r6)
    51b8:	280d883a 	mov	r6,r5
    51bc:	180b883a 	mov	r5,r3
    51c0:	00051241 	jmpi	5124 <_setlocale_r>

000051c4 <__smakebuf_r>:
    51c4:	2880030b 	ldhu	r2,12(r5)
    51c8:	deffed04 	addi	sp,sp,-76
    51cc:	dc401015 	stw	r17,64(sp)
    51d0:	1080008c 	andi	r2,r2,2
    51d4:	dc000f15 	stw	r16,60(sp)
    51d8:	dfc01215 	stw	ra,72(sp)
    51dc:	dc801115 	stw	r18,68(sp)
    51e0:	2821883a 	mov	r16,r5
    51e4:	2023883a 	mov	r17,r4
    51e8:	10000b26 	beq	r2,zero,5218 <__smakebuf_r+0x54>
    51ec:	28c010c4 	addi	r3,r5,67
    51f0:	00800044 	movi	r2,1
    51f4:	28800515 	stw	r2,20(r5)
    51f8:	28c00415 	stw	r3,16(r5)
    51fc:	28c00015 	stw	r3,0(r5)
    5200:	dfc01217 	ldw	ra,72(sp)
    5204:	dc801117 	ldw	r18,68(sp)
    5208:	dc401017 	ldw	r17,64(sp)
    520c:	dc000f17 	ldw	r16,60(sp)
    5210:	dec01304 	addi	sp,sp,76
    5214:	f800283a 	ret
    5218:	2940038f 	ldh	r5,14(r5)
    521c:	28002116 	blt	r5,zero,52a4 <__smakebuf_r+0xe0>
    5220:	d80d883a 	mov	r6,sp
    5224:	00079980 	call	7998 <_fstat_r>
    5228:	10001e16 	blt	r2,zero,52a4 <__smakebuf_r+0xe0>
    522c:	d8800117 	ldw	r2,4(sp)
    5230:	00e00014 	movui	r3,32768
    5234:	113c000c 	andi	r4,r2,61440
    5238:	20c03126 	beq	r4,r3,5300 <__smakebuf_r+0x13c>
    523c:	8080030b 	ldhu	r2,12(r16)
    5240:	00c80004 	movi	r3,8192
    5244:	10820014 	ori	r2,r2,2048
    5248:	8080030d 	sth	r2,12(r16)
    524c:	20c01e26 	beq	r4,r3,52c8 <__smakebuf_r+0x104>
    5250:	04810004 	movi	r18,1024
    5254:	8809883a 	mov	r4,r17
    5258:	900b883a 	mov	r5,r18
    525c:	00053580 	call	5358 <_malloc_r>
    5260:	1009883a 	mov	r4,r2
    5264:	10003126 	beq	r2,zero,532c <__smakebuf_r+0x168>
    5268:	80c0030b 	ldhu	r3,12(r16)
    526c:	00800034 	movhi	r2,0
    5270:	10914c04 	addi	r2,r2,17712
    5274:	88800f15 	stw	r2,60(r17)
    5278:	18c02014 	ori	r3,r3,128
    527c:	84800515 	stw	r18,20(r16)
    5280:	80c0030d 	sth	r3,12(r16)
    5284:	81000415 	stw	r4,16(r16)
    5288:	81000015 	stw	r4,0(r16)
    528c:	dfc01217 	ldw	ra,72(sp)
    5290:	dc801117 	ldw	r18,68(sp)
    5294:	dc401017 	ldw	r17,64(sp)
    5298:	dc000f17 	ldw	r16,60(sp)
    529c:	dec01304 	addi	sp,sp,76
    52a0:	f800283a 	ret
    52a4:	80c0030b 	ldhu	r3,12(r16)
    52a8:	1880200c 	andi	r2,r3,128
    52ac:	10000426 	beq	r2,zero,52c0 <__smakebuf_r+0xfc>
    52b0:	04801004 	movi	r18,64
    52b4:	18820014 	ori	r2,r3,2048
    52b8:	8080030d 	sth	r2,12(r16)
    52bc:	003fe506 	br	5254 <__smakebuf_r+0x90>
    52c0:	04810004 	movi	r18,1024
    52c4:	003ffb06 	br	52b4 <__smakebuf_r+0xf0>
    52c8:	8140038f 	ldh	r5,14(r16)
    52cc:	8809883a 	mov	r4,r17
    52d0:	0007a0c0 	call	7a0c <_isatty_r>
    52d4:	103fde26 	beq	r2,zero,5250 <__smakebuf_r+0x8c>
    52d8:	8080030b 	ldhu	r2,12(r16)
    52dc:	80c010c4 	addi	r3,r16,67
    52e0:	04810004 	movi	r18,1024
    52e4:	10800054 	ori	r2,r2,1
    52e8:	8080030d 	sth	r2,12(r16)
    52ec:	00800044 	movi	r2,1
    52f0:	80c00415 	stw	r3,16(r16)
    52f4:	80800515 	stw	r2,20(r16)
    52f8:	80c00015 	stw	r3,0(r16)
    52fc:	003fd506 	br	5254 <__smakebuf_r+0x90>
    5300:	80c00a17 	ldw	r3,40(r16)
    5304:	00800034 	movhi	r2,0
    5308:	109d1904 	addi	r2,r2,29796
    530c:	18bfcb1e 	bne	r3,r2,523c <__smakebuf_r+0x78>
    5310:	8080030b 	ldhu	r2,12(r16)
    5314:	00c10004 	movi	r3,1024
    5318:	1825883a 	mov	r18,r3
    531c:	10c4b03a 	or	r2,r2,r3
    5320:	8080030d 	sth	r2,12(r16)
    5324:	80c01315 	stw	r3,76(r16)
    5328:	003fca06 	br	5254 <__smakebuf_r+0x90>
    532c:	8100030b 	ldhu	r4,12(r16)
    5330:	2080800c 	andi	r2,r4,512
    5334:	103fb21e 	bne	r2,zero,5200 <__smakebuf_r+0x3c>
    5338:	80c010c4 	addi	r3,r16,67
    533c:	21000094 	ori	r4,r4,2
    5340:	00800044 	movi	r2,1
    5344:	80800515 	stw	r2,20(r16)
    5348:	8100030d 	sth	r4,12(r16)
    534c:	80c00415 	stw	r3,16(r16)
    5350:	80c00015 	stw	r3,0(r16)
    5354:	003faa06 	br	5200 <__smakebuf_r+0x3c>

00005358 <_malloc_r>:
    5358:	defff604 	addi	sp,sp,-40
    535c:	28c002c4 	addi	r3,r5,11
    5360:	00800584 	movi	r2,22
    5364:	dc800215 	stw	r18,8(sp)
    5368:	dfc00915 	stw	ra,36(sp)
    536c:	df000815 	stw	fp,32(sp)
    5370:	ddc00715 	stw	r23,28(sp)
    5374:	dd800615 	stw	r22,24(sp)
    5378:	dd400515 	stw	r21,20(sp)
    537c:	dd000415 	stw	r20,16(sp)
    5380:	dcc00315 	stw	r19,12(sp)
    5384:	dc400115 	stw	r17,4(sp)
    5388:	dc000015 	stw	r16,0(sp)
    538c:	2025883a 	mov	r18,r4
    5390:	10c01236 	bltu	r2,r3,53dc <_malloc_r+0x84>
    5394:	04400404 	movi	r17,16
    5398:	8940142e 	bgeu	r17,r5,53ec <_malloc_r+0x94>
    539c:	00800304 	movi	r2,12
    53a0:	0007883a 	mov	r3,zero
    53a4:	90800015 	stw	r2,0(r18)
    53a8:	1805883a 	mov	r2,r3
    53ac:	dfc00917 	ldw	ra,36(sp)
    53b0:	df000817 	ldw	fp,32(sp)
    53b4:	ddc00717 	ldw	r23,28(sp)
    53b8:	dd800617 	ldw	r22,24(sp)
    53bc:	dd400517 	ldw	r21,20(sp)
    53c0:	dd000417 	ldw	r20,16(sp)
    53c4:	dcc00317 	ldw	r19,12(sp)
    53c8:	dc800217 	ldw	r18,8(sp)
    53cc:	dc400117 	ldw	r17,4(sp)
    53d0:	dc000017 	ldw	r16,0(sp)
    53d4:	dec00a04 	addi	sp,sp,40
    53d8:	f800283a 	ret
    53dc:	00bffe04 	movi	r2,-8
    53e0:	18a2703a 	and	r17,r3,r2
    53e4:	883fed16 	blt	r17,zero,539c <_malloc_r+0x44>
    53e8:	897fec36 	bltu	r17,r5,539c <_malloc_r+0x44>
    53ec:	9009883a 	mov	r4,r18
    53f0:	000a4d40 	call	a4d4 <__malloc_lock>
    53f4:	00807dc4 	movi	r2,503
    53f8:	14402b2e 	bgeu	r2,r17,54a8 <_malloc_r+0x150>
    53fc:	8806d27a 	srli	r3,r17,9
    5400:	18003f1e 	bne	r3,zero,5500 <_malloc_r+0x1a8>
    5404:	880cd0fa 	srli	r6,r17,3
    5408:	300490fa 	slli	r2,r6,3
    540c:	02c00074 	movhi	r11,1
    5410:	5af32f04 	addi	r11,r11,-13124
    5414:	12cb883a 	add	r5,r2,r11
    5418:	2c000317 	ldw	r16,12(r5)
    541c:	580f883a 	mov	r7,r11
    5420:	2c00041e 	bne	r5,r16,5434 <_malloc_r+0xdc>
    5424:	00000a06 	br	5450 <_malloc_r+0xf8>
    5428:	1800860e 	bge	r3,zero,5644 <_malloc_r+0x2ec>
    542c:	84000317 	ldw	r16,12(r16)
    5430:	2c000726 	beq	r5,r16,5450 <_malloc_r+0xf8>
    5434:	80800117 	ldw	r2,4(r16)
    5438:	00ffff04 	movi	r3,-4
    543c:	10c8703a 	and	r4,r2,r3
    5440:	2447c83a 	sub	r3,r4,r17
    5444:	008003c4 	movi	r2,15
    5448:	10fff70e 	bge	r2,r3,5428 <_malloc_r+0xd0>
    544c:	31bfffc4 	addi	r6,r6,-1
    5450:	32400044 	addi	r9,r6,1
    5454:	02800074 	movhi	r10,1
    5458:	52b33104 	addi	r10,r10,-13116
    545c:	54000217 	ldw	r16,8(r10)
    5460:	8280a026 	beq	r16,r10,56e4 <_malloc_r+0x38c>
    5464:	80800117 	ldw	r2,4(r16)
    5468:	00ffff04 	movi	r3,-4
    546c:	10ca703a 	and	r5,r2,r3
    5470:	2c4dc83a 	sub	r6,r5,r17
    5474:	008003c4 	movi	r2,15
    5478:	11808316 	blt	r2,r6,5688 <_malloc_r+0x330>
    547c:	52800315 	stw	r10,12(r10)
    5480:	52800215 	stw	r10,8(r10)
    5484:	30002916 	blt	r6,zero,552c <_malloc_r+0x1d4>
    5488:	8147883a 	add	r3,r16,r5
    548c:	18800117 	ldw	r2,4(r3)
    5490:	9009883a 	mov	r4,r18
    5494:	10800054 	ori	r2,r2,1
    5498:	18800115 	stw	r2,4(r3)
    549c:	000a4f40 	call	a4f4 <__malloc_unlock>
    54a0:	80c00204 	addi	r3,r16,8
    54a4:	003fc006 	br	53a8 <_malloc_r+0x50>
    54a8:	02c00074 	movhi	r11,1
    54ac:	5af32f04 	addi	r11,r11,-13124
    54b0:	8ac5883a 	add	r2,r17,r11
    54b4:	14000317 	ldw	r16,12(r2)
    54b8:	580f883a 	mov	r7,r11
    54bc:	8806d0fa 	srli	r3,r17,3
    54c0:	14006c26 	beq	r2,r16,5674 <_malloc_r+0x31c>
    54c4:	80c00117 	ldw	r3,4(r16)
    54c8:	00bfff04 	movi	r2,-4
    54cc:	81800317 	ldw	r6,12(r16)
    54d0:	1886703a 	and	r3,r3,r2
    54d4:	80c7883a 	add	r3,r16,r3
    54d8:	18800117 	ldw	r2,4(r3)
    54dc:	81400217 	ldw	r5,8(r16)
    54e0:	9009883a 	mov	r4,r18
    54e4:	10800054 	ori	r2,r2,1
    54e8:	18800115 	stw	r2,4(r3)
    54ec:	31400215 	stw	r5,8(r6)
    54f0:	29800315 	stw	r6,12(r5)
    54f4:	000a4f40 	call	a4f4 <__malloc_unlock>
    54f8:	80c00204 	addi	r3,r16,8
    54fc:	003faa06 	br	53a8 <_malloc_r+0x50>
    5500:	00800104 	movi	r2,4
    5504:	10c0052e 	bgeu	r2,r3,551c <_malloc_r+0x1c4>
    5508:	00800504 	movi	r2,20
    550c:	10c07836 	bltu	r2,r3,56f0 <_malloc_r+0x398>
    5510:	198016c4 	addi	r6,r3,91
    5514:	300490fa 	slli	r2,r6,3
    5518:	003fbc06 	br	540c <_malloc_r+0xb4>
    551c:	8804d1ba 	srli	r2,r17,6
    5520:	11800e04 	addi	r6,r2,56
    5524:	300490fa 	slli	r2,r6,3
    5528:	003fb806 	br	540c <_malloc_r+0xb4>
    552c:	00807fc4 	movi	r2,511
    5530:	1140bb36 	bltu	r2,r5,5820 <_malloc_r+0x4c8>
    5534:	2806d0fa 	srli	r3,r5,3
    5538:	573ffe04 	addi	fp,r10,-8
    553c:	00800044 	movi	r2,1
    5540:	180890fa 	slli	r4,r3,3
    5544:	1807d0ba 	srai	r3,r3,2
    5548:	e1c00117 	ldw	r7,4(fp)
    554c:	5909883a 	add	r4,r11,r4
    5550:	21400217 	ldw	r5,8(r4)
    5554:	10c4983a 	sll	r2,r2,r3
    5558:	81000315 	stw	r4,12(r16)
    555c:	81400215 	stw	r5,8(r16)
    5560:	388eb03a 	or	r7,r7,r2
    5564:	2c000315 	stw	r16,12(r5)
    5568:	24000215 	stw	r16,8(r4)
    556c:	e1c00115 	stw	r7,4(fp)
    5570:	4807883a 	mov	r3,r9
    5574:	4800cd16 	blt	r9,zero,58ac <_malloc_r+0x554>
    5578:	1807d0ba 	srai	r3,r3,2
    557c:	00800044 	movi	r2,1
    5580:	10c8983a 	sll	r4,r2,r3
    5584:	39004436 	bltu	r7,r4,5698 <_malloc_r+0x340>
    5588:	21c4703a 	and	r2,r4,r7
    558c:	10000a1e 	bne	r2,zero,55b8 <_malloc_r+0x260>
    5590:	2109883a 	add	r4,r4,r4
    5594:	00bfff04 	movi	r2,-4
    5598:	4884703a 	and	r2,r9,r2
    559c:	3906703a 	and	r3,r7,r4
    55a0:	12400104 	addi	r9,r2,4
    55a4:	1800041e 	bne	r3,zero,55b8 <_malloc_r+0x260>
    55a8:	2109883a 	add	r4,r4,r4
    55ac:	3904703a 	and	r2,r7,r4
    55b0:	4a400104 	addi	r9,r9,4
    55b4:	103ffc26 	beq	r2,zero,55a8 <_malloc_r+0x250>
    55b8:	480490fa 	slli	r2,r9,3
    55bc:	4819883a 	mov	r12,r9
    55c0:	023fff04 	movi	r8,-4
    55c4:	589b883a 	add	r13,r11,r2
    55c8:	6807883a 	mov	r3,r13
    55cc:	014003c4 	movi	r5,15
    55d0:	1c000317 	ldw	r16,12(r3)
    55d4:	1c00041e 	bne	r3,r16,55e8 <_malloc_r+0x290>
    55d8:	0000a706 	br	5878 <_malloc_r+0x520>
    55dc:	3000ab0e 	bge	r6,zero,588c <_malloc_r+0x534>
    55e0:	84000317 	ldw	r16,12(r16)
    55e4:	1c00a426 	beq	r3,r16,5878 <_malloc_r+0x520>
    55e8:	80800117 	ldw	r2,4(r16)
    55ec:	1204703a 	and	r2,r2,r8
    55f0:	144dc83a 	sub	r6,r2,r17
    55f4:	29bff90e 	bge	r5,r6,55dc <_malloc_r+0x284>
    55f8:	81000317 	ldw	r4,12(r16)
    55fc:	80c00217 	ldw	r3,8(r16)
    5600:	89400054 	ori	r5,r17,1
    5604:	8445883a 	add	r2,r16,r17
    5608:	20c00215 	stw	r3,8(r4)
    560c:	19000315 	stw	r4,12(r3)
    5610:	81400115 	stw	r5,4(r16)
    5614:	1187883a 	add	r3,r2,r6
    5618:	31000054 	ori	r4,r6,1
    561c:	50800315 	stw	r2,12(r10)
    5620:	50800215 	stw	r2,8(r10)
    5624:	19800015 	stw	r6,0(r3)
    5628:	11000115 	stw	r4,4(r2)
    562c:	12800215 	stw	r10,8(r2)
    5630:	12800315 	stw	r10,12(r2)
    5634:	9009883a 	mov	r4,r18
    5638:	000a4f40 	call	a4f4 <__malloc_unlock>
    563c:	80c00204 	addi	r3,r16,8
    5640:	003f5906 	br	53a8 <_malloc_r+0x50>
    5644:	8109883a 	add	r4,r16,r4
    5648:	20800117 	ldw	r2,4(r4)
    564c:	80c00217 	ldw	r3,8(r16)
    5650:	81400317 	ldw	r5,12(r16)
    5654:	10800054 	ori	r2,r2,1
    5658:	20800115 	stw	r2,4(r4)
    565c:	28c00215 	stw	r3,8(r5)
    5660:	19400315 	stw	r5,12(r3)
    5664:	9009883a 	mov	r4,r18
    5668:	000a4f40 	call	a4f4 <__malloc_unlock>
    566c:	80c00204 	addi	r3,r16,8
    5670:	003f4d06 	br	53a8 <_malloc_r+0x50>
    5674:	80800204 	addi	r2,r16,8
    5678:	14000317 	ldw	r16,12(r2)
    567c:	143f911e 	bne	r2,r16,54c4 <_malloc_r+0x16c>
    5680:	1a400084 	addi	r9,r3,2
    5684:	003f7306 	br	5454 <_malloc_r+0xfc>
    5688:	88c00054 	ori	r3,r17,1
    568c:	8445883a 	add	r2,r16,r17
    5690:	80c00115 	stw	r3,4(r16)
    5694:	003fdf06 	br	5614 <_malloc_r+0x2bc>
    5698:	e4000217 	ldw	r16,8(fp)
    569c:	00bfff04 	movi	r2,-4
    56a0:	80c00117 	ldw	r3,4(r16)
    56a4:	802d883a 	mov	r22,r16
    56a8:	18aa703a 	and	r21,r3,r2
    56ac:	ac401636 	bltu	r21,r17,5708 <_malloc_r+0x3b0>
    56b0:	ac49c83a 	sub	r4,r21,r17
    56b4:	008003c4 	movi	r2,15
    56b8:	1100130e 	bge	r2,r4,5708 <_malloc_r+0x3b0>
    56bc:	88800054 	ori	r2,r17,1
    56c0:	8447883a 	add	r3,r16,r17
    56c4:	80800115 	stw	r2,4(r16)
    56c8:	20800054 	ori	r2,r4,1
    56cc:	18800115 	stw	r2,4(r3)
    56d0:	e0c00215 	stw	r3,8(fp)
    56d4:	9009883a 	mov	r4,r18
    56d8:	000a4f40 	call	a4f4 <__malloc_unlock>
    56dc:	80c00204 	addi	r3,r16,8
    56e0:	003f3106 	br	53a8 <_malloc_r+0x50>
    56e4:	39c00117 	ldw	r7,4(r7)
    56e8:	573ffe04 	addi	fp,r10,-8
    56ec:	003fa006 	br	5570 <_malloc_r+0x218>
    56f0:	00801504 	movi	r2,84
    56f4:	10c06736 	bltu	r2,r3,5894 <_malloc_r+0x53c>
    56f8:	8804d33a 	srli	r2,r17,12
    56fc:	11801b84 	addi	r6,r2,110
    5700:	300490fa 	slli	r2,r6,3
    5704:	003f4106 	br	540c <_malloc_r+0xb4>
    5708:	d0a2c717 	ldw	r2,-29924(gp)
    570c:	d0e00517 	ldw	r3,-32748(gp)
    5710:	053fffc4 	movi	r20,-1
    5714:	10800404 	addi	r2,r2,16
    5718:	88a7883a 	add	r19,r17,r2
    571c:	1d000326 	beq	r3,r20,572c <_malloc_r+0x3d4>
    5720:	98c3ffc4 	addi	r3,r19,4095
    5724:	00bc0004 	movi	r2,-4096
    5728:	18a6703a 	and	r19,r3,r2
    572c:	9009883a 	mov	r4,r18
    5730:	980b883a 	mov	r5,r19
    5734:	00073ec0 	call	73ec <_sbrk_r>
    5738:	1009883a 	mov	r4,r2
    573c:	15000426 	beq	r2,r20,5750 <_malloc_r+0x3f8>
    5740:	854b883a 	add	r5,r16,r21
    5744:	1029883a 	mov	r20,r2
    5748:	11405a2e 	bgeu	r2,r5,58b4 <_malloc_r+0x55c>
    574c:	87000c26 	beq	r16,fp,5780 <_malloc_r+0x428>
    5750:	e4000217 	ldw	r16,8(fp)
    5754:	80c00117 	ldw	r3,4(r16)
    5758:	00bfff04 	movi	r2,-4
    575c:	1884703a 	and	r2,r3,r2
    5760:	14400336 	bltu	r2,r17,5770 <_malloc_r+0x418>
    5764:	1449c83a 	sub	r4,r2,r17
    5768:	008003c4 	movi	r2,15
    576c:	113fd316 	blt	r2,r4,56bc <_malloc_r+0x364>
    5770:	9009883a 	mov	r4,r18
    5774:	000a4f40 	call	a4f4 <__malloc_unlock>
    5778:	0007883a 	mov	r3,zero
    577c:	003f0a06 	br	53a8 <_malloc_r+0x50>
    5780:	05c00074 	movhi	r23,1
    5784:	bdf7a304 	addi	r23,r23,-8564
    5788:	b8800017 	ldw	r2,0(r23)
    578c:	988d883a 	add	r6,r19,r2
    5790:	b9800015 	stw	r6,0(r23)
    5794:	d0e00517 	ldw	r3,-32748(gp)
    5798:	00bfffc4 	movi	r2,-1
    579c:	18808e26 	beq	r3,r2,59d8 <_malloc_r+0x680>
    57a0:	2145c83a 	sub	r2,r4,r5
    57a4:	3085883a 	add	r2,r6,r2
    57a8:	b8800015 	stw	r2,0(r23)
    57ac:	20c001cc 	andi	r3,r4,7
    57b0:	18005f1e 	bne	r3,zero,5930 <_malloc_r+0x5d8>
    57b4:	000b883a 	mov	r5,zero
    57b8:	a4c5883a 	add	r2,r20,r19
    57bc:	1083ffcc 	andi	r2,r2,4095
    57c0:	00c40004 	movi	r3,4096
    57c4:	1887c83a 	sub	r3,r3,r2
    57c8:	28e7883a 	add	r19,r5,r3
    57cc:	9009883a 	mov	r4,r18
    57d0:	980b883a 	mov	r5,r19
    57d4:	00073ec0 	call	73ec <_sbrk_r>
    57d8:	1007883a 	mov	r3,r2
    57dc:	00bfffc4 	movi	r2,-1
    57e0:	18807a26 	beq	r3,r2,59cc <_malloc_r+0x674>
    57e4:	1d05c83a 	sub	r2,r3,r20
    57e8:	9885883a 	add	r2,r19,r2
    57ec:	10c00054 	ori	r3,r2,1
    57f0:	b8800017 	ldw	r2,0(r23)
    57f4:	a021883a 	mov	r16,r20
    57f8:	a0c00115 	stw	r3,4(r20)
    57fc:	9885883a 	add	r2,r19,r2
    5800:	b8800015 	stw	r2,0(r23)
    5804:	e5000215 	stw	r20,8(fp)
    5808:	b7003626 	beq	r22,fp,58e4 <_malloc_r+0x58c>
    580c:	018003c4 	movi	r6,15
    5810:	35404b36 	bltu	r6,r21,5940 <_malloc_r+0x5e8>
    5814:	00800044 	movi	r2,1
    5818:	a0800115 	stw	r2,4(r20)
    581c:	003fcd06 	br	5754 <_malloc_r+0x3fc>
    5820:	2808d27a 	srli	r4,r5,9
    5824:	2000371e 	bne	r4,zero,5904 <_malloc_r+0x5ac>
    5828:	2808d0fa 	srli	r4,r5,3
    582c:	200690fa 	slli	r3,r4,3
    5830:	1ad1883a 	add	r8,r3,r11
    5834:	41800217 	ldw	r6,8(r8)
    5838:	41805b26 	beq	r8,r6,59a8 <_malloc_r+0x650>
    583c:	30800117 	ldw	r2,4(r6)
    5840:	00ffff04 	movi	r3,-4
    5844:	10c4703a 	and	r2,r2,r3
    5848:	2880022e 	bgeu	r5,r2,5854 <_malloc_r+0x4fc>
    584c:	31800217 	ldw	r6,8(r6)
    5850:	41bffa1e 	bne	r8,r6,583c <_malloc_r+0x4e4>
    5854:	32000317 	ldw	r8,12(r6)
    5858:	39c00117 	ldw	r7,4(r7)
    585c:	82000315 	stw	r8,12(r16)
    5860:	81800215 	stw	r6,8(r16)
    5864:	07000074 	movhi	fp,1
    5868:	e7332f04 	addi	fp,fp,-13124
    586c:	34000315 	stw	r16,12(r6)
    5870:	44000215 	stw	r16,8(r8)
    5874:	003f3e06 	br	5570 <_malloc_r+0x218>
    5878:	63000044 	addi	r12,r12,1
    587c:	608000cc 	andi	r2,r12,3
    5880:	10005d26 	beq	r2,zero,59f8 <_malloc_r+0x6a0>
    5884:	18c00204 	addi	r3,r3,8
    5888:	003f5106 	br	55d0 <_malloc_r+0x278>
    588c:	8089883a 	add	r4,r16,r2
    5890:	003f6d06 	br	5648 <_malloc_r+0x2f0>
    5894:	00805504 	movi	r2,340
    5898:	10c02036 	bltu	r2,r3,591c <_malloc_r+0x5c4>
    589c:	8804d3fa 	srli	r2,r17,15
    58a0:	11801dc4 	addi	r6,r2,119
    58a4:	300490fa 	slli	r2,r6,3
    58a8:	003ed806 	br	540c <_malloc_r+0xb4>
    58ac:	48c000c4 	addi	r3,r9,3
    58b0:	003f3106 	br	5578 <_malloc_r+0x220>
    58b4:	05c00074 	movhi	r23,1
    58b8:	bdf7a304 	addi	r23,r23,-8564
    58bc:	b8800017 	ldw	r2,0(r23)
    58c0:	988d883a 	add	r6,r19,r2
    58c4:	b9800015 	stw	r6,0(r23)
    58c8:	293fb21e 	bne	r5,r4,5794 <_malloc_r+0x43c>
    58cc:	2083ffcc 	andi	r2,r4,4095
    58d0:	103fb01e 	bne	r2,zero,5794 <_malloc_r+0x43c>
    58d4:	e4000217 	ldw	r16,8(fp)
    58d8:	9d45883a 	add	r2,r19,r21
    58dc:	10800054 	ori	r2,r2,1
    58e0:	80800115 	stw	r2,4(r16)
    58e4:	b8c00017 	ldw	r3,0(r23)
    58e8:	d0a2c817 	ldw	r2,-29920(gp)
    58ec:	10c0012e 	bgeu	r2,r3,58f4 <_malloc_r+0x59c>
    58f0:	d0e2c815 	stw	r3,-29920(gp)
    58f4:	d0a2c917 	ldw	r2,-29916(gp)
    58f8:	10ff962e 	bgeu	r2,r3,5754 <_malloc_r+0x3fc>
    58fc:	d0e2c915 	stw	r3,-29916(gp)
    5900:	003f9406 	br	5754 <_malloc_r+0x3fc>
    5904:	00800104 	movi	r2,4
    5908:	11001e36 	bltu	r2,r4,5984 <_malloc_r+0x62c>
    590c:	2804d1ba 	srli	r2,r5,6
    5910:	11000e04 	addi	r4,r2,56
    5914:	200690fa 	slli	r3,r4,3
    5918:	003fc506 	br	5830 <_malloc_r+0x4d8>
    591c:	00815504 	movi	r2,1364
    5920:	10c01d2e 	bgeu	r2,r3,5998 <_malloc_r+0x640>
    5924:	01801f84 	movi	r6,126
    5928:	0080fc04 	movi	r2,1008
    592c:	003eb706 	br	540c <_malloc_r+0xb4>
    5930:	00800204 	movi	r2,8
    5934:	10cbc83a 	sub	r5,r2,r3
    5938:	2169883a 	add	r20,r4,r5
    593c:	003f9e06 	br	57b8 <_malloc_r+0x460>
    5940:	00bffe04 	movi	r2,-8
    5944:	a93ffd04 	addi	r4,r21,-12
    5948:	2088703a 	and	r4,r4,r2
    594c:	b10b883a 	add	r5,r22,r4
    5950:	00c00144 	movi	r3,5
    5954:	28c00215 	stw	r3,8(r5)
    5958:	28c00115 	stw	r3,4(r5)
    595c:	b0800117 	ldw	r2,4(r22)
    5960:	1080004c 	andi	r2,r2,1
    5964:	2084b03a 	or	r2,r4,r2
    5968:	b0800115 	stw	r2,4(r22)
    596c:	313fdd2e 	bgeu	r6,r4,58e4 <_malloc_r+0x58c>
    5970:	b1400204 	addi	r5,r22,8
    5974:	9009883a 	mov	r4,r18
    5978:	00047d00 	call	47d0 <_free_r>
    597c:	e4000217 	ldw	r16,8(fp)
    5980:	003fd806 	br	58e4 <_malloc_r+0x58c>
    5984:	00800504 	movi	r2,20
    5988:	11001536 	bltu	r2,r4,59e0 <_malloc_r+0x688>
    598c:	210016c4 	addi	r4,r4,91
    5990:	200690fa 	slli	r3,r4,3
    5994:	003fa606 	br	5830 <_malloc_r+0x4d8>
    5998:	8804d4ba 	srli	r2,r17,18
    599c:	11801f04 	addi	r6,r2,124
    59a0:	300490fa 	slli	r2,r6,3
    59a4:	003e9906 	br	540c <_malloc_r+0xb4>
    59a8:	2009d0ba 	srai	r4,r4,2
    59ac:	01400074 	movhi	r5,1
    59b0:	29732f04 	addi	r5,r5,-13124
    59b4:	00c00044 	movi	r3,1
    59b8:	28800117 	ldw	r2,4(r5)
    59bc:	1906983a 	sll	r3,r3,r4
    59c0:	10c4b03a 	or	r2,r2,r3
    59c4:	28800115 	stw	r2,4(r5)
    59c8:	003fa306 	br	5858 <_malloc_r+0x500>
    59cc:	0027883a 	mov	r19,zero
    59d0:	00c00044 	movi	r3,1
    59d4:	003f8606 	br	57f0 <_malloc_r+0x498>
    59d8:	d1200515 	stw	r4,-32748(gp)
    59dc:	003f7306 	br	57ac <_malloc_r+0x454>
    59e0:	00801504 	movi	r2,84
    59e4:	11001936 	bltu	r2,r4,5a4c <_malloc_r+0x6f4>
    59e8:	2804d33a 	srli	r2,r5,12
    59ec:	11001b84 	addi	r4,r2,110
    59f0:	200690fa 	slli	r3,r4,3
    59f4:	003f8e06 	br	5830 <_malloc_r+0x4d8>
    59f8:	480b883a 	mov	r5,r9
    59fc:	6807883a 	mov	r3,r13
    5a00:	288000cc 	andi	r2,r5,3
    5a04:	18fffe04 	addi	r3,r3,-8
    5a08:	297fffc4 	addi	r5,r5,-1
    5a0c:	10001526 	beq	r2,zero,5a64 <_malloc_r+0x70c>
    5a10:	18800217 	ldw	r2,8(r3)
    5a14:	10fffa26 	beq	r2,r3,5a00 <_malloc_r+0x6a8>
    5a18:	2109883a 	add	r4,r4,r4
    5a1c:	393f1e36 	bltu	r7,r4,5698 <_malloc_r+0x340>
    5a20:	203f1d26 	beq	r4,zero,5698 <_malloc_r+0x340>
    5a24:	21c4703a 	and	r2,r4,r7
    5a28:	10000226 	beq	r2,zero,5a34 <_malloc_r+0x6dc>
    5a2c:	6013883a 	mov	r9,r12
    5a30:	003ee106 	br	55b8 <_malloc_r+0x260>
    5a34:	2109883a 	add	r4,r4,r4
    5a38:	3904703a 	and	r2,r7,r4
    5a3c:	63000104 	addi	r12,r12,4
    5a40:	103ffc26 	beq	r2,zero,5a34 <_malloc_r+0x6dc>
    5a44:	6013883a 	mov	r9,r12
    5a48:	003edb06 	br	55b8 <_malloc_r+0x260>
    5a4c:	00805504 	movi	r2,340
    5a50:	11000836 	bltu	r2,r4,5a74 <_malloc_r+0x71c>
    5a54:	2804d3fa 	srli	r2,r5,15
    5a58:	11001dc4 	addi	r4,r2,119
    5a5c:	200690fa 	slli	r3,r4,3
    5a60:	003f7306 	br	5830 <_malloc_r+0x4d8>
    5a64:	0104303a 	nor	r2,zero,r4
    5a68:	388e703a 	and	r7,r7,r2
    5a6c:	e1c00115 	stw	r7,4(fp)
    5a70:	003fe906 	br	5a18 <_malloc_r+0x6c0>
    5a74:	00815504 	movi	r2,1364
    5a78:	1100032e 	bgeu	r2,r4,5a88 <_malloc_r+0x730>
    5a7c:	01001f84 	movi	r4,126
    5a80:	00c0fc04 	movi	r3,1008
    5a84:	003f6a06 	br	5830 <_malloc_r+0x4d8>
    5a88:	2804d4ba 	srli	r2,r5,18
    5a8c:	11001f04 	addi	r4,r2,124
    5a90:	200690fa 	slli	r3,r4,3
    5a94:	003f6606 	br	5830 <_malloc_r+0x4d8>

00005a98 <memchr>:
    5a98:	008000c4 	movi	r2,3
    5a9c:	29403fcc 	andi	r5,r5,255
    5aa0:	2007883a 	mov	r3,r4
    5aa4:	1180022e 	bgeu	r2,r6,5ab0 <memchr+0x18>
    5aa8:	2084703a 	and	r2,r4,r2
    5aac:	10000b26 	beq	r2,zero,5adc <memchr+0x44>
    5ab0:	313fffc4 	addi	r4,r6,-1
    5ab4:	3000051e 	bne	r6,zero,5acc <memchr+0x34>
    5ab8:	00002c06 	br	5b6c <memchr+0xd4>
    5abc:	213fffc4 	addi	r4,r4,-1
    5ac0:	00bfffc4 	movi	r2,-1
    5ac4:	18c00044 	addi	r3,r3,1
    5ac8:	20802826 	beq	r4,r2,5b6c <memchr+0xd4>
    5acc:	18800003 	ldbu	r2,0(r3)
    5ad0:	28bffa1e 	bne	r5,r2,5abc <memchr+0x24>
    5ad4:	1805883a 	mov	r2,r3
    5ad8:	f800283a 	ret
    5adc:	0011883a 	mov	r8,zero
    5ae0:	0007883a 	mov	r3,zero
    5ae4:	01c00104 	movi	r7,4
    5ae8:	4004923a 	slli	r2,r8,8
    5aec:	18c00044 	addi	r3,r3,1
    5af0:	1151883a 	add	r8,r2,r5
    5af4:	19fffc1e 	bne	r3,r7,5ae8 <memchr+0x50>
    5af8:	02bfbff4 	movhi	r10,65279
    5afc:	52bfbfc4 	addi	r10,r10,-257
    5b00:	02602074 	movhi	r9,32897
    5b04:	4a602004 	addi	r9,r9,-32640
    5b08:	02c000c4 	movi	r11,3
    5b0c:	20800017 	ldw	r2,0(r4)
    5b10:	31bfff04 	addi	r6,r6,-4
    5b14:	200f883a 	mov	r7,r4
    5b18:	1204f03a 	xor	r2,r2,r8
    5b1c:	1287883a 	add	r3,r2,r10
    5b20:	1a46703a 	and	r3,r3,r9
    5b24:	0084303a 	nor	r2,zero,r2
    5b28:	10c4703a 	and	r2,r2,r3
    5b2c:	10000b26 	beq	r2,zero,5b5c <memchr+0xc4>
    5b30:	20800003 	ldbu	r2,0(r4)
    5b34:	28800f26 	beq	r5,r2,5b74 <memchr+0xdc>
    5b38:	20800043 	ldbu	r2,1(r4)
    5b3c:	21c00044 	addi	r7,r4,1
    5b40:	28800c26 	beq	r5,r2,5b74 <memchr+0xdc>
    5b44:	20800083 	ldbu	r2,2(r4)
    5b48:	21c00084 	addi	r7,r4,2
    5b4c:	28800926 	beq	r5,r2,5b74 <memchr+0xdc>
    5b50:	208000c3 	ldbu	r2,3(r4)
    5b54:	21c000c4 	addi	r7,r4,3
    5b58:	28800626 	beq	r5,r2,5b74 <memchr+0xdc>
    5b5c:	21000104 	addi	r4,r4,4
    5b60:	59bfea36 	bltu	r11,r6,5b0c <memchr+0x74>
    5b64:	2007883a 	mov	r3,r4
    5b68:	003fd106 	br	5ab0 <memchr+0x18>
    5b6c:	0005883a 	mov	r2,zero
    5b70:	f800283a 	ret
    5b74:	3805883a 	mov	r2,r7
    5b78:	f800283a 	ret

00005b7c <memcpy>:
    5b7c:	01c003c4 	movi	r7,15
    5b80:	2007883a 	mov	r3,r4
    5b84:	3980032e 	bgeu	r7,r6,5b94 <memcpy+0x18>
    5b88:	2904b03a 	or	r2,r5,r4
    5b8c:	108000cc 	andi	r2,r2,3
    5b90:	10000926 	beq	r2,zero,5bb8 <memcpy+0x3c>
    5b94:	30000626 	beq	r6,zero,5bb0 <memcpy+0x34>
    5b98:	30cd883a 	add	r6,r6,r3
    5b9c:	28800003 	ldbu	r2,0(r5)
    5ba0:	29400044 	addi	r5,r5,1
    5ba4:	18800005 	stb	r2,0(r3)
    5ba8:	18c00044 	addi	r3,r3,1
    5bac:	30fffb1e 	bne	r6,r3,5b9c <memcpy+0x20>
    5bb0:	2005883a 	mov	r2,r4
    5bb4:	f800283a 	ret
    5bb8:	3811883a 	mov	r8,r7
    5bbc:	200f883a 	mov	r7,r4
    5bc0:	28c00017 	ldw	r3,0(r5)
    5bc4:	31bffc04 	addi	r6,r6,-16
    5bc8:	38c00015 	stw	r3,0(r7)
    5bcc:	28800117 	ldw	r2,4(r5)
    5bd0:	38800115 	stw	r2,4(r7)
    5bd4:	28c00217 	ldw	r3,8(r5)
    5bd8:	38c00215 	stw	r3,8(r7)
    5bdc:	28800317 	ldw	r2,12(r5)
    5be0:	29400404 	addi	r5,r5,16
    5be4:	38800315 	stw	r2,12(r7)
    5be8:	39c00404 	addi	r7,r7,16
    5bec:	41bff436 	bltu	r8,r6,5bc0 <memcpy+0x44>
    5bf0:	008000c4 	movi	r2,3
    5bf4:	1180072e 	bgeu	r2,r6,5c14 <memcpy+0x98>
    5bf8:	1007883a 	mov	r3,r2
    5bfc:	28800017 	ldw	r2,0(r5)
    5c00:	31bfff04 	addi	r6,r6,-4
    5c04:	29400104 	addi	r5,r5,4
    5c08:	38800015 	stw	r2,0(r7)
    5c0c:	39c00104 	addi	r7,r7,4
    5c10:	19bffa36 	bltu	r3,r6,5bfc <memcpy+0x80>
    5c14:	3807883a 	mov	r3,r7
    5c18:	003fde06 	br	5b94 <memcpy+0x18>

00005c1c <memmove>:
    5c1c:	2807883a 	mov	r3,r5
    5c20:	2011883a 	mov	r8,r4
    5c24:	29000c2e 	bgeu	r5,r4,5c58 <memmove+0x3c>
    5c28:	298f883a 	add	r7,r5,r6
    5c2c:	21c00a2e 	bgeu	r4,r7,5c58 <memmove+0x3c>
    5c30:	30000726 	beq	r6,zero,5c50 <memmove+0x34>
    5c34:	2187883a 	add	r3,r4,r6
    5c38:	198dc83a 	sub	r6,r3,r6
    5c3c:	39ffffc4 	addi	r7,r7,-1
    5c40:	38800003 	ldbu	r2,0(r7)
    5c44:	18ffffc4 	addi	r3,r3,-1
    5c48:	18800005 	stb	r2,0(r3)
    5c4c:	19bffb1e 	bne	r3,r6,5c3c <memmove+0x20>
    5c50:	2005883a 	mov	r2,r4
    5c54:	f800283a 	ret
    5c58:	01c003c4 	movi	r7,15
    5c5c:	39800a36 	bltu	r7,r6,5c88 <memmove+0x6c>
    5c60:	303ffb26 	beq	r6,zero,5c50 <memmove+0x34>
    5c64:	400f883a 	mov	r7,r8
    5c68:	320d883a 	add	r6,r6,r8
    5c6c:	28800003 	ldbu	r2,0(r5)
    5c70:	29400044 	addi	r5,r5,1
    5c74:	38800005 	stb	r2,0(r7)
    5c78:	39c00044 	addi	r7,r7,1
    5c7c:	39bffb1e 	bne	r7,r6,5c6c <memmove+0x50>
    5c80:	2005883a 	mov	r2,r4
    5c84:	f800283a 	ret
    5c88:	1904b03a 	or	r2,r3,r4
    5c8c:	108000cc 	andi	r2,r2,3
    5c90:	103ff31e 	bne	r2,zero,5c60 <memmove+0x44>
    5c94:	3811883a 	mov	r8,r7
    5c98:	180b883a 	mov	r5,r3
    5c9c:	200f883a 	mov	r7,r4
    5ca0:	28c00017 	ldw	r3,0(r5)
    5ca4:	31bffc04 	addi	r6,r6,-16
    5ca8:	38c00015 	stw	r3,0(r7)
    5cac:	28800117 	ldw	r2,4(r5)
    5cb0:	38800115 	stw	r2,4(r7)
    5cb4:	28c00217 	ldw	r3,8(r5)
    5cb8:	38c00215 	stw	r3,8(r7)
    5cbc:	28800317 	ldw	r2,12(r5)
    5cc0:	29400404 	addi	r5,r5,16
    5cc4:	38800315 	stw	r2,12(r7)
    5cc8:	39c00404 	addi	r7,r7,16
    5ccc:	41bff436 	bltu	r8,r6,5ca0 <memmove+0x84>
    5cd0:	008000c4 	movi	r2,3
    5cd4:	1180072e 	bgeu	r2,r6,5cf4 <memmove+0xd8>
    5cd8:	1007883a 	mov	r3,r2
    5cdc:	28800017 	ldw	r2,0(r5)
    5ce0:	31bfff04 	addi	r6,r6,-4
    5ce4:	29400104 	addi	r5,r5,4
    5ce8:	38800015 	stw	r2,0(r7)
    5cec:	39c00104 	addi	r7,r7,4
    5cf0:	19bffa36 	bltu	r3,r6,5cdc <memmove+0xc0>
    5cf4:	3811883a 	mov	r8,r7
    5cf8:	003fd906 	br	5c60 <memmove+0x44>

00005cfc <memset>:
    5cfc:	008000c4 	movi	r2,3
    5d00:	29403fcc 	andi	r5,r5,255
    5d04:	2007883a 	mov	r3,r4
    5d08:	1180022e 	bgeu	r2,r6,5d14 <memset+0x18>
    5d0c:	2084703a 	and	r2,r4,r2
    5d10:	10000826 	beq	r2,zero,5d34 <memset+0x38>
    5d14:	30000526 	beq	r6,zero,5d2c <memset+0x30>
    5d18:	2805883a 	mov	r2,r5
    5d1c:	30cd883a 	add	r6,r6,r3
    5d20:	18800005 	stb	r2,0(r3)
    5d24:	18c00044 	addi	r3,r3,1
    5d28:	19bffd1e 	bne	r3,r6,5d20 <memset+0x24>
    5d2c:	2005883a 	mov	r2,r4
    5d30:	f800283a 	ret
    5d34:	2804923a 	slli	r2,r5,8
    5d38:	020003c4 	movi	r8,15
    5d3c:	200f883a 	mov	r7,r4
    5d40:	2884b03a 	or	r2,r5,r2
    5d44:	1006943a 	slli	r3,r2,16
    5d48:	10c6b03a 	or	r3,r2,r3
    5d4c:	41800a2e 	bgeu	r8,r6,5d78 <memset+0x7c>
    5d50:	4005883a 	mov	r2,r8
    5d54:	31bffc04 	addi	r6,r6,-16
    5d58:	38c00015 	stw	r3,0(r7)
    5d5c:	38c00115 	stw	r3,4(r7)
    5d60:	38c00215 	stw	r3,8(r7)
    5d64:	38c00315 	stw	r3,12(r7)
    5d68:	39c00404 	addi	r7,r7,16
    5d6c:	11bff936 	bltu	r2,r6,5d54 <memset+0x58>
    5d70:	008000c4 	movi	r2,3
    5d74:	1180052e 	bgeu	r2,r6,5d8c <memset+0x90>
    5d78:	31bfff04 	addi	r6,r6,-4
    5d7c:	008000c4 	movi	r2,3
    5d80:	38c00015 	stw	r3,0(r7)
    5d84:	39c00104 	addi	r7,r7,4
    5d88:	11bffb36 	bltu	r2,r6,5d78 <memset+0x7c>
    5d8c:	3807883a 	mov	r3,r7
    5d90:	003fe006 	br	5d14 <memset+0x18>

00005d94 <_Bfree>:
    5d94:	28000826 	beq	r5,zero,5db8 <_Bfree+0x24>
    5d98:	28800117 	ldw	r2,4(r5)
    5d9c:	21001317 	ldw	r4,76(r4)
    5da0:	1085883a 	add	r2,r2,r2
    5da4:	1085883a 	add	r2,r2,r2
    5da8:	1105883a 	add	r2,r2,r4
    5dac:	10c00017 	ldw	r3,0(r2)
    5db0:	28c00015 	stw	r3,0(r5)
    5db4:	11400015 	stw	r5,0(r2)
    5db8:	f800283a 	ret

00005dbc <__hi0bits>:
    5dbc:	20bfffec 	andhi	r2,r4,65535
    5dc0:	10001426 	beq	r2,zero,5e14 <__hi0bits+0x58>
    5dc4:	0007883a 	mov	r3,zero
    5dc8:	20bfc02c 	andhi	r2,r4,65280
    5dcc:	1000021e 	bne	r2,zero,5dd8 <__hi0bits+0x1c>
    5dd0:	2008923a 	slli	r4,r4,8
    5dd4:	18c00204 	addi	r3,r3,8
    5dd8:	20bc002c 	andhi	r2,r4,61440
    5ddc:	1000021e 	bne	r2,zero,5de8 <__hi0bits+0x2c>
    5de0:	2008913a 	slli	r4,r4,4
    5de4:	18c00104 	addi	r3,r3,4
    5de8:	20b0002c 	andhi	r2,r4,49152
    5dec:	1000031e 	bne	r2,zero,5dfc <__hi0bits+0x40>
    5df0:	2105883a 	add	r2,r4,r4
    5df4:	18c00084 	addi	r3,r3,2
    5df8:	1089883a 	add	r4,r2,r2
    5dfc:	20000316 	blt	r4,zero,5e0c <__hi0bits+0x50>
    5e00:	2090002c 	andhi	r2,r4,16384
    5e04:	10000626 	beq	r2,zero,5e20 <__hi0bits+0x64>
    5e08:	18c00044 	addi	r3,r3,1
    5e0c:	1805883a 	mov	r2,r3
    5e10:	f800283a 	ret
    5e14:	2008943a 	slli	r4,r4,16
    5e18:	00c00404 	movi	r3,16
    5e1c:	003fea06 	br	5dc8 <__hi0bits+0xc>
    5e20:	00c00804 	movi	r3,32
    5e24:	1805883a 	mov	r2,r3
    5e28:	f800283a 	ret

00005e2c <__lo0bits>:
    5e2c:	20c00017 	ldw	r3,0(r4)
    5e30:	188001cc 	andi	r2,r3,7
    5e34:	10000a26 	beq	r2,zero,5e60 <__lo0bits+0x34>
    5e38:	1880004c 	andi	r2,r3,1
    5e3c:	1005003a 	cmpeq	r2,r2,zero
    5e40:	10002126 	beq	r2,zero,5ec8 <__lo0bits+0x9c>
    5e44:	1880008c 	andi	r2,r3,2
    5e48:	1000251e 	bne	r2,zero,5ee0 <__lo0bits+0xb4>
    5e4c:	1804d0ba 	srli	r2,r3,2
    5e50:	01400084 	movi	r5,2
    5e54:	20800015 	stw	r2,0(r4)
    5e58:	2805883a 	mov	r2,r5
    5e5c:	f800283a 	ret
    5e60:	18bfffcc 	andi	r2,r3,65535
    5e64:	10001526 	beq	r2,zero,5ebc <__lo0bits+0x90>
    5e68:	000b883a 	mov	r5,zero
    5e6c:	18803fcc 	andi	r2,r3,255
    5e70:	1000021e 	bne	r2,zero,5e7c <__lo0bits+0x50>
    5e74:	1806d23a 	srli	r3,r3,8
    5e78:	29400204 	addi	r5,r5,8
    5e7c:	188003cc 	andi	r2,r3,15
    5e80:	1000021e 	bne	r2,zero,5e8c <__lo0bits+0x60>
    5e84:	1806d13a 	srli	r3,r3,4
    5e88:	29400104 	addi	r5,r5,4
    5e8c:	188000cc 	andi	r2,r3,3
    5e90:	1000021e 	bne	r2,zero,5e9c <__lo0bits+0x70>
    5e94:	1806d0ba 	srli	r3,r3,2
    5e98:	29400084 	addi	r5,r5,2
    5e9c:	1880004c 	andi	r2,r3,1
    5ea0:	1000031e 	bne	r2,zero,5eb0 <__lo0bits+0x84>
    5ea4:	1806d07a 	srli	r3,r3,1
    5ea8:	18000a26 	beq	r3,zero,5ed4 <__lo0bits+0xa8>
    5eac:	29400044 	addi	r5,r5,1
    5eb0:	2805883a 	mov	r2,r5
    5eb4:	20c00015 	stw	r3,0(r4)
    5eb8:	f800283a 	ret
    5ebc:	1806d43a 	srli	r3,r3,16
    5ec0:	01400404 	movi	r5,16
    5ec4:	003fe906 	br	5e6c <__lo0bits+0x40>
    5ec8:	000b883a 	mov	r5,zero
    5ecc:	2805883a 	mov	r2,r5
    5ed0:	f800283a 	ret
    5ed4:	01400804 	movi	r5,32
    5ed8:	2805883a 	mov	r2,r5
    5edc:	f800283a 	ret
    5ee0:	1804d07a 	srli	r2,r3,1
    5ee4:	01400044 	movi	r5,1
    5ee8:	20800015 	stw	r2,0(r4)
    5eec:	003fda06 	br	5e58 <__lo0bits+0x2c>

00005ef0 <__mcmp>:
    5ef0:	20800417 	ldw	r2,16(r4)
    5ef4:	28c00417 	ldw	r3,16(r5)
    5ef8:	10cfc83a 	sub	r7,r2,r3
    5efc:	38000c1e 	bne	r7,zero,5f30 <__mcmp+0x40>
    5f00:	18c5883a 	add	r2,r3,r3
    5f04:	1085883a 	add	r2,r2,r2
    5f08:	10c00504 	addi	r3,r2,20
    5f0c:	21000504 	addi	r4,r4,20
    5f10:	28cb883a 	add	r5,r5,r3
    5f14:	2085883a 	add	r2,r4,r2
    5f18:	10bfff04 	addi	r2,r2,-4
    5f1c:	297fff04 	addi	r5,r5,-4
    5f20:	11800017 	ldw	r6,0(r2)
    5f24:	28c00017 	ldw	r3,0(r5)
    5f28:	30c0031e 	bne	r6,r3,5f38 <__mcmp+0x48>
    5f2c:	20bffa36 	bltu	r4,r2,5f18 <__mcmp+0x28>
    5f30:	3805883a 	mov	r2,r7
    5f34:	f800283a 	ret
    5f38:	30c00336 	bltu	r6,r3,5f48 <__mcmp+0x58>
    5f3c:	01c00044 	movi	r7,1
    5f40:	3805883a 	mov	r2,r7
    5f44:	f800283a 	ret
    5f48:	01ffffc4 	movi	r7,-1
    5f4c:	003ff806 	br	5f30 <__mcmp+0x40>

00005f50 <__ulp>:
    5f50:	295ffc2c 	andhi	r5,r5,32752
    5f54:	013f3034 	movhi	r4,64704
    5f58:	290b883a 	add	r5,r5,r4
    5f5c:	0145c83a 	sub	r2,zero,r5
    5f60:	1007d53a 	srai	r3,r2,20
    5f64:	000d883a 	mov	r6,zero
    5f68:	0140040e 	bge	zero,r5,5f7c <__ulp+0x2c>
    5f6c:	280f883a 	mov	r7,r5
    5f70:	3807883a 	mov	r3,r7
    5f74:	3005883a 	mov	r2,r6
    5f78:	f800283a 	ret
    5f7c:	008004c4 	movi	r2,19
    5f80:	193ffb04 	addi	r4,r3,-20
    5f84:	10c00c0e 	bge	r2,r3,5fb8 <__ulp+0x68>
    5f88:	008007c4 	movi	r2,31
    5f8c:	1107c83a 	sub	r3,r2,r4
    5f90:	00800784 	movi	r2,30
    5f94:	01400044 	movi	r5,1
    5f98:	11000216 	blt	r2,r4,5fa4 <__ulp+0x54>
    5f9c:	00800044 	movi	r2,1
    5fa0:	10ca983a 	sll	r5,r2,r3
    5fa4:	000f883a 	mov	r7,zero
    5fa8:	280d883a 	mov	r6,r5
    5fac:	3807883a 	mov	r3,r7
    5fb0:	3005883a 	mov	r2,r6
    5fb4:	f800283a 	ret
    5fb8:	00800234 	movhi	r2,8
    5fbc:	10cfd83a 	sra	r7,r2,r3
    5fc0:	000d883a 	mov	r6,zero
    5fc4:	3005883a 	mov	r2,r6
    5fc8:	3807883a 	mov	r3,r7
    5fcc:	f800283a 	ret

00005fd0 <__b2d>:
    5fd0:	20800417 	ldw	r2,16(r4)
    5fd4:	defff904 	addi	sp,sp,-28
    5fd8:	dd000415 	stw	r20,16(sp)
    5fdc:	1085883a 	add	r2,r2,r2
    5fe0:	25000504 	addi	r20,r4,20
    5fe4:	1085883a 	add	r2,r2,r2
    5fe8:	dc000015 	stw	r16,0(sp)
    5fec:	a0a1883a 	add	r16,r20,r2
    5ff0:	dd400515 	stw	r21,20(sp)
    5ff4:	857fff17 	ldw	r21,-4(r16)
    5ff8:	dc400115 	stw	r17,4(sp)
    5ffc:	dfc00615 	stw	ra,24(sp)
    6000:	a809883a 	mov	r4,r21
    6004:	2823883a 	mov	r17,r5
    6008:	dcc00315 	stw	r19,12(sp)
    600c:	dc800215 	stw	r18,8(sp)
    6010:	0005dbc0 	call	5dbc <__hi0bits>
    6014:	100b883a 	mov	r5,r2
    6018:	00800804 	movi	r2,32
    601c:	1145c83a 	sub	r2,r2,r5
    6020:	88800015 	stw	r2,0(r17)
    6024:	00800284 	movi	r2,10
    6028:	80ffff04 	addi	r3,r16,-4
    602c:	11401416 	blt	r2,r5,6080 <__b2d+0xb0>
    6030:	008002c4 	movi	r2,11
    6034:	1149c83a 	sub	r4,r2,r5
    6038:	a0c02736 	bltu	r20,r3,60d8 <__b2d+0x108>
    603c:	000d883a 	mov	r6,zero
    6040:	28800544 	addi	r2,r5,21
    6044:	a906d83a 	srl	r3,r21,r4
    6048:	a884983a 	sll	r2,r21,r2
    604c:	1ccffc34 	orhi	r19,r3,16368
    6050:	11a4b03a 	or	r18,r2,r6
    6054:	9005883a 	mov	r2,r18
    6058:	9807883a 	mov	r3,r19
    605c:	dfc00617 	ldw	ra,24(sp)
    6060:	dd400517 	ldw	r21,20(sp)
    6064:	dd000417 	ldw	r20,16(sp)
    6068:	dcc00317 	ldw	r19,12(sp)
    606c:	dc800217 	ldw	r18,8(sp)
    6070:	dc400117 	ldw	r17,4(sp)
    6074:	dc000017 	ldw	r16,0(sp)
    6078:	dec00704 	addi	sp,sp,28
    607c:	f800283a 	ret
    6080:	a0c00e36 	bltu	r20,r3,60bc <__b2d+0xec>
    6084:	293ffd44 	addi	r4,r5,-11
    6088:	000d883a 	mov	r6,zero
    608c:	20000f26 	beq	r4,zero,60cc <__b2d+0xfc>
    6090:	00800804 	movi	r2,32
    6094:	110bc83a 	sub	r5,r2,r4
    6098:	a0c01236 	bltu	r20,r3,60e4 <__b2d+0x114>
    609c:	000f883a 	mov	r7,zero
    60a0:	a904983a 	sll	r2,r21,r4
    60a4:	3146d83a 	srl	r3,r6,r5
    60a8:	3108983a 	sll	r4,r6,r4
    60ac:	108ffc34 	orhi	r2,r2,16368
    60b0:	18a6b03a 	or	r19,r3,r2
    60b4:	3924b03a 	or	r18,r7,r4
    60b8:	003fe606 	br	6054 <__b2d+0x84>
    60bc:	293ffd44 	addi	r4,r5,-11
    60c0:	81bffe17 	ldw	r6,-8(r16)
    60c4:	80fffe04 	addi	r3,r16,-8
    60c8:	203ff11e 	bne	r4,zero,6090 <__b2d+0xc0>
    60cc:	accffc34 	orhi	r19,r21,16368
    60d0:	3025883a 	mov	r18,r6
    60d4:	003fdf06 	br	6054 <__b2d+0x84>
    60d8:	18bfff17 	ldw	r2,-4(r3)
    60dc:	110cd83a 	srl	r6,r2,r4
    60e0:	003fd706 	br	6040 <__b2d+0x70>
    60e4:	18bfff17 	ldw	r2,-4(r3)
    60e8:	114ed83a 	srl	r7,r2,r5
    60ec:	003fec06 	br	60a0 <__b2d+0xd0>

000060f0 <__ratio>:
    60f0:	defff904 	addi	sp,sp,-28
    60f4:	dc400215 	stw	r17,8(sp)
    60f8:	2823883a 	mov	r17,r5
    60fc:	d80b883a 	mov	r5,sp
    6100:	dfc00615 	stw	ra,24(sp)
    6104:	dd000515 	stw	r20,20(sp)
    6108:	dcc00415 	stw	r19,16(sp)
    610c:	dc800315 	stw	r18,12(sp)
    6110:	2025883a 	mov	r18,r4
    6114:	0005fd00 	call	5fd0 <__b2d>
    6118:	8809883a 	mov	r4,r17
    611c:	d9400104 	addi	r5,sp,4
    6120:	1027883a 	mov	r19,r2
    6124:	1829883a 	mov	r20,r3
    6128:	0005fd00 	call	5fd0 <__b2d>
    612c:	89000417 	ldw	r4,16(r17)
    6130:	91c00417 	ldw	r7,16(r18)
    6134:	d9800117 	ldw	r6,4(sp)
    6138:	180b883a 	mov	r5,r3
    613c:	390fc83a 	sub	r7,r7,r4
    6140:	1009883a 	mov	r4,r2
    6144:	d8800017 	ldw	r2,0(sp)
    6148:	380e917a 	slli	r7,r7,5
    614c:	2011883a 	mov	r8,r4
    6150:	1185c83a 	sub	r2,r2,r6
    6154:	11c5883a 	add	r2,r2,r7
    6158:	1006953a 	slli	r3,r2,20
    615c:	2813883a 	mov	r9,r5
    6160:	00800d0e 	bge	zero,r2,6198 <__ratio+0xa8>
    6164:	1d29883a 	add	r20,r3,r20
    6168:	a00b883a 	mov	r5,r20
    616c:	480f883a 	mov	r7,r9
    6170:	9809883a 	mov	r4,r19
    6174:	400d883a 	mov	r6,r8
    6178:	0008fc00 	call	8fc0 <__divdf3>
    617c:	dfc00617 	ldw	ra,24(sp)
    6180:	dd000517 	ldw	r20,20(sp)
    6184:	dcc00417 	ldw	r19,16(sp)
    6188:	dc800317 	ldw	r18,12(sp)
    618c:	dc400217 	ldw	r17,8(sp)
    6190:	dec00704 	addi	sp,sp,28
    6194:	f800283a 	ret
    6198:	28d3c83a 	sub	r9,r5,r3
    619c:	003ff206 	br	6168 <__ratio+0x78>

000061a0 <_mprec_log10>:
    61a0:	defffe04 	addi	sp,sp,-8
    61a4:	008005c4 	movi	r2,23
    61a8:	dc000015 	stw	r16,0(sp)
    61ac:	dfc00115 	stw	ra,4(sp)
    61b0:	2021883a 	mov	r16,r4
    61b4:	11000c16 	blt	r2,r4,61e8 <_mprec_log10+0x48>
    61b8:	200490fa 	slli	r2,r4,3
    61bc:	00c00074 	movhi	r3,1
    61c0:	18f18d04 	addi	r3,r3,-14796
    61c4:	10c5883a 	add	r2,r2,r3
    61c8:	12400117 	ldw	r9,4(r2)
    61cc:	12000017 	ldw	r8,0(r2)
    61d0:	4807883a 	mov	r3,r9
    61d4:	4005883a 	mov	r2,r8
    61d8:	dfc00117 	ldw	ra,4(sp)
    61dc:	dc000017 	ldw	r16,0(sp)
    61e0:	dec00204 	addi	sp,sp,8
    61e4:	f800283a 	ret
    61e8:	0011883a 	mov	r8,zero
    61ec:	024ffc34 	movhi	r9,16368
    61f0:	0005883a 	mov	r2,zero
    61f4:	00d00934 	movhi	r3,16420
    61f8:	480b883a 	mov	r5,r9
    61fc:	4009883a 	mov	r4,r8
    6200:	180f883a 	mov	r7,r3
    6204:	100d883a 	mov	r6,r2
    6208:	0008bfc0 	call	8bfc <__muldf3>
    620c:	843fffc4 	addi	r16,r16,-1
    6210:	1011883a 	mov	r8,r2
    6214:	1813883a 	mov	r9,r3
    6218:	803ff51e 	bne	r16,zero,61f0 <_mprec_log10+0x50>
    621c:	4005883a 	mov	r2,r8
    6220:	4807883a 	mov	r3,r9
    6224:	dfc00117 	ldw	ra,4(sp)
    6228:	dc000017 	ldw	r16,0(sp)
    622c:	dec00204 	addi	sp,sp,8
    6230:	f800283a 	ret

00006234 <__copybits>:
    6234:	297fffc4 	addi	r5,r5,-1
    6238:	30800417 	ldw	r2,16(r6)
    623c:	280bd17a 	srai	r5,r5,5
    6240:	31800504 	addi	r6,r6,20
    6244:	1085883a 	add	r2,r2,r2
    6248:	294b883a 	add	r5,r5,r5
    624c:	294b883a 	add	r5,r5,r5
    6250:	1085883a 	add	r2,r2,r2
    6254:	290b883a 	add	r5,r5,r4
    6258:	3087883a 	add	r3,r6,r2
    625c:	29400104 	addi	r5,r5,4
    6260:	30c0052e 	bgeu	r6,r3,6278 <__copybits+0x44>
    6264:	30800017 	ldw	r2,0(r6)
    6268:	31800104 	addi	r6,r6,4
    626c:	20800015 	stw	r2,0(r4)
    6270:	21000104 	addi	r4,r4,4
    6274:	30fffb36 	bltu	r6,r3,6264 <__copybits+0x30>
    6278:	2140032e 	bgeu	r4,r5,6288 <__copybits+0x54>
    627c:	20000015 	stw	zero,0(r4)
    6280:	21000104 	addi	r4,r4,4
    6284:	217ffd36 	bltu	r4,r5,627c <__copybits+0x48>
    6288:	f800283a 	ret

0000628c <__any_on>:
    628c:	20800417 	ldw	r2,16(r4)
    6290:	2807d17a 	srai	r3,r5,5
    6294:	21000504 	addi	r4,r4,20
    6298:	10c00d0e 	bge	r2,r3,62d0 <__any_on+0x44>
    629c:	1085883a 	add	r2,r2,r2
    62a0:	1085883a 	add	r2,r2,r2
    62a4:	208d883a 	add	r6,r4,r2
    62a8:	2180182e 	bgeu	r4,r6,630c <__any_on+0x80>
    62ac:	30bfff17 	ldw	r2,-4(r6)
    62b0:	30ffff04 	addi	r3,r6,-4
    62b4:	1000041e 	bne	r2,zero,62c8 <__any_on+0x3c>
    62b8:	20c0142e 	bgeu	r4,r3,630c <__any_on+0x80>
    62bc:	18ffff04 	addi	r3,r3,-4
    62c0:	18800017 	ldw	r2,0(r3)
    62c4:	103ffc26 	beq	r2,zero,62b8 <__any_on+0x2c>
    62c8:	00800044 	movi	r2,1
    62cc:	f800283a 	ret
    62d0:	18800a0e 	bge	r3,r2,62fc <__any_on+0x70>
    62d4:	294007cc 	andi	r5,r5,31
    62d8:	28000826 	beq	r5,zero,62fc <__any_on+0x70>
    62dc:	18c5883a 	add	r2,r3,r3
    62e0:	1085883a 	add	r2,r2,r2
    62e4:	208d883a 	add	r6,r4,r2
    62e8:	30c00017 	ldw	r3,0(r6)
    62ec:	1944d83a 	srl	r2,r3,r5
    62f0:	1144983a 	sll	r2,r2,r5
    62f4:	18bff41e 	bne	r3,r2,62c8 <__any_on+0x3c>
    62f8:	003feb06 	br	62a8 <__any_on+0x1c>
    62fc:	18c5883a 	add	r2,r3,r3
    6300:	1085883a 	add	r2,r2,r2
    6304:	208d883a 	add	r6,r4,r2
    6308:	003fe706 	br	62a8 <__any_on+0x1c>
    630c:	0005883a 	mov	r2,zero
    6310:	f800283a 	ret

00006314 <_Balloc>:
    6314:	20c01317 	ldw	r3,76(r4)
    6318:	defffb04 	addi	sp,sp,-20
    631c:	dcc00315 	stw	r19,12(sp)
    6320:	dc800215 	stw	r18,8(sp)
    6324:	dfc00415 	stw	ra,16(sp)
    6328:	2825883a 	mov	r18,r5
    632c:	dc400115 	stw	r17,4(sp)
    6330:	dc000015 	stw	r16,0(sp)
    6334:	2027883a 	mov	r19,r4
    6338:	01800404 	movi	r6,16
    633c:	01400104 	movi	r5,4
    6340:	18001726 	beq	r3,zero,63a0 <_Balloc+0x8c>
    6344:	01400044 	movi	r5,1
    6348:	9485883a 	add	r2,r18,r18
    634c:	2ca2983a 	sll	r17,r5,r18
    6350:	1085883a 	add	r2,r2,r2
    6354:	10c7883a 	add	r3,r2,r3
    6358:	1c000017 	ldw	r16,0(r3)
    635c:	8c4d883a 	add	r6,r17,r17
    6360:	318d883a 	add	r6,r6,r6
    6364:	9809883a 	mov	r4,r19
    6368:	31800504 	addi	r6,r6,20
    636c:	80001226 	beq	r16,zero,63b8 <_Balloc+0xa4>
    6370:	80800017 	ldw	r2,0(r16)
    6374:	18800015 	stw	r2,0(r3)
    6378:	80000415 	stw	zero,16(r16)
    637c:	80000315 	stw	zero,12(r16)
    6380:	8005883a 	mov	r2,r16
    6384:	dfc00417 	ldw	ra,16(sp)
    6388:	dcc00317 	ldw	r19,12(sp)
    638c:	dc800217 	ldw	r18,8(sp)
    6390:	dc400117 	ldw	r17,4(sp)
    6394:	dc000017 	ldw	r16,0(sp)
    6398:	dec00504 	addi	sp,sp,20
    639c:	f800283a 	ret
    63a0:	00077500 	call	7750 <_calloc_r>
    63a4:	1007883a 	mov	r3,r2
    63a8:	0021883a 	mov	r16,zero
    63ac:	98801315 	stw	r2,76(r19)
    63b0:	103fe41e 	bne	r2,zero,6344 <_Balloc+0x30>
    63b4:	003ff206 	br	6380 <_Balloc+0x6c>
    63b8:	00077500 	call	7750 <_calloc_r>
    63bc:	103ff026 	beq	r2,zero,6380 <_Balloc+0x6c>
    63c0:	1021883a 	mov	r16,r2
    63c4:	14800115 	stw	r18,4(r2)
    63c8:	14400215 	stw	r17,8(r2)
    63cc:	003fea06 	br	6378 <_Balloc+0x64>

000063d0 <__d2b>:
    63d0:	defff504 	addi	sp,sp,-44
    63d4:	dcc00515 	stw	r19,20(sp)
    63d8:	04c00044 	movi	r19,1
    63dc:	dc000215 	stw	r16,8(sp)
    63e0:	2821883a 	mov	r16,r5
    63e4:	980b883a 	mov	r5,r19
    63e8:	ddc00915 	stw	r23,36(sp)
    63ec:	dd800815 	stw	r22,32(sp)
    63f0:	dd400715 	stw	r21,28(sp)
    63f4:	dd000615 	stw	r20,24(sp)
    63f8:	dc800415 	stw	r18,16(sp)
    63fc:	dc400315 	stw	r17,12(sp)
    6400:	dfc00a15 	stw	ra,40(sp)
    6404:	3023883a 	mov	r17,r6
    6408:	382d883a 	mov	r22,r7
    640c:	ddc00b17 	ldw	r23,44(sp)
    6410:	00063140 	call	6314 <_Balloc>
    6414:	1025883a 	mov	r18,r2
    6418:	00a00034 	movhi	r2,32768
    641c:	10bfffc4 	addi	r2,r2,-1
    6420:	8888703a 	and	r4,r17,r2
    6424:	202ad53a 	srli	r21,r4,20
    6428:	00800434 	movhi	r2,16
    642c:	10bfffc4 	addi	r2,r2,-1
    6430:	8886703a 	and	r3,r17,r2
    6434:	a829003a 	cmpeq	r20,r21,zero
    6438:	800b883a 	mov	r5,r16
    643c:	d8c00115 	stw	r3,4(sp)
    6440:	94000504 	addi	r16,r18,20
    6444:	a000021e 	bne	r20,zero,6450 <__d2b+0x80>
    6448:	18c00434 	orhi	r3,r3,16
    644c:	d8c00115 	stw	r3,4(sp)
    6450:	28002726 	beq	r5,zero,64f0 <__d2b+0x120>
    6454:	d809883a 	mov	r4,sp
    6458:	d9400015 	stw	r5,0(sp)
    645c:	0005e2c0 	call	5e2c <__lo0bits>
    6460:	100d883a 	mov	r6,r2
    6464:	10003526 	beq	r2,zero,653c <__d2b+0x16c>
    6468:	d8c00117 	ldw	r3,4(sp)
    646c:	00800804 	movi	r2,32
    6470:	1185c83a 	sub	r2,r2,r6
    6474:	d9000017 	ldw	r4,0(sp)
    6478:	1886983a 	sll	r3,r3,r2
    647c:	1906b03a 	or	r3,r3,r4
    6480:	90c00515 	stw	r3,20(r18)
    6484:	d8c00117 	ldw	r3,4(sp)
    6488:	1986d83a 	srl	r3,r3,r6
    648c:	d8c00115 	stw	r3,4(sp)
    6490:	180b003a 	cmpeq	r5,r3,zero
    6494:	00800084 	movi	r2,2
    6498:	114bc83a 	sub	r5,r2,r5
    649c:	80c00115 	stw	r3,4(r16)
    64a0:	91400415 	stw	r5,16(r18)
    64a4:	a0001a1e 	bne	r20,zero,6510 <__d2b+0x140>
    64a8:	3545883a 	add	r2,r6,r21
    64ac:	10bef344 	addi	r2,r2,-1075
    64b0:	00c00d44 	movi	r3,53
    64b4:	b0800015 	stw	r2,0(r22)
    64b8:	1987c83a 	sub	r3,r3,r6
    64bc:	b8c00015 	stw	r3,0(r23)
    64c0:	9005883a 	mov	r2,r18
    64c4:	dfc00a17 	ldw	ra,40(sp)
    64c8:	ddc00917 	ldw	r23,36(sp)
    64cc:	dd800817 	ldw	r22,32(sp)
    64d0:	dd400717 	ldw	r21,28(sp)
    64d4:	dd000617 	ldw	r20,24(sp)
    64d8:	dcc00517 	ldw	r19,20(sp)
    64dc:	dc800417 	ldw	r18,16(sp)
    64e0:	dc400317 	ldw	r17,12(sp)
    64e4:	dc000217 	ldw	r16,8(sp)
    64e8:	dec00b04 	addi	sp,sp,44
    64ec:	f800283a 	ret
    64f0:	d9000104 	addi	r4,sp,4
    64f4:	0005e2c0 	call	5e2c <__lo0bits>
    64f8:	11800804 	addi	r6,r2,32
    64fc:	d8800117 	ldw	r2,4(sp)
    6500:	94c00415 	stw	r19,16(r18)
    6504:	980b883a 	mov	r5,r19
    6508:	90800515 	stw	r2,20(r18)
    650c:	a03fe626 	beq	r20,zero,64a8 <__d2b+0xd8>
    6510:	2945883a 	add	r2,r5,r5
    6514:	1085883a 	add	r2,r2,r2
    6518:	1405883a 	add	r2,r2,r16
    651c:	113fff17 	ldw	r4,-4(r2)
    6520:	30fef384 	addi	r3,r6,-1074
    6524:	2820917a 	slli	r16,r5,5
    6528:	b0c00015 	stw	r3,0(r22)
    652c:	0005dbc0 	call	5dbc <__hi0bits>
    6530:	80a1c83a 	sub	r16,r16,r2
    6534:	bc000015 	stw	r16,0(r23)
    6538:	003fe106 	br	64c0 <__d2b+0xf0>
    653c:	d8800017 	ldw	r2,0(sp)
    6540:	90800515 	stw	r2,20(r18)
    6544:	d8c00117 	ldw	r3,4(sp)
    6548:	003fd106 	br	6490 <__d2b+0xc0>

0000654c <__mdiff>:
    654c:	defffb04 	addi	sp,sp,-20
    6550:	dc000015 	stw	r16,0(sp)
    6554:	2821883a 	mov	r16,r5
    6558:	dc800215 	stw	r18,8(sp)
    655c:	300b883a 	mov	r5,r6
    6560:	2025883a 	mov	r18,r4
    6564:	8009883a 	mov	r4,r16
    6568:	dc400115 	stw	r17,4(sp)
    656c:	dfc00415 	stw	ra,16(sp)
    6570:	dcc00315 	stw	r19,12(sp)
    6574:	3023883a 	mov	r17,r6
    6578:	0005ef00 	call	5ef0 <__mcmp>
    657c:	10004226 	beq	r2,zero,6688 <__mdiff+0x13c>
    6580:	10005016 	blt	r2,zero,66c4 <__mdiff+0x178>
    6584:	0027883a 	mov	r19,zero
    6588:	81400117 	ldw	r5,4(r16)
    658c:	9009883a 	mov	r4,r18
    6590:	00063140 	call	6314 <_Balloc>
    6594:	1019883a 	mov	r12,r2
    6598:	82800417 	ldw	r10,16(r16)
    659c:	88800417 	ldw	r2,16(r17)
    65a0:	81800504 	addi	r6,r16,20
    65a4:	5287883a 	add	r3,r10,r10
    65a8:	1085883a 	add	r2,r2,r2
    65ac:	18c7883a 	add	r3,r3,r3
    65b0:	1085883a 	add	r2,r2,r2
    65b4:	8a000504 	addi	r8,r17,20
    65b8:	64c00315 	stw	r19,12(r12)
    65bc:	30db883a 	add	r13,r6,r3
    65c0:	4097883a 	add	r11,r8,r2
    65c4:	61c00504 	addi	r7,r12,20
    65c8:	0013883a 	mov	r9,zero
    65cc:	31000017 	ldw	r4,0(r6)
    65d0:	41400017 	ldw	r5,0(r8)
    65d4:	42000104 	addi	r8,r8,4
    65d8:	20bfffcc 	andi	r2,r4,65535
    65dc:	28ffffcc 	andi	r3,r5,65535
    65e0:	10c5c83a 	sub	r2,r2,r3
    65e4:	1245883a 	add	r2,r2,r9
    65e8:	2008d43a 	srli	r4,r4,16
    65ec:	280ad43a 	srli	r5,r5,16
    65f0:	1007d43a 	srai	r3,r2,16
    65f4:	3880000d 	sth	r2,0(r7)
    65f8:	2149c83a 	sub	r4,r4,r5
    65fc:	20c9883a 	add	r4,r4,r3
    6600:	3900008d 	sth	r4,2(r7)
    6604:	31800104 	addi	r6,r6,4
    6608:	39c00104 	addi	r7,r7,4
    660c:	2013d43a 	srai	r9,r4,16
    6610:	42ffee36 	bltu	r8,r11,65cc <__mdiff+0x80>
    6614:	33400c2e 	bgeu	r6,r13,6648 <__mdiff+0xfc>
    6618:	30800017 	ldw	r2,0(r6)
    661c:	31800104 	addi	r6,r6,4
    6620:	10ffffcc 	andi	r3,r2,65535
    6624:	1a47883a 	add	r3,r3,r9
    6628:	1004d43a 	srli	r2,r2,16
    662c:	1809d43a 	srai	r4,r3,16
    6630:	38c0000d 	sth	r3,0(r7)
    6634:	1105883a 	add	r2,r2,r4
    6638:	3880008d 	sth	r2,2(r7)
    663c:	1013d43a 	srai	r9,r2,16
    6640:	39c00104 	addi	r7,r7,4
    6644:	337ff436 	bltu	r6,r13,6618 <__mdiff+0xcc>
    6648:	38bfff17 	ldw	r2,-4(r7)
    664c:	38ffff04 	addi	r3,r7,-4
    6650:	1000041e 	bne	r2,zero,6664 <__mdiff+0x118>
    6654:	18ffff04 	addi	r3,r3,-4
    6658:	18800017 	ldw	r2,0(r3)
    665c:	52bfffc4 	addi	r10,r10,-1
    6660:	103ffc26 	beq	r2,zero,6654 <__mdiff+0x108>
    6664:	6005883a 	mov	r2,r12
    6668:	62800415 	stw	r10,16(r12)
    666c:	dfc00417 	ldw	ra,16(sp)
    6670:	dcc00317 	ldw	r19,12(sp)
    6674:	dc800217 	ldw	r18,8(sp)
    6678:	dc400117 	ldw	r17,4(sp)
    667c:	dc000017 	ldw	r16,0(sp)
    6680:	dec00504 	addi	sp,sp,20
    6684:	f800283a 	ret
    6688:	9009883a 	mov	r4,r18
    668c:	000b883a 	mov	r5,zero
    6690:	00063140 	call	6314 <_Balloc>
    6694:	1019883a 	mov	r12,r2
    6698:	00800044 	movi	r2,1
    669c:	60800415 	stw	r2,16(r12)
    66a0:	6005883a 	mov	r2,r12
    66a4:	60000515 	stw	zero,20(r12)
    66a8:	dfc00417 	ldw	ra,16(sp)
    66ac:	dcc00317 	ldw	r19,12(sp)
    66b0:	dc800217 	ldw	r18,8(sp)
    66b4:	dc400117 	ldw	r17,4(sp)
    66b8:	dc000017 	ldw	r16,0(sp)
    66bc:	dec00504 	addi	sp,sp,20
    66c0:	f800283a 	ret
    66c4:	880d883a 	mov	r6,r17
    66c8:	04c00044 	movi	r19,1
    66cc:	8023883a 	mov	r17,r16
    66d0:	3021883a 	mov	r16,r6
    66d4:	003fac06 	br	6588 <__mdiff+0x3c>

000066d8 <__lshift>:
    66d8:	defff904 	addi	sp,sp,-28
    66dc:	28800417 	ldw	r2,16(r5)
    66e0:	dc000015 	stw	r16,0(sp)
    66e4:	3021d17a 	srai	r16,r6,5
    66e8:	28c00217 	ldw	r3,8(r5)
    66ec:	10800044 	addi	r2,r2,1
    66f0:	dc400115 	stw	r17,4(sp)
    66f4:	80a3883a 	add	r17,r16,r2
    66f8:	dd400515 	stw	r21,20(sp)
    66fc:	dd000415 	stw	r20,16(sp)
    6700:	dc800215 	stw	r18,8(sp)
    6704:	dfc00615 	stw	ra,24(sp)
    6708:	2825883a 	mov	r18,r5
    670c:	dcc00315 	stw	r19,12(sp)
    6710:	3029883a 	mov	r20,r6
    6714:	202b883a 	mov	r21,r4
    6718:	29400117 	ldw	r5,4(r5)
    671c:	1c40030e 	bge	r3,r17,672c <__lshift+0x54>
    6720:	18c7883a 	add	r3,r3,r3
    6724:	29400044 	addi	r5,r5,1
    6728:	1c7ffd16 	blt	r3,r17,6720 <__lshift+0x48>
    672c:	a809883a 	mov	r4,r21
    6730:	00063140 	call	6314 <_Balloc>
    6734:	1027883a 	mov	r19,r2
    6738:	11400504 	addi	r5,r2,20
    673c:	0400090e 	bge	zero,r16,6764 <__lshift+0x8c>
    6740:	2805883a 	mov	r2,r5
    6744:	0007883a 	mov	r3,zero
    6748:	18c00044 	addi	r3,r3,1
    674c:	10000015 	stw	zero,0(r2)
    6750:	10800104 	addi	r2,r2,4
    6754:	80fffc1e 	bne	r16,r3,6748 <__lshift+0x70>
    6758:	8405883a 	add	r2,r16,r16
    675c:	1085883a 	add	r2,r2,r2
    6760:	288b883a 	add	r5,r5,r2
    6764:	90800417 	ldw	r2,16(r18)
    6768:	91000504 	addi	r4,r18,20
    676c:	a18007cc 	andi	r6,r20,31
    6770:	1085883a 	add	r2,r2,r2
    6774:	1085883a 	add	r2,r2,r2
    6778:	208f883a 	add	r7,r4,r2
    677c:	30001e26 	beq	r6,zero,67f8 <__lshift+0x120>
    6780:	00800804 	movi	r2,32
    6784:	1191c83a 	sub	r8,r2,r6
    6788:	0007883a 	mov	r3,zero
    678c:	20800017 	ldw	r2,0(r4)
    6790:	1184983a 	sll	r2,r2,r6
    6794:	1884b03a 	or	r2,r3,r2
    6798:	28800015 	stw	r2,0(r5)
    679c:	20c00017 	ldw	r3,0(r4)
    67a0:	21000104 	addi	r4,r4,4
    67a4:	29400104 	addi	r5,r5,4
    67a8:	1a06d83a 	srl	r3,r3,r8
    67ac:	21fff736 	bltu	r4,r7,678c <__lshift+0xb4>
    67b0:	28c00015 	stw	r3,0(r5)
    67b4:	18000126 	beq	r3,zero,67bc <__lshift+0xe4>
    67b8:	8c400044 	addi	r17,r17,1
    67bc:	88bfffc4 	addi	r2,r17,-1
    67c0:	98800415 	stw	r2,16(r19)
    67c4:	a809883a 	mov	r4,r21
    67c8:	900b883a 	mov	r5,r18
    67cc:	0005d940 	call	5d94 <_Bfree>
    67d0:	9805883a 	mov	r2,r19
    67d4:	dfc00617 	ldw	ra,24(sp)
    67d8:	dd400517 	ldw	r21,20(sp)
    67dc:	dd000417 	ldw	r20,16(sp)
    67e0:	dcc00317 	ldw	r19,12(sp)
    67e4:	dc800217 	ldw	r18,8(sp)
    67e8:	dc400117 	ldw	r17,4(sp)
    67ec:	dc000017 	ldw	r16,0(sp)
    67f0:	dec00704 	addi	sp,sp,28
    67f4:	f800283a 	ret
    67f8:	20800017 	ldw	r2,0(r4)
    67fc:	21000104 	addi	r4,r4,4
    6800:	28800015 	stw	r2,0(r5)
    6804:	29400104 	addi	r5,r5,4
    6808:	21ffec2e 	bgeu	r4,r7,67bc <__lshift+0xe4>
    680c:	20800017 	ldw	r2,0(r4)
    6810:	21000104 	addi	r4,r4,4
    6814:	28800015 	stw	r2,0(r5)
    6818:	29400104 	addi	r5,r5,4
    681c:	21fff636 	bltu	r4,r7,67f8 <__lshift+0x120>
    6820:	003fe606 	br	67bc <__lshift+0xe4>

00006824 <__multiply>:
    6824:	defff904 	addi	sp,sp,-28
    6828:	dcc00315 	stw	r19,12(sp)
    682c:	dc800215 	stw	r18,8(sp)
    6830:	2cc00417 	ldw	r19,16(r5)
    6834:	34800417 	ldw	r18,16(r6)
    6838:	dd000415 	stw	r20,16(sp)
    683c:	dc400115 	stw	r17,4(sp)
    6840:	dfc00615 	stw	ra,24(sp)
    6844:	dd400515 	stw	r21,20(sp)
    6848:	dc000015 	stw	r16,0(sp)
    684c:	2823883a 	mov	r17,r5
    6850:	3029883a 	mov	r20,r6
    6854:	9c80040e 	bge	r19,r18,6868 <__multiply+0x44>
    6858:	9027883a 	mov	r19,r18
    685c:	2c800417 	ldw	r18,16(r5)
    6860:	2829883a 	mov	r20,r5
    6864:	3023883a 	mov	r17,r6
    6868:	88800217 	ldw	r2,8(r17)
    686c:	9ca1883a 	add	r16,r19,r18
    6870:	89400117 	ldw	r5,4(r17)
    6874:	1400010e 	bge	r2,r16,687c <__multiply+0x58>
    6878:	29400044 	addi	r5,r5,1
    687c:	00063140 	call	6314 <_Balloc>
    6880:	102b883a 	mov	r21,r2
    6884:	8405883a 	add	r2,r16,r16
    6888:	1085883a 	add	r2,r2,r2
    688c:	a9000504 	addi	r4,r21,20
    6890:	209d883a 	add	r14,r4,r2
    6894:	2380042e 	bgeu	r4,r14,68a8 <__multiply+0x84>
    6898:	2005883a 	mov	r2,r4
    689c:	10000015 	stw	zero,0(r2)
    68a0:	10800104 	addi	r2,r2,4
    68a4:	13bffd36 	bltu	r2,r14,689c <__multiply+0x78>
    68a8:	9485883a 	add	r2,r18,r18
    68ac:	9cc7883a 	add	r3,r19,r19
    68b0:	a1800504 	addi	r6,r20,20
    68b4:	1085883a 	add	r2,r2,r2
    68b8:	8b400504 	addi	r13,r17,20
    68bc:	18c7883a 	add	r3,r3,r3
    68c0:	309f883a 	add	r15,r6,r2
    68c4:	68d7883a 	add	r11,r13,r3
    68c8:	33c03b2e 	bgeu	r6,r15,69b8 <__multiply+0x194>
    68cc:	2019883a 	mov	r12,r4
    68d0:	30800017 	ldw	r2,0(r6)
    68d4:	127fffcc 	andi	r9,r2,65535
    68d8:	48001826 	beq	r9,zero,693c <__multiply+0x118>
    68dc:	6811883a 	mov	r8,r13
    68e0:	600f883a 	mov	r7,r12
    68e4:	0015883a 	mov	r10,zero
    68e8:	40c00017 	ldw	r3,0(r8)
    68ec:	39400017 	ldw	r5,0(r7)
    68f0:	42000104 	addi	r8,r8,4
    68f4:	193fffcc 	andi	r4,r3,65535
    68f8:	4909383a 	mul	r4,r9,r4
    68fc:	1806d43a 	srli	r3,r3,16
    6900:	28bfffcc 	andi	r2,r5,65535
    6904:	5085883a 	add	r2,r10,r2
    6908:	2089883a 	add	r4,r4,r2
    690c:	48c7383a 	mul	r3,r9,r3
    6910:	280ad43a 	srli	r5,r5,16
    6914:	2004d43a 	srli	r2,r4,16
    6918:	3900000d 	sth	r4,0(r7)
    691c:	1947883a 	add	r3,r3,r5
    6920:	10c5883a 	add	r2,r2,r3
    6924:	3880008d 	sth	r2,2(r7)
    6928:	1014d43a 	srli	r10,r2,16
    692c:	39c00104 	addi	r7,r7,4
    6930:	42ffed36 	bltu	r8,r11,68e8 <__multiply+0xc4>
    6934:	3a800015 	stw	r10,0(r7)
    6938:	30800017 	ldw	r2,0(r6)
    693c:	1012d43a 	srli	r9,r2,16
    6940:	48001926 	beq	r9,zero,69a8 <__multiply+0x184>
    6944:	60800017 	ldw	r2,0(r12)
    6948:	6811883a 	mov	r8,r13
    694c:	600f883a 	mov	r7,r12
    6950:	0015883a 	mov	r10,zero
    6954:	100b883a 	mov	r5,r2
    6958:	41000017 	ldw	r4,0(r8)
    695c:	2806d43a 	srli	r3,r5,16
    6960:	3880000d 	sth	r2,0(r7)
    6964:	20bfffcc 	andi	r2,r4,65535
    6968:	4885383a 	mul	r2,r9,r2
    696c:	50c7883a 	add	r3,r10,r3
    6970:	2008d43a 	srli	r4,r4,16
    6974:	10c5883a 	add	r2,r2,r3
    6978:	3880008d 	sth	r2,2(r7)
    697c:	39c00104 	addi	r7,r7,4
    6980:	39400017 	ldw	r5,0(r7)
    6984:	4909383a 	mul	r4,r9,r4
    6988:	1004d43a 	srli	r2,r2,16
    698c:	28ffffcc 	andi	r3,r5,65535
    6990:	20c9883a 	add	r4,r4,r3
    6994:	1105883a 	add	r2,r2,r4
    6998:	42000104 	addi	r8,r8,4
    699c:	1014d43a 	srli	r10,r2,16
    69a0:	42ffed36 	bltu	r8,r11,6958 <__multiply+0x134>
    69a4:	38800015 	stw	r2,0(r7)
    69a8:	31800104 	addi	r6,r6,4
    69ac:	33c0022e 	bgeu	r6,r15,69b8 <__multiply+0x194>
    69b0:	63000104 	addi	r12,r12,4
    69b4:	003fc606 	br	68d0 <__multiply+0xac>
    69b8:	0400090e 	bge	zero,r16,69e0 <__multiply+0x1bc>
    69bc:	70bfff17 	ldw	r2,-4(r14)
    69c0:	70ffff04 	addi	r3,r14,-4
    69c4:	10000326 	beq	r2,zero,69d4 <__multiply+0x1b0>
    69c8:	00000506 	br	69e0 <__multiply+0x1bc>
    69cc:	18800017 	ldw	r2,0(r3)
    69d0:	1000031e 	bne	r2,zero,69e0 <__multiply+0x1bc>
    69d4:	843fffc4 	addi	r16,r16,-1
    69d8:	18ffff04 	addi	r3,r3,-4
    69dc:	803ffb1e 	bne	r16,zero,69cc <__multiply+0x1a8>
    69e0:	a805883a 	mov	r2,r21
    69e4:	ac000415 	stw	r16,16(r21)
    69e8:	dfc00617 	ldw	ra,24(sp)
    69ec:	dd400517 	ldw	r21,20(sp)
    69f0:	dd000417 	ldw	r20,16(sp)
    69f4:	dcc00317 	ldw	r19,12(sp)
    69f8:	dc800217 	ldw	r18,8(sp)
    69fc:	dc400117 	ldw	r17,4(sp)
    6a00:	dc000017 	ldw	r16,0(sp)
    6a04:	dec00704 	addi	sp,sp,28
    6a08:	f800283a 	ret

00006a0c <__i2b>:
    6a0c:	defffd04 	addi	sp,sp,-12
    6a10:	dc000015 	stw	r16,0(sp)
    6a14:	04000044 	movi	r16,1
    6a18:	dc800115 	stw	r18,4(sp)
    6a1c:	2825883a 	mov	r18,r5
    6a20:	800b883a 	mov	r5,r16
    6a24:	dfc00215 	stw	ra,8(sp)
    6a28:	00063140 	call	6314 <_Balloc>
    6a2c:	14000415 	stw	r16,16(r2)
    6a30:	14800515 	stw	r18,20(r2)
    6a34:	dfc00217 	ldw	ra,8(sp)
    6a38:	dc800117 	ldw	r18,4(sp)
    6a3c:	dc000017 	ldw	r16,0(sp)
    6a40:	dec00304 	addi	sp,sp,12
    6a44:	f800283a 	ret

00006a48 <__multadd>:
    6a48:	defffa04 	addi	sp,sp,-24
    6a4c:	dc800215 	stw	r18,8(sp)
    6a50:	2c800417 	ldw	r18,16(r5)
    6a54:	dd000415 	stw	r20,16(sp)
    6a58:	dcc00315 	stw	r19,12(sp)
    6a5c:	dc000015 	stw	r16,0(sp)
    6a60:	dfc00515 	stw	ra,20(sp)
    6a64:	3821883a 	mov	r16,r7
    6a68:	dc400115 	stw	r17,4(sp)
    6a6c:	2827883a 	mov	r19,r5
    6a70:	2029883a 	mov	r20,r4
    6a74:	2a000504 	addi	r8,r5,20
    6a78:	000f883a 	mov	r7,zero
    6a7c:	40800017 	ldw	r2,0(r8)
    6a80:	39c00044 	addi	r7,r7,1
    6a84:	10ffffcc 	andi	r3,r2,65535
    6a88:	1987383a 	mul	r3,r3,r6
    6a8c:	1004d43a 	srli	r2,r2,16
    6a90:	1c07883a 	add	r3,r3,r16
    6a94:	180ad43a 	srli	r5,r3,16
    6a98:	1185383a 	mul	r2,r2,r6
    6a9c:	18ffffcc 	andi	r3,r3,65535
    6aa0:	1145883a 	add	r2,r2,r5
    6aa4:	1008943a 	slli	r4,r2,16
    6aa8:	1020d43a 	srli	r16,r2,16
    6aac:	20c9883a 	add	r4,r4,r3
    6ab0:	41000015 	stw	r4,0(r8)
    6ab4:	42000104 	addi	r8,r8,4
    6ab8:	3cbff016 	blt	r7,r18,6a7c <__multadd+0x34>
    6abc:	80000826 	beq	r16,zero,6ae0 <__multadd+0x98>
    6ac0:	98800217 	ldw	r2,8(r19)
    6ac4:	90800f0e 	bge	r18,r2,6b04 <__multadd+0xbc>
    6ac8:	9485883a 	add	r2,r18,r18
    6acc:	1085883a 	add	r2,r2,r2
    6ad0:	14c5883a 	add	r2,r2,r19
    6ad4:	90c00044 	addi	r3,r18,1
    6ad8:	14000515 	stw	r16,20(r2)
    6adc:	98c00415 	stw	r3,16(r19)
    6ae0:	9805883a 	mov	r2,r19
    6ae4:	dfc00517 	ldw	ra,20(sp)
    6ae8:	dd000417 	ldw	r20,16(sp)
    6aec:	dcc00317 	ldw	r19,12(sp)
    6af0:	dc800217 	ldw	r18,8(sp)
    6af4:	dc400117 	ldw	r17,4(sp)
    6af8:	dc000017 	ldw	r16,0(sp)
    6afc:	dec00604 	addi	sp,sp,24
    6b00:	f800283a 	ret
    6b04:	99400117 	ldw	r5,4(r19)
    6b08:	a009883a 	mov	r4,r20
    6b0c:	29400044 	addi	r5,r5,1
    6b10:	00063140 	call	6314 <_Balloc>
    6b14:	99800417 	ldw	r6,16(r19)
    6b18:	99400304 	addi	r5,r19,12
    6b1c:	11000304 	addi	r4,r2,12
    6b20:	318d883a 	add	r6,r6,r6
    6b24:	318d883a 	add	r6,r6,r6
    6b28:	31800204 	addi	r6,r6,8
    6b2c:	1023883a 	mov	r17,r2
    6b30:	0005b7c0 	call	5b7c <memcpy>
    6b34:	980b883a 	mov	r5,r19
    6b38:	a009883a 	mov	r4,r20
    6b3c:	0005d940 	call	5d94 <_Bfree>
    6b40:	8827883a 	mov	r19,r17
    6b44:	003fe006 	br	6ac8 <__multadd+0x80>

00006b48 <__pow5mult>:
    6b48:	defffa04 	addi	sp,sp,-24
    6b4c:	308000cc 	andi	r2,r6,3
    6b50:	dd000415 	stw	r20,16(sp)
    6b54:	dcc00315 	stw	r19,12(sp)
    6b58:	dc000015 	stw	r16,0(sp)
    6b5c:	dfc00515 	stw	ra,20(sp)
    6b60:	dc800215 	stw	r18,8(sp)
    6b64:	dc400115 	stw	r17,4(sp)
    6b68:	3021883a 	mov	r16,r6
    6b6c:	2027883a 	mov	r19,r4
    6b70:	2829883a 	mov	r20,r5
    6b74:	10002b1e 	bne	r2,zero,6c24 <__pow5mult+0xdc>
    6b78:	8025d0ba 	srai	r18,r16,2
    6b7c:	90001b26 	beq	r18,zero,6bec <__pow5mult+0xa4>
    6b80:	9c001217 	ldw	r16,72(r19)
    6b84:	8000081e 	bne	r16,zero,6ba8 <__pow5mult+0x60>
    6b88:	00003006 	br	6c4c <__pow5mult+0x104>
    6b8c:	800b883a 	mov	r5,r16
    6b90:	800d883a 	mov	r6,r16
    6b94:	9809883a 	mov	r4,r19
    6b98:	90001426 	beq	r18,zero,6bec <__pow5mult+0xa4>
    6b9c:	80800017 	ldw	r2,0(r16)
    6ba0:	10001b26 	beq	r2,zero,6c10 <__pow5mult+0xc8>
    6ba4:	1021883a 	mov	r16,r2
    6ba8:	9080004c 	andi	r2,r18,1
    6bac:	1005003a 	cmpeq	r2,r2,zero
    6bb0:	9025d07a 	srai	r18,r18,1
    6bb4:	800d883a 	mov	r6,r16
    6bb8:	9809883a 	mov	r4,r19
    6bbc:	a00b883a 	mov	r5,r20
    6bc0:	103ff21e 	bne	r2,zero,6b8c <__pow5mult+0x44>
    6bc4:	00068240 	call	6824 <__multiply>
    6bc8:	a00b883a 	mov	r5,r20
    6bcc:	9809883a 	mov	r4,r19
    6bd0:	1023883a 	mov	r17,r2
    6bd4:	0005d940 	call	5d94 <_Bfree>
    6bd8:	8829883a 	mov	r20,r17
    6bdc:	800b883a 	mov	r5,r16
    6be0:	800d883a 	mov	r6,r16
    6be4:	9809883a 	mov	r4,r19
    6be8:	903fec1e 	bne	r18,zero,6b9c <__pow5mult+0x54>
    6bec:	a005883a 	mov	r2,r20
    6bf0:	dfc00517 	ldw	ra,20(sp)
    6bf4:	dd000417 	ldw	r20,16(sp)
    6bf8:	dcc00317 	ldw	r19,12(sp)
    6bfc:	dc800217 	ldw	r18,8(sp)
    6c00:	dc400117 	ldw	r17,4(sp)
    6c04:	dc000017 	ldw	r16,0(sp)
    6c08:	dec00604 	addi	sp,sp,24
    6c0c:	f800283a 	ret
    6c10:	00068240 	call	6824 <__multiply>
    6c14:	80800015 	stw	r2,0(r16)
    6c18:	1021883a 	mov	r16,r2
    6c1c:	10000015 	stw	zero,0(r2)
    6c20:	003fe106 	br	6ba8 <__pow5mult+0x60>
    6c24:	1085883a 	add	r2,r2,r2
    6c28:	00c00074 	movhi	r3,1
    6c2c:	18f1d304 	addi	r3,r3,-14516
    6c30:	1085883a 	add	r2,r2,r2
    6c34:	10c5883a 	add	r2,r2,r3
    6c38:	11bfff17 	ldw	r6,-4(r2)
    6c3c:	000f883a 	mov	r7,zero
    6c40:	0006a480 	call	6a48 <__multadd>
    6c44:	1029883a 	mov	r20,r2
    6c48:	003fcb06 	br	6b78 <__pow5mult+0x30>
    6c4c:	9809883a 	mov	r4,r19
    6c50:	01409c44 	movi	r5,625
    6c54:	0006a0c0 	call	6a0c <__i2b>
    6c58:	98801215 	stw	r2,72(r19)
    6c5c:	1021883a 	mov	r16,r2
    6c60:	10000015 	stw	zero,0(r2)
    6c64:	003fd006 	br	6ba8 <__pow5mult+0x60>

00006c68 <__s2b>:
    6c68:	defff904 	addi	sp,sp,-28
    6c6c:	dcc00315 	stw	r19,12(sp)
    6c70:	dc800215 	stw	r18,8(sp)
    6c74:	2827883a 	mov	r19,r5
    6c78:	2025883a 	mov	r18,r4
    6c7c:	01400244 	movi	r5,9
    6c80:	39000204 	addi	r4,r7,8
    6c84:	dd000415 	stw	r20,16(sp)
    6c88:	dc400115 	stw	r17,4(sp)
    6c8c:	dfc00615 	stw	ra,24(sp)
    6c90:	dd400515 	stw	r21,20(sp)
    6c94:	dc000015 	stw	r16,0(sp)
    6c98:	3829883a 	mov	r20,r7
    6c9c:	3023883a 	mov	r17,r6
    6ca0:	000083c0 	call	83c <__divsi3>
    6ca4:	00c00044 	movi	r3,1
    6ca8:	1880350e 	bge	r3,r2,6d80 <__s2b+0x118>
    6cac:	000b883a 	mov	r5,zero
    6cb0:	18c7883a 	add	r3,r3,r3
    6cb4:	29400044 	addi	r5,r5,1
    6cb8:	18bffd16 	blt	r3,r2,6cb0 <__s2b+0x48>
    6cbc:	9009883a 	mov	r4,r18
    6cc0:	00063140 	call	6314 <_Balloc>
    6cc4:	1011883a 	mov	r8,r2
    6cc8:	d8800717 	ldw	r2,28(sp)
    6ccc:	00c00044 	movi	r3,1
    6cd0:	01800244 	movi	r6,9
    6cd4:	40800515 	stw	r2,20(r8)
    6cd8:	40c00415 	stw	r3,16(r8)
    6cdc:	3440260e 	bge	r6,r17,6d78 <__s2b+0x110>
    6ce0:	3021883a 	mov	r16,r6
    6ce4:	99ab883a 	add	r21,r19,r6
    6ce8:	9c05883a 	add	r2,r19,r16
    6cec:	11c00007 	ldb	r7,0(r2)
    6cf0:	400b883a 	mov	r5,r8
    6cf4:	9009883a 	mov	r4,r18
    6cf8:	39fff404 	addi	r7,r7,-48
    6cfc:	01800284 	movi	r6,10
    6d00:	0006a480 	call	6a48 <__multadd>
    6d04:	84000044 	addi	r16,r16,1
    6d08:	1011883a 	mov	r8,r2
    6d0c:	8c3ff61e 	bne	r17,r16,6ce8 <__s2b+0x80>
    6d10:	ac45883a 	add	r2,r21,r17
    6d14:	117ffe04 	addi	r5,r2,-8
    6d18:	880d883a 	mov	r6,r17
    6d1c:	35000c0e 	bge	r6,r20,6d50 <__s2b+0xe8>
    6d20:	a185c83a 	sub	r2,r20,r6
    6d24:	2821883a 	mov	r16,r5
    6d28:	28a3883a 	add	r17,r5,r2
    6d2c:	81c00007 	ldb	r7,0(r16)
    6d30:	400b883a 	mov	r5,r8
    6d34:	9009883a 	mov	r4,r18
    6d38:	39fff404 	addi	r7,r7,-48
    6d3c:	01800284 	movi	r6,10
    6d40:	0006a480 	call	6a48 <__multadd>
    6d44:	84000044 	addi	r16,r16,1
    6d48:	1011883a 	mov	r8,r2
    6d4c:	847ff71e 	bne	r16,r17,6d2c <__s2b+0xc4>
    6d50:	4005883a 	mov	r2,r8
    6d54:	dfc00617 	ldw	ra,24(sp)
    6d58:	dd400517 	ldw	r21,20(sp)
    6d5c:	dd000417 	ldw	r20,16(sp)
    6d60:	dcc00317 	ldw	r19,12(sp)
    6d64:	dc800217 	ldw	r18,8(sp)
    6d68:	dc400117 	ldw	r17,4(sp)
    6d6c:	dc000017 	ldw	r16,0(sp)
    6d70:	dec00704 	addi	sp,sp,28
    6d74:	f800283a 	ret
    6d78:	99400284 	addi	r5,r19,10
    6d7c:	003fe706 	br	6d1c <__s2b+0xb4>
    6d80:	000b883a 	mov	r5,zero
    6d84:	003fcd06 	br	6cbc <__s2b+0x54>

00006d88 <_realloc_r>:
    6d88:	defff404 	addi	sp,sp,-48
    6d8c:	dd800815 	stw	r22,32(sp)
    6d90:	dc800415 	stw	r18,16(sp)
    6d94:	dc400315 	stw	r17,12(sp)
    6d98:	dfc00b15 	stw	ra,44(sp)
    6d9c:	df000a15 	stw	fp,40(sp)
    6da0:	ddc00915 	stw	r23,36(sp)
    6da4:	dd400715 	stw	r21,28(sp)
    6da8:	dd000615 	stw	r20,24(sp)
    6dac:	dcc00515 	stw	r19,20(sp)
    6db0:	dc000215 	stw	r16,8(sp)
    6db4:	2825883a 	mov	r18,r5
    6db8:	3023883a 	mov	r17,r6
    6dbc:	202d883a 	mov	r22,r4
    6dc0:	2800c926 	beq	r5,zero,70e8 <_realloc_r+0x360>
    6dc4:	000a4d40 	call	a4d4 <__malloc_lock>
    6dc8:	943ffe04 	addi	r16,r18,-8
    6dcc:	88c002c4 	addi	r3,r17,11
    6dd0:	00800584 	movi	r2,22
    6dd4:	82000117 	ldw	r8,4(r16)
    6dd8:	10c01b2e 	bgeu	r2,r3,6e48 <_realloc_r+0xc0>
    6ddc:	00bffe04 	movi	r2,-8
    6de0:	188e703a 	and	r7,r3,r2
    6de4:	3839883a 	mov	fp,r7
    6de8:	38001a16 	blt	r7,zero,6e54 <_realloc_r+0xcc>
    6dec:	e4401936 	bltu	fp,r17,6e54 <_realloc_r+0xcc>
    6df0:	013fff04 	movi	r4,-4
    6df4:	4126703a 	and	r19,r8,r4
    6df8:	99c02616 	blt	r19,r7,6e94 <_realloc_r+0x10c>
    6dfc:	802b883a 	mov	r21,r16
    6e00:	9829883a 	mov	r20,r19
    6e04:	84000204 	addi	r16,r16,8
    6e08:	a80f883a 	mov	r7,r21
    6e0c:	a70dc83a 	sub	r6,r20,fp
    6e10:	008003c4 	movi	r2,15
    6e14:	1180c136 	bltu	r2,r6,711c <_realloc_r+0x394>
    6e18:	38800117 	ldw	r2,4(r7)
    6e1c:	a549883a 	add	r4,r20,r21
    6e20:	1080004c 	andi	r2,r2,1
    6e24:	a084b03a 	or	r2,r20,r2
    6e28:	38800115 	stw	r2,4(r7)
    6e2c:	20c00117 	ldw	r3,4(r4)
    6e30:	18c00054 	ori	r3,r3,1
    6e34:	20c00115 	stw	r3,4(r4)
    6e38:	b009883a 	mov	r4,r22
    6e3c:	000a4f40 	call	a4f4 <__malloc_unlock>
    6e40:	8023883a 	mov	r17,r16
    6e44:	00000606 	br	6e60 <_realloc_r+0xd8>
    6e48:	01c00404 	movi	r7,16
    6e4c:	3839883a 	mov	fp,r7
    6e50:	e47fe72e 	bgeu	fp,r17,6df0 <_realloc_r+0x68>
    6e54:	00800304 	movi	r2,12
    6e58:	0023883a 	mov	r17,zero
    6e5c:	b0800015 	stw	r2,0(r22)
    6e60:	8805883a 	mov	r2,r17
    6e64:	dfc00b17 	ldw	ra,44(sp)
    6e68:	df000a17 	ldw	fp,40(sp)
    6e6c:	ddc00917 	ldw	r23,36(sp)
    6e70:	dd800817 	ldw	r22,32(sp)
    6e74:	dd400717 	ldw	r21,28(sp)
    6e78:	dd000617 	ldw	r20,24(sp)
    6e7c:	dcc00517 	ldw	r19,20(sp)
    6e80:	dc800417 	ldw	r18,16(sp)
    6e84:	dc400317 	ldw	r17,12(sp)
    6e88:	dc000217 	ldw	r16,8(sp)
    6e8c:	dec00c04 	addi	sp,sp,48
    6e90:	f800283a 	ret
    6e94:	00800074 	movhi	r2,1
    6e98:	10b32f04 	addi	r2,r2,-13124
    6e9c:	12400217 	ldw	r9,8(r2)
    6ea0:	84cd883a 	add	r6,r16,r19
    6ea4:	802b883a 	mov	r21,r16
    6ea8:	3240b926 	beq	r6,r9,7190 <_realloc_r+0x408>
    6eac:	31400117 	ldw	r5,4(r6)
    6eb0:	00bfff84 	movi	r2,-2
    6eb4:	2884703a 	and	r2,r5,r2
    6eb8:	1185883a 	add	r2,r2,r6
    6ebc:	10c00117 	ldw	r3,4(r2)
    6ec0:	18c0004c 	andi	r3,r3,1
    6ec4:	1807003a 	cmpeq	r3,r3,zero
    6ec8:	1800a326 	beq	r3,zero,7158 <_realloc_r+0x3d0>
    6ecc:	2908703a 	and	r4,r5,r4
    6ed0:	9929883a 	add	r20,r19,r4
    6ed4:	a1c0a30e 	bge	r20,r7,7164 <_realloc_r+0x3dc>
    6ed8:	4080004c 	andi	r2,r8,1
    6edc:	1000551e 	bne	r2,zero,7034 <_realloc_r+0x2ac>
    6ee0:	80800017 	ldw	r2,0(r16)
    6ee4:	80afc83a 	sub	r23,r16,r2
    6ee8:	b8c00117 	ldw	r3,4(r23)
    6eec:	00bfff04 	movi	r2,-4
    6ef0:	1884703a 	and	r2,r3,r2
    6ef4:	30002e26 	beq	r6,zero,6fb0 <_realloc_r+0x228>
    6ef8:	3240b926 	beq	r6,r9,71e0 <_realloc_r+0x458>
    6efc:	98a9883a 	add	r20,r19,r2
    6f00:	2509883a 	add	r4,r4,r20
    6f04:	d9000015 	stw	r4,0(sp)
    6f08:	21c02a16 	blt	r4,r7,6fb4 <_realloc_r+0x22c>
    6f0c:	30800317 	ldw	r2,12(r6)
    6f10:	30c00217 	ldw	r3,8(r6)
    6f14:	01400904 	movi	r5,36
    6f18:	99bfff04 	addi	r6,r19,-4
    6f1c:	18800315 	stw	r2,12(r3)
    6f20:	10c00215 	stw	r3,8(r2)
    6f24:	b9000317 	ldw	r4,12(r23)
    6f28:	b8800217 	ldw	r2,8(r23)
    6f2c:	b82b883a 	mov	r21,r23
    6f30:	bc000204 	addi	r16,r23,8
    6f34:	20800215 	stw	r2,8(r4)
    6f38:	11000315 	stw	r4,12(r2)
    6f3c:	2980e436 	bltu	r5,r6,72d0 <_realloc_r+0x548>
    6f40:	008004c4 	movi	r2,19
    6f44:	9009883a 	mov	r4,r18
    6f48:	8011883a 	mov	r8,r16
    6f4c:	11800f2e 	bgeu	r2,r6,6f8c <_realloc_r+0x204>
    6f50:	90800017 	ldw	r2,0(r18)
    6f54:	ba000404 	addi	r8,r23,16
    6f58:	91000204 	addi	r4,r18,8
    6f5c:	b8800215 	stw	r2,8(r23)
    6f60:	90c00117 	ldw	r3,4(r18)
    6f64:	008006c4 	movi	r2,27
    6f68:	b8c00315 	stw	r3,12(r23)
    6f6c:	1180072e 	bgeu	r2,r6,6f8c <_realloc_r+0x204>
    6f70:	90c00217 	ldw	r3,8(r18)
    6f74:	ba000604 	addi	r8,r23,24
    6f78:	91000404 	addi	r4,r18,16
    6f7c:	b8c00415 	stw	r3,16(r23)
    6f80:	90800317 	ldw	r2,12(r18)
    6f84:	b8800515 	stw	r2,20(r23)
    6f88:	3140e726 	beq	r6,r5,7328 <_realloc_r+0x5a0>
    6f8c:	20800017 	ldw	r2,0(r4)
    6f90:	dd000017 	ldw	r20,0(sp)
    6f94:	b80f883a 	mov	r7,r23
    6f98:	40800015 	stw	r2,0(r8)
    6f9c:	20c00117 	ldw	r3,4(r4)
    6fa0:	40c00115 	stw	r3,4(r8)
    6fa4:	20800217 	ldw	r2,8(r4)
    6fa8:	40800215 	stw	r2,8(r8)
    6fac:	003f9706 	br	6e0c <_realloc_r+0x84>
    6fb0:	98a9883a 	add	r20,r19,r2
    6fb4:	a1c01f16 	blt	r20,r7,7034 <_realloc_r+0x2ac>
    6fb8:	b8c00317 	ldw	r3,12(r23)
    6fbc:	b8800217 	ldw	r2,8(r23)
    6fc0:	99bfff04 	addi	r6,r19,-4
    6fc4:	01400904 	movi	r5,36
    6fc8:	b82b883a 	mov	r21,r23
    6fcc:	18800215 	stw	r2,8(r3)
    6fd0:	10c00315 	stw	r3,12(r2)
    6fd4:	bc000204 	addi	r16,r23,8
    6fd8:	2980c336 	bltu	r5,r6,72e8 <_realloc_r+0x560>
    6fdc:	008004c4 	movi	r2,19
    6fe0:	9009883a 	mov	r4,r18
    6fe4:	8011883a 	mov	r8,r16
    6fe8:	11800f2e 	bgeu	r2,r6,7028 <_realloc_r+0x2a0>
    6fec:	90800017 	ldw	r2,0(r18)
    6ff0:	ba000404 	addi	r8,r23,16
    6ff4:	91000204 	addi	r4,r18,8
    6ff8:	b8800215 	stw	r2,8(r23)
    6ffc:	90c00117 	ldw	r3,4(r18)
    7000:	008006c4 	movi	r2,27
    7004:	b8c00315 	stw	r3,12(r23)
    7008:	1180072e 	bgeu	r2,r6,7028 <_realloc_r+0x2a0>
    700c:	90c00217 	ldw	r3,8(r18)
    7010:	ba000604 	addi	r8,r23,24
    7014:	91000404 	addi	r4,r18,16
    7018:	b8c00415 	stw	r3,16(r23)
    701c:	90800317 	ldw	r2,12(r18)
    7020:	b8800515 	stw	r2,20(r23)
    7024:	3140c726 	beq	r6,r5,7344 <_realloc_r+0x5bc>
    7028:	20800017 	ldw	r2,0(r4)
    702c:	b80f883a 	mov	r7,r23
    7030:	003fd906 	br	6f98 <_realloc_r+0x210>
    7034:	880b883a 	mov	r5,r17
    7038:	b009883a 	mov	r4,r22
    703c:	00053580 	call	5358 <_malloc_r>
    7040:	1023883a 	mov	r17,r2
    7044:	10002526 	beq	r2,zero,70dc <_realloc_r+0x354>
    7048:	80800117 	ldw	r2,4(r16)
    704c:	00ffff84 	movi	r3,-2
    7050:	893ffe04 	addi	r4,r17,-8
    7054:	10c4703a 	and	r2,r2,r3
    7058:	8085883a 	add	r2,r16,r2
    705c:	20809526 	beq	r4,r2,72b4 <_realloc_r+0x52c>
    7060:	99bfff04 	addi	r6,r19,-4
    7064:	01c00904 	movi	r7,36
    7068:	39804536 	bltu	r7,r6,7180 <_realloc_r+0x3f8>
    706c:	008004c4 	movi	r2,19
    7070:	9009883a 	mov	r4,r18
    7074:	880b883a 	mov	r5,r17
    7078:	11800f2e 	bgeu	r2,r6,70b8 <_realloc_r+0x330>
    707c:	90800017 	ldw	r2,0(r18)
    7080:	89400204 	addi	r5,r17,8
    7084:	91000204 	addi	r4,r18,8
    7088:	88800015 	stw	r2,0(r17)
    708c:	90c00117 	ldw	r3,4(r18)
    7090:	008006c4 	movi	r2,27
    7094:	88c00115 	stw	r3,4(r17)
    7098:	1180072e 	bgeu	r2,r6,70b8 <_realloc_r+0x330>
    709c:	90c00217 	ldw	r3,8(r18)
    70a0:	89400404 	addi	r5,r17,16
    70a4:	91000404 	addi	r4,r18,16
    70a8:	88c00215 	stw	r3,8(r17)
    70ac:	90800317 	ldw	r2,12(r18)
    70b0:	88800315 	stw	r2,12(r17)
    70b4:	31c09126 	beq	r6,r7,72fc <_realloc_r+0x574>
    70b8:	20800017 	ldw	r2,0(r4)
    70bc:	28800015 	stw	r2,0(r5)
    70c0:	20c00117 	ldw	r3,4(r4)
    70c4:	28c00115 	stw	r3,4(r5)
    70c8:	20800217 	ldw	r2,8(r4)
    70cc:	28800215 	stw	r2,8(r5)
    70d0:	900b883a 	mov	r5,r18
    70d4:	b009883a 	mov	r4,r22
    70d8:	00047d00 	call	47d0 <_free_r>
    70dc:	b009883a 	mov	r4,r22
    70e0:	000a4f40 	call	a4f4 <__malloc_unlock>
    70e4:	003f5e06 	br	6e60 <_realloc_r+0xd8>
    70e8:	300b883a 	mov	r5,r6
    70ec:	dfc00b17 	ldw	ra,44(sp)
    70f0:	df000a17 	ldw	fp,40(sp)
    70f4:	ddc00917 	ldw	r23,36(sp)
    70f8:	dd800817 	ldw	r22,32(sp)
    70fc:	dd400717 	ldw	r21,28(sp)
    7100:	dd000617 	ldw	r20,24(sp)
    7104:	dcc00517 	ldw	r19,20(sp)
    7108:	dc800417 	ldw	r18,16(sp)
    710c:	dc400317 	ldw	r17,12(sp)
    7110:	dc000217 	ldw	r16,8(sp)
    7114:	dec00c04 	addi	sp,sp,48
    7118:	00053581 	jmpi	5358 <_malloc_r>
    711c:	38800117 	ldw	r2,4(r7)
    7120:	e54b883a 	add	r5,fp,r21
    7124:	31000054 	ori	r4,r6,1
    7128:	1080004c 	andi	r2,r2,1
    712c:	1704b03a 	or	r2,r2,fp
    7130:	38800115 	stw	r2,4(r7)
    7134:	29000115 	stw	r4,4(r5)
    7138:	2987883a 	add	r3,r5,r6
    713c:	18800117 	ldw	r2,4(r3)
    7140:	29400204 	addi	r5,r5,8
    7144:	b009883a 	mov	r4,r22
    7148:	10800054 	ori	r2,r2,1
    714c:	18800115 	stw	r2,4(r3)
    7150:	00047d00 	call	47d0 <_free_r>
    7154:	003f3806 	br	6e38 <_realloc_r+0xb0>
    7158:	000d883a 	mov	r6,zero
    715c:	0009883a 	mov	r4,zero
    7160:	003f5d06 	br	6ed8 <_realloc_r+0x150>
    7164:	30c00217 	ldw	r3,8(r6)
    7168:	30800317 	ldw	r2,12(r6)
    716c:	800f883a 	mov	r7,r16
    7170:	84000204 	addi	r16,r16,8
    7174:	10c00215 	stw	r3,8(r2)
    7178:	18800315 	stw	r2,12(r3)
    717c:	003f2306 	br	6e0c <_realloc_r+0x84>
    7180:	8809883a 	mov	r4,r17
    7184:	900b883a 	mov	r5,r18
    7188:	0005c1c0 	call	5c1c <memmove>
    718c:	003fd006 	br	70d0 <_realloc_r+0x348>
    7190:	30800117 	ldw	r2,4(r6)
    7194:	e0c00404 	addi	r3,fp,16
    7198:	1108703a 	and	r4,r2,r4
    719c:	9905883a 	add	r2,r19,r4
    71a0:	10ff4d16 	blt	r2,r3,6ed8 <_realloc_r+0x150>
    71a4:	1705c83a 	sub	r2,r2,fp
    71a8:	870b883a 	add	r5,r16,fp
    71ac:	10800054 	ori	r2,r2,1
    71b0:	28800115 	stw	r2,4(r5)
    71b4:	80c00117 	ldw	r3,4(r16)
    71b8:	00800074 	movhi	r2,1
    71bc:	10b32f04 	addi	r2,r2,-13124
    71c0:	b009883a 	mov	r4,r22
    71c4:	18c0004c 	andi	r3,r3,1
    71c8:	e0c6b03a 	or	r3,fp,r3
    71cc:	11400215 	stw	r5,8(r2)
    71d0:	80c00115 	stw	r3,4(r16)
    71d4:	000a4f40 	call	a4f4 <__malloc_unlock>
    71d8:	84400204 	addi	r17,r16,8
    71dc:	003f2006 	br	6e60 <_realloc_r+0xd8>
    71e0:	98a9883a 	add	r20,r19,r2
    71e4:	2509883a 	add	r4,r4,r20
    71e8:	e0800404 	addi	r2,fp,16
    71ec:	d9000115 	stw	r4,4(sp)
    71f0:	20bf7016 	blt	r4,r2,6fb4 <_realloc_r+0x22c>
    71f4:	b8c00317 	ldw	r3,12(r23)
    71f8:	b8800217 	ldw	r2,8(r23)
    71fc:	99bfff04 	addi	r6,r19,-4
    7200:	01400904 	movi	r5,36
    7204:	18800215 	stw	r2,8(r3)
    7208:	10c00315 	stw	r3,12(r2)
    720c:	bc400204 	addi	r17,r23,8
    7210:	29804136 	bltu	r5,r6,7318 <_realloc_r+0x590>
    7214:	008004c4 	movi	r2,19
    7218:	9009883a 	mov	r4,r18
    721c:	880f883a 	mov	r7,r17
    7220:	11800f2e 	bgeu	r2,r6,7260 <_realloc_r+0x4d8>
    7224:	90800017 	ldw	r2,0(r18)
    7228:	b9c00404 	addi	r7,r23,16
    722c:	91000204 	addi	r4,r18,8
    7230:	b8800215 	stw	r2,8(r23)
    7234:	90c00117 	ldw	r3,4(r18)
    7238:	008006c4 	movi	r2,27
    723c:	b8c00315 	stw	r3,12(r23)
    7240:	1180072e 	bgeu	r2,r6,7260 <_realloc_r+0x4d8>
    7244:	90c00217 	ldw	r3,8(r18)
    7248:	b9c00604 	addi	r7,r23,24
    724c:	91000404 	addi	r4,r18,16
    7250:	b8c00415 	stw	r3,16(r23)
    7254:	90800317 	ldw	r2,12(r18)
    7258:	b8800515 	stw	r2,20(r23)
    725c:	31404026 	beq	r6,r5,7360 <_realloc_r+0x5d8>
    7260:	20800017 	ldw	r2,0(r4)
    7264:	38800015 	stw	r2,0(r7)
    7268:	20c00117 	ldw	r3,4(r4)
    726c:	38c00115 	stw	r3,4(r7)
    7270:	20800217 	ldw	r2,8(r4)
    7274:	38800215 	stw	r2,8(r7)
    7278:	d8c00117 	ldw	r3,4(sp)
    727c:	bf0b883a 	add	r5,r23,fp
    7280:	b009883a 	mov	r4,r22
    7284:	1f05c83a 	sub	r2,r3,fp
    7288:	10800054 	ori	r2,r2,1
    728c:	28800115 	stw	r2,4(r5)
    7290:	b8c00117 	ldw	r3,4(r23)
    7294:	00800074 	movhi	r2,1
    7298:	10b32f04 	addi	r2,r2,-13124
    729c:	11400215 	stw	r5,8(r2)
    72a0:	18c0004c 	andi	r3,r3,1
    72a4:	e0c6b03a 	or	r3,fp,r3
    72a8:	b8c00115 	stw	r3,4(r23)
    72ac:	000a4f40 	call	a4f4 <__malloc_unlock>
    72b0:	003eeb06 	br	6e60 <_realloc_r+0xd8>
    72b4:	20800117 	ldw	r2,4(r4)
    72b8:	00ffff04 	movi	r3,-4
    72bc:	800f883a 	mov	r7,r16
    72c0:	10c4703a 	and	r2,r2,r3
    72c4:	98a9883a 	add	r20,r19,r2
    72c8:	84000204 	addi	r16,r16,8
    72cc:	003ecf06 	br	6e0c <_realloc_r+0x84>
    72d0:	900b883a 	mov	r5,r18
    72d4:	8009883a 	mov	r4,r16
    72d8:	0005c1c0 	call	5c1c <memmove>
    72dc:	dd000017 	ldw	r20,0(sp)
    72e0:	b80f883a 	mov	r7,r23
    72e4:	003ec906 	br	6e0c <_realloc_r+0x84>
    72e8:	900b883a 	mov	r5,r18
    72ec:	8009883a 	mov	r4,r16
    72f0:	0005c1c0 	call	5c1c <memmove>
    72f4:	b80f883a 	mov	r7,r23
    72f8:	003ec406 	br	6e0c <_realloc_r+0x84>
    72fc:	90c00417 	ldw	r3,16(r18)
    7300:	89400604 	addi	r5,r17,24
    7304:	91000604 	addi	r4,r18,24
    7308:	88c00415 	stw	r3,16(r17)
    730c:	90800517 	ldw	r2,20(r18)
    7310:	88800515 	stw	r2,20(r17)
    7314:	003f6806 	br	70b8 <_realloc_r+0x330>
    7318:	900b883a 	mov	r5,r18
    731c:	8809883a 	mov	r4,r17
    7320:	0005c1c0 	call	5c1c <memmove>
    7324:	003fd406 	br	7278 <_realloc_r+0x4f0>
    7328:	90c00417 	ldw	r3,16(r18)
    732c:	91000604 	addi	r4,r18,24
    7330:	ba000804 	addi	r8,r23,32
    7334:	b8c00615 	stw	r3,24(r23)
    7338:	90800517 	ldw	r2,20(r18)
    733c:	b8800715 	stw	r2,28(r23)
    7340:	003f1206 	br	6f8c <_realloc_r+0x204>
    7344:	90c00417 	ldw	r3,16(r18)
    7348:	91000604 	addi	r4,r18,24
    734c:	ba000804 	addi	r8,r23,32
    7350:	b8c00615 	stw	r3,24(r23)
    7354:	90800517 	ldw	r2,20(r18)
    7358:	b8800715 	stw	r2,28(r23)
    735c:	003f3206 	br	7028 <_realloc_r+0x2a0>
    7360:	90c00417 	ldw	r3,16(r18)
    7364:	91000604 	addi	r4,r18,24
    7368:	b9c00804 	addi	r7,r23,32
    736c:	b8c00615 	stw	r3,24(r23)
    7370:	90800517 	ldw	r2,20(r18)
    7374:	b8800715 	stw	r2,28(r23)
    7378:	003fb906 	br	7260 <_realloc_r+0x4d8>

0000737c <__isinfd>:
    737c:	200d883a 	mov	r6,r4
    7380:	0109c83a 	sub	r4,zero,r4
    7384:	2188b03a 	or	r4,r4,r6
    7388:	2008d7fa 	srli	r4,r4,31
    738c:	00a00034 	movhi	r2,32768
    7390:	10bfffc4 	addi	r2,r2,-1
    7394:	1144703a 	and	r2,r2,r5
    7398:	2088b03a 	or	r4,r4,r2
    739c:	009ffc34 	movhi	r2,32752
    73a0:	1105c83a 	sub	r2,r2,r4
    73a4:	0087c83a 	sub	r3,zero,r2
    73a8:	10c4b03a 	or	r2,r2,r3
    73ac:	1004d7fa 	srli	r2,r2,31
    73b0:	00c00044 	movi	r3,1
    73b4:	1885c83a 	sub	r2,r3,r2
    73b8:	f800283a 	ret

000073bc <__isnand>:
    73bc:	200d883a 	mov	r6,r4
    73c0:	0109c83a 	sub	r4,zero,r4
    73c4:	2188b03a 	or	r4,r4,r6
    73c8:	2008d7fa 	srli	r4,r4,31
    73cc:	00a00034 	movhi	r2,32768
    73d0:	10bfffc4 	addi	r2,r2,-1
    73d4:	1144703a 	and	r2,r2,r5
    73d8:	2088b03a 	or	r4,r4,r2
    73dc:	009ffc34 	movhi	r2,32752
    73e0:	1105c83a 	sub	r2,r2,r4
    73e4:	1004d7fa 	srli	r2,r2,31
    73e8:	f800283a 	ret

000073ec <_sbrk_r>:
    73ec:	defffd04 	addi	sp,sp,-12
    73f0:	dc000015 	stw	r16,0(sp)
    73f4:	04000074 	movhi	r16,1
    73f8:	84379604 	addi	r16,r16,-8616
    73fc:	dc400115 	stw	r17,4(sp)
    7400:	80000015 	stw	zero,0(r16)
    7404:	2023883a 	mov	r17,r4
    7408:	2809883a 	mov	r4,r5
    740c:	dfc00215 	stw	ra,8(sp)
    7410:	000a6f40 	call	a6f4 <sbrk>
    7414:	1007883a 	mov	r3,r2
    7418:	00bfffc4 	movi	r2,-1
    741c:	18800626 	beq	r3,r2,7438 <_sbrk_r+0x4c>
    7420:	1805883a 	mov	r2,r3
    7424:	dfc00217 	ldw	ra,8(sp)
    7428:	dc400117 	ldw	r17,4(sp)
    742c:	dc000017 	ldw	r16,0(sp)
    7430:	dec00304 	addi	sp,sp,12
    7434:	f800283a 	ret
    7438:	80800017 	ldw	r2,0(r16)
    743c:	103ff826 	beq	r2,zero,7420 <_sbrk_r+0x34>
    7440:	88800015 	stw	r2,0(r17)
    7444:	1805883a 	mov	r2,r3
    7448:	dfc00217 	ldw	ra,8(sp)
    744c:	dc400117 	ldw	r17,4(sp)
    7450:	dc000017 	ldw	r16,0(sp)
    7454:	dec00304 	addi	sp,sp,12
    7458:	f800283a 	ret

0000745c <__sclose>:
    745c:	2940038f 	ldh	r5,14(r5)
    7460:	00078041 	jmpi	7804 <_close_r>

00007464 <__sseek>:
    7464:	defffe04 	addi	sp,sp,-8
    7468:	dc000015 	stw	r16,0(sp)
    746c:	2821883a 	mov	r16,r5
    7470:	2940038f 	ldh	r5,14(r5)
    7474:	dfc00115 	stw	ra,4(sp)
    7478:	0007a7c0 	call	7a7c <_lseek_r>
    747c:	1007883a 	mov	r3,r2
    7480:	00bfffc4 	movi	r2,-1
    7484:	18800926 	beq	r3,r2,74ac <__sseek+0x48>
    7488:	8080030b 	ldhu	r2,12(r16)
    748c:	80c01415 	stw	r3,80(r16)
    7490:	10840014 	ori	r2,r2,4096
    7494:	8080030d 	sth	r2,12(r16)
    7498:	1805883a 	mov	r2,r3
    749c:	dfc00117 	ldw	ra,4(sp)
    74a0:	dc000017 	ldw	r16,0(sp)
    74a4:	dec00204 	addi	sp,sp,8
    74a8:	f800283a 	ret
    74ac:	8080030b 	ldhu	r2,12(r16)
    74b0:	10bbffcc 	andi	r2,r2,61439
    74b4:	8080030d 	sth	r2,12(r16)
    74b8:	1805883a 	mov	r2,r3
    74bc:	dfc00117 	ldw	ra,4(sp)
    74c0:	dc000017 	ldw	r16,0(sp)
    74c4:	dec00204 	addi	sp,sp,8
    74c8:	f800283a 	ret

000074cc <__swrite>:
    74cc:	2880030b 	ldhu	r2,12(r5)
    74d0:	defffb04 	addi	sp,sp,-20
    74d4:	dcc00315 	stw	r19,12(sp)
    74d8:	1080400c 	andi	r2,r2,256
    74dc:	dc800215 	stw	r18,8(sp)
    74e0:	dc400115 	stw	r17,4(sp)
    74e4:	dc000015 	stw	r16,0(sp)
    74e8:	3027883a 	mov	r19,r6
    74ec:	3825883a 	mov	r18,r7
    74f0:	dfc00415 	stw	ra,16(sp)
    74f4:	2821883a 	mov	r16,r5
    74f8:	000d883a 	mov	r6,zero
    74fc:	01c00084 	movi	r7,2
    7500:	2023883a 	mov	r17,r4
    7504:	10000226 	beq	r2,zero,7510 <__swrite+0x44>
    7508:	2940038f 	ldh	r5,14(r5)
    750c:	0007a7c0 	call	7a7c <_lseek_r>
    7510:	8080030b 	ldhu	r2,12(r16)
    7514:	8140038f 	ldh	r5,14(r16)
    7518:	8809883a 	mov	r4,r17
    751c:	10bbffcc 	andi	r2,r2,61439
    7520:	980d883a 	mov	r6,r19
    7524:	900f883a 	mov	r7,r18
    7528:	8080030d 	sth	r2,12(r16)
    752c:	dfc00417 	ldw	ra,16(sp)
    7530:	dcc00317 	ldw	r19,12(sp)
    7534:	dc800217 	ldw	r18,8(sp)
    7538:	dc400117 	ldw	r17,4(sp)
    753c:	dc000017 	ldw	r16,0(sp)
    7540:	dec00504 	addi	sp,sp,20
    7544:	00076d81 	jmpi	76d8 <_write_r>

00007548 <__sread>:
    7548:	defffe04 	addi	sp,sp,-8
    754c:	dc000015 	stw	r16,0(sp)
    7550:	2821883a 	mov	r16,r5
    7554:	2940038f 	ldh	r5,14(r5)
    7558:	dfc00115 	stw	ra,4(sp)
    755c:	0007af40 	call	7af4 <_read_r>
    7560:	1007883a 	mov	r3,r2
    7564:	10000816 	blt	r2,zero,7588 <__sread+0x40>
    7568:	80801417 	ldw	r2,80(r16)
    756c:	10c5883a 	add	r2,r2,r3
    7570:	80801415 	stw	r2,80(r16)
    7574:	1805883a 	mov	r2,r3
    7578:	dfc00117 	ldw	ra,4(sp)
    757c:	dc000017 	ldw	r16,0(sp)
    7580:	dec00204 	addi	sp,sp,8
    7584:	f800283a 	ret
    7588:	8080030b 	ldhu	r2,12(r16)
    758c:	10bbffcc 	andi	r2,r2,61439
    7590:	8080030d 	sth	r2,12(r16)
    7594:	1805883a 	mov	r2,r3
    7598:	dfc00117 	ldw	ra,4(sp)
    759c:	dc000017 	ldw	r16,0(sp)
    75a0:	dec00204 	addi	sp,sp,8
    75a4:	f800283a 	ret

000075a8 <strcmp>:
    75a8:	2144b03a 	or	r2,r4,r5
    75ac:	108000cc 	andi	r2,r2,3
    75b0:	10001d1e 	bne	r2,zero,7628 <strcmp+0x80>
    75b4:	200f883a 	mov	r7,r4
    75b8:	28800017 	ldw	r2,0(r5)
    75bc:	21000017 	ldw	r4,0(r4)
    75c0:	280d883a 	mov	r6,r5
    75c4:	2080161e 	bne	r4,r2,7620 <strcmp+0x78>
    75c8:	023fbff4 	movhi	r8,65279
    75cc:	423fbfc4 	addi	r8,r8,-257
    75d0:	2207883a 	add	r3,r4,r8
    75d4:	01602074 	movhi	r5,32897
    75d8:	29602004 	addi	r5,r5,-32640
    75dc:	1946703a 	and	r3,r3,r5
    75e0:	0104303a 	nor	r2,zero,r4
    75e4:	10c4703a 	and	r2,r2,r3
    75e8:	10001c1e 	bne	r2,zero,765c <strcmp+0xb4>
    75ec:	4013883a 	mov	r9,r8
    75f0:	2811883a 	mov	r8,r5
    75f4:	00000106 	br	75fc <strcmp+0x54>
    75f8:	1800181e 	bne	r3,zero,765c <strcmp+0xb4>
    75fc:	39c00104 	addi	r7,r7,4
    7600:	39000017 	ldw	r4,0(r7)
    7604:	31800104 	addi	r6,r6,4
    7608:	31400017 	ldw	r5,0(r6)
    760c:	2245883a 	add	r2,r4,r9
    7610:	1204703a 	and	r2,r2,r8
    7614:	0106303a 	nor	r3,zero,r4
    7618:	1886703a 	and	r3,r3,r2
    761c:	217ff626 	beq	r4,r5,75f8 <strcmp+0x50>
    7620:	3809883a 	mov	r4,r7
    7624:	300b883a 	mov	r5,r6
    7628:	20c00007 	ldb	r3,0(r4)
    762c:	1800051e 	bne	r3,zero,7644 <strcmp+0x9c>
    7630:	00000606 	br	764c <strcmp+0xa4>
    7634:	21000044 	addi	r4,r4,1
    7638:	20c00007 	ldb	r3,0(r4)
    763c:	29400044 	addi	r5,r5,1
    7640:	18000226 	beq	r3,zero,764c <strcmp+0xa4>
    7644:	28800007 	ldb	r2,0(r5)
    7648:	18bffa26 	beq	r3,r2,7634 <strcmp+0x8c>
    764c:	20c00003 	ldbu	r3,0(r4)
    7650:	28800003 	ldbu	r2,0(r5)
    7654:	1885c83a 	sub	r2,r3,r2
    7658:	f800283a 	ret
    765c:	0005883a 	mov	r2,zero
    7660:	f800283a 	ret

00007664 <strlen>:
    7664:	208000cc 	andi	r2,r4,3
    7668:	2011883a 	mov	r8,r4
    766c:	1000161e 	bne	r2,zero,76c8 <strlen+0x64>
    7670:	20c00017 	ldw	r3,0(r4)
    7674:	017fbff4 	movhi	r5,65279
    7678:	297fbfc4 	addi	r5,r5,-257
    767c:	01e02074 	movhi	r7,32897
    7680:	39e02004 	addi	r7,r7,-32640
    7684:	1945883a 	add	r2,r3,r5
    7688:	11c4703a 	and	r2,r2,r7
    768c:	00c6303a 	nor	r3,zero,r3
    7690:	1886703a 	and	r3,r3,r2
    7694:	18000c1e 	bne	r3,zero,76c8 <strlen+0x64>
    7698:	280d883a 	mov	r6,r5
    769c:	380b883a 	mov	r5,r7
    76a0:	21000104 	addi	r4,r4,4
    76a4:	20800017 	ldw	r2,0(r4)
    76a8:	1187883a 	add	r3,r2,r6
    76ac:	1946703a 	and	r3,r3,r5
    76b0:	0084303a 	nor	r2,zero,r2
    76b4:	10c4703a 	and	r2,r2,r3
    76b8:	103ff926 	beq	r2,zero,76a0 <strlen+0x3c>
    76bc:	20800007 	ldb	r2,0(r4)
    76c0:	10000326 	beq	r2,zero,76d0 <strlen+0x6c>
    76c4:	21000044 	addi	r4,r4,1
    76c8:	20800007 	ldb	r2,0(r4)
    76cc:	103ffd1e 	bne	r2,zero,76c4 <strlen+0x60>
    76d0:	2205c83a 	sub	r2,r4,r8
    76d4:	f800283a 	ret

000076d8 <_write_r>:
    76d8:	defffd04 	addi	sp,sp,-12
    76dc:	dc000015 	stw	r16,0(sp)
    76e0:	04000074 	movhi	r16,1
    76e4:	84379604 	addi	r16,r16,-8616
    76e8:	dc400115 	stw	r17,4(sp)
    76ec:	80000015 	stw	zero,0(r16)
    76f0:	2023883a 	mov	r17,r4
    76f4:	2809883a 	mov	r4,r5
    76f8:	300b883a 	mov	r5,r6
    76fc:	380d883a 	mov	r6,r7
    7700:	dfc00215 	stw	ra,8(sp)
    7704:	000a7e00 	call	a7e0 <write>
    7708:	1007883a 	mov	r3,r2
    770c:	00bfffc4 	movi	r2,-1
    7710:	18800626 	beq	r3,r2,772c <_write_r+0x54>
    7714:	1805883a 	mov	r2,r3
    7718:	dfc00217 	ldw	ra,8(sp)
    771c:	dc400117 	ldw	r17,4(sp)
    7720:	dc000017 	ldw	r16,0(sp)
    7724:	dec00304 	addi	sp,sp,12
    7728:	f800283a 	ret
    772c:	80800017 	ldw	r2,0(r16)
    7730:	103ff826 	beq	r2,zero,7714 <_write_r+0x3c>
    7734:	88800015 	stw	r2,0(r17)
    7738:	1805883a 	mov	r2,r3
    773c:	dfc00217 	ldw	ra,8(sp)
    7740:	dc400117 	ldw	r17,4(sp)
    7744:	dc000017 	ldw	r16,0(sp)
    7748:	dec00304 	addi	sp,sp,12
    774c:	f800283a 	ret

00007750 <_calloc_r>:
    7750:	298b383a 	mul	r5,r5,r6
    7754:	defffe04 	addi	sp,sp,-8
    7758:	dc000015 	stw	r16,0(sp)
    775c:	dfc00115 	stw	ra,4(sp)
    7760:	00053580 	call	5358 <_malloc_r>
    7764:	1021883a 	mov	r16,r2
    7768:	01c00904 	movi	r7,36
    776c:	10000d26 	beq	r2,zero,77a4 <_calloc_r+0x54>
    7770:	10ffff17 	ldw	r3,-4(r2)
    7774:	1009883a 	mov	r4,r2
    7778:	00bfff04 	movi	r2,-4
    777c:	1886703a 	and	r3,r3,r2
    7780:	1887883a 	add	r3,r3,r2
    7784:	180d883a 	mov	r6,r3
    7788:	000b883a 	mov	r5,zero
    778c:	38c01736 	bltu	r7,r3,77ec <_calloc_r+0x9c>
    7790:	008004c4 	movi	r2,19
    7794:	10c00836 	bltu	r2,r3,77b8 <_calloc_r+0x68>
    7798:	20000215 	stw	zero,8(r4)
    779c:	20000015 	stw	zero,0(r4)
    77a0:	20000115 	stw	zero,4(r4)
    77a4:	8005883a 	mov	r2,r16
    77a8:	dfc00117 	ldw	ra,4(sp)
    77ac:	dc000017 	ldw	r16,0(sp)
    77b0:	dec00204 	addi	sp,sp,8
    77b4:	f800283a 	ret
    77b8:	008006c4 	movi	r2,27
    77bc:	80000015 	stw	zero,0(r16)
    77c0:	80000115 	stw	zero,4(r16)
    77c4:	81000204 	addi	r4,r16,8
    77c8:	10fff32e 	bgeu	r2,r3,7798 <_calloc_r+0x48>
    77cc:	80000215 	stw	zero,8(r16)
    77d0:	80000315 	stw	zero,12(r16)
    77d4:	81000404 	addi	r4,r16,16
    77d8:	19ffef1e 	bne	r3,r7,7798 <_calloc_r+0x48>
    77dc:	81000604 	addi	r4,r16,24
    77e0:	80000415 	stw	zero,16(r16)
    77e4:	80000515 	stw	zero,20(r16)
    77e8:	003feb06 	br	7798 <_calloc_r+0x48>
    77ec:	0005cfc0 	call	5cfc <memset>
    77f0:	8005883a 	mov	r2,r16
    77f4:	dfc00117 	ldw	ra,4(sp)
    77f8:	dc000017 	ldw	r16,0(sp)
    77fc:	dec00204 	addi	sp,sp,8
    7800:	f800283a 	ret

00007804 <_close_r>:
    7804:	defffd04 	addi	sp,sp,-12
    7808:	dc000015 	stw	r16,0(sp)
    780c:	04000074 	movhi	r16,1
    7810:	84379604 	addi	r16,r16,-8616
    7814:	dc400115 	stw	r17,4(sp)
    7818:	80000015 	stw	zero,0(r16)
    781c:	2023883a 	mov	r17,r4
    7820:	2809883a 	mov	r4,r5
    7824:	dfc00215 	stw	ra,8(sp)
    7828:	0009e500 	call	9e50 <close>
    782c:	1007883a 	mov	r3,r2
    7830:	00bfffc4 	movi	r2,-1
    7834:	18800626 	beq	r3,r2,7850 <_close_r+0x4c>
    7838:	1805883a 	mov	r2,r3
    783c:	dfc00217 	ldw	ra,8(sp)
    7840:	dc400117 	ldw	r17,4(sp)
    7844:	dc000017 	ldw	r16,0(sp)
    7848:	dec00304 	addi	sp,sp,12
    784c:	f800283a 	ret
    7850:	80800017 	ldw	r2,0(r16)
    7854:	103ff826 	beq	r2,zero,7838 <_close_r+0x34>
    7858:	88800015 	stw	r2,0(r17)
    785c:	1805883a 	mov	r2,r3
    7860:	dfc00217 	ldw	ra,8(sp)
    7864:	dc400117 	ldw	r17,4(sp)
    7868:	dc000017 	ldw	r16,0(sp)
    786c:	dec00304 	addi	sp,sp,12
    7870:	f800283a 	ret

00007874 <_fclose_r>:
    7874:	defffc04 	addi	sp,sp,-16
    7878:	dc400115 	stw	r17,4(sp)
    787c:	dc000015 	stw	r16,0(sp)
    7880:	dfc00315 	stw	ra,12(sp)
    7884:	dc800215 	stw	r18,8(sp)
    7888:	2821883a 	mov	r16,r5
    788c:	2023883a 	mov	r17,r4
    7890:	28002926 	beq	r5,zero,7938 <_fclose_r+0xc4>
    7894:	000443c0 	call	443c <__sfp_lock_acquire>
    7898:	88000226 	beq	r17,zero,78a4 <_fclose_r+0x30>
    789c:	88800e17 	ldw	r2,56(r17)
    78a0:	10002d26 	beq	r2,zero,7958 <_fclose_r+0xe4>
    78a4:	8080030f 	ldh	r2,12(r16)
    78a8:	10002226 	beq	r2,zero,7934 <_fclose_r+0xc0>
    78ac:	8809883a 	mov	r4,r17
    78b0:	800b883a 	mov	r5,r16
    78b4:	00041b40 	call	41b4 <_fflush_r>
    78b8:	1025883a 	mov	r18,r2
    78bc:	80800b17 	ldw	r2,44(r16)
    78c0:	10000426 	beq	r2,zero,78d4 <_fclose_r+0x60>
    78c4:	81400717 	ldw	r5,28(r16)
    78c8:	8809883a 	mov	r4,r17
    78cc:	103ee83a 	callr	r2
    78d0:	10002a16 	blt	r2,zero,797c <_fclose_r+0x108>
    78d4:	8080030b 	ldhu	r2,12(r16)
    78d8:	1080200c 	andi	r2,r2,128
    78dc:	1000231e 	bne	r2,zero,796c <_fclose_r+0xf8>
    78e0:	81400c17 	ldw	r5,48(r16)
    78e4:	28000526 	beq	r5,zero,78fc <_fclose_r+0x88>
    78e8:	80801004 	addi	r2,r16,64
    78ec:	28800226 	beq	r5,r2,78f8 <_fclose_r+0x84>
    78f0:	8809883a 	mov	r4,r17
    78f4:	00047d00 	call	47d0 <_free_r>
    78f8:	80000c15 	stw	zero,48(r16)
    78fc:	81401117 	ldw	r5,68(r16)
    7900:	28000326 	beq	r5,zero,7910 <_fclose_r+0x9c>
    7904:	8809883a 	mov	r4,r17
    7908:	00047d00 	call	47d0 <_free_r>
    790c:	80001115 	stw	zero,68(r16)
    7910:	8000030d 	sth	zero,12(r16)
    7914:	00044400 	call	4440 <__sfp_lock_release>
    7918:	9005883a 	mov	r2,r18
    791c:	dfc00317 	ldw	ra,12(sp)
    7920:	dc800217 	ldw	r18,8(sp)
    7924:	dc400117 	ldw	r17,4(sp)
    7928:	dc000017 	ldw	r16,0(sp)
    792c:	dec00404 	addi	sp,sp,16
    7930:	f800283a 	ret
    7934:	00044400 	call	4440 <__sfp_lock_release>
    7938:	0025883a 	mov	r18,zero
    793c:	9005883a 	mov	r2,r18
    7940:	dfc00317 	ldw	ra,12(sp)
    7944:	dc800217 	ldw	r18,8(sp)
    7948:	dc400117 	ldw	r17,4(sp)
    794c:	dc000017 	ldw	r16,0(sp)
    7950:	dec00404 	addi	sp,sp,16
    7954:	f800283a 	ret
    7958:	8809883a 	mov	r4,r17
    795c:	000444c0 	call	444c <__sinit>
    7960:	8080030f 	ldh	r2,12(r16)
    7964:	103fd11e 	bne	r2,zero,78ac <_fclose_r+0x38>
    7968:	003ff206 	br	7934 <_fclose_r+0xc0>
    796c:	81400417 	ldw	r5,16(r16)
    7970:	8809883a 	mov	r4,r17
    7974:	00047d00 	call	47d0 <_free_r>
    7978:	003fd906 	br	78e0 <_fclose_r+0x6c>
    797c:	04bfffc4 	movi	r18,-1
    7980:	003fd406 	br	78d4 <_fclose_r+0x60>

00007984 <fclose>:
    7984:	00800074 	movhi	r2,1
    7988:	10b4cc04 	addi	r2,r2,-11472
    798c:	200b883a 	mov	r5,r4
    7990:	11000017 	ldw	r4,0(r2)
    7994:	00078741 	jmpi	7874 <_fclose_r>

00007998 <_fstat_r>:
    7998:	defffd04 	addi	sp,sp,-12
    799c:	dc000015 	stw	r16,0(sp)
    79a0:	04000074 	movhi	r16,1
    79a4:	84379604 	addi	r16,r16,-8616
    79a8:	dc400115 	stw	r17,4(sp)
    79ac:	80000015 	stw	zero,0(r16)
    79b0:	2023883a 	mov	r17,r4
    79b4:	2809883a 	mov	r4,r5
    79b8:	300b883a 	mov	r5,r6
    79bc:	dfc00215 	stw	ra,8(sp)
    79c0:	0009fd80 	call	9fd8 <fstat>
    79c4:	1007883a 	mov	r3,r2
    79c8:	00bfffc4 	movi	r2,-1
    79cc:	18800626 	beq	r3,r2,79e8 <_fstat_r+0x50>
    79d0:	1805883a 	mov	r2,r3
    79d4:	dfc00217 	ldw	ra,8(sp)
    79d8:	dc400117 	ldw	r17,4(sp)
    79dc:	dc000017 	ldw	r16,0(sp)
    79e0:	dec00304 	addi	sp,sp,12
    79e4:	f800283a 	ret
    79e8:	80800017 	ldw	r2,0(r16)
    79ec:	103ff826 	beq	r2,zero,79d0 <_fstat_r+0x38>
    79f0:	88800015 	stw	r2,0(r17)
    79f4:	1805883a 	mov	r2,r3
    79f8:	dfc00217 	ldw	ra,8(sp)
    79fc:	dc400117 	ldw	r17,4(sp)
    7a00:	dc000017 	ldw	r16,0(sp)
    7a04:	dec00304 	addi	sp,sp,12
    7a08:	f800283a 	ret

00007a0c <_isatty_r>:
    7a0c:	defffd04 	addi	sp,sp,-12
    7a10:	dc000015 	stw	r16,0(sp)
    7a14:	04000074 	movhi	r16,1
    7a18:	84379604 	addi	r16,r16,-8616
    7a1c:	dc400115 	stw	r17,4(sp)
    7a20:	80000015 	stw	zero,0(r16)
    7a24:	2023883a 	mov	r17,r4
    7a28:	2809883a 	mov	r4,r5
    7a2c:	dfc00215 	stw	ra,8(sp)
    7a30:	000a10c0 	call	a10c <isatty>
    7a34:	1007883a 	mov	r3,r2
    7a38:	00bfffc4 	movi	r2,-1
    7a3c:	18800626 	beq	r3,r2,7a58 <_isatty_r+0x4c>
    7a40:	1805883a 	mov	r2,r3
    7a44:	dfc00217 	ldw	ra,8(sp)
    7a48:	dc400117 	ldw	r17,4(sp)
    7a4c:	dc000017 	ldw	r16,0(sp)
    7a50:	dec00304 	addi	sp,sp,12
    7a54:	f800283a 	ret
    7a58:	80800017 	ldw	r2,0(r16)
    7a5c:	103ff826 	beq	r2,zero,7a40 <_isatty_r+0x34>
    7a60:	88800015 	stw	r2,0(r17)
    7a64:	1805883a 	mov	r2,r3
    7a68:	dfc00217 	ldw	ra,8(sp)
    7a6c:	dc400117 	ldw	r17,4(sp)
    7a70:	dc000017 	ldw	r16,0(sp)
    7a74:	dec00304 	addi	sp,sp,12
    7a78:	f800283a 	ret

00007a7c <_lseek_r>:
    7a7c:	defffd04 	addi	sp,sp,-12
    7a80:	dc000015 	stw	r16,0(sp)
    7a84:	04000074 	movhi	r16,1
    7a88:	84379604 	addi	r16,r16,-8616
    7a8c:	dc400115 	stw	r17,4(sp)
    7a90:	80000015 	stw	zero,0(r16)
    7a94:	2023883a 	mov	r17,r4
    7a98:	2809883a 	mov	r4,r5
    7a9c:	300b883a 	mov	r5,r6
    7aa0:	380d883a 	mov	r6,r7
    7aa4:	dfc00215 	stw	ra,8(sp)
    7aa8:	000a3180 	call	a318 <lseek>
    7aac:	1007883a 	mov	r3,r2
    7ab0:	00bfffc4 	movi	r2,-1
    7ab4:	18800626 	beq	r3,r2,7ad0 <_lseek_r+0x54>
    7ab8:	1805883a 	mov	r2,r3
    7abc:	dfc00217 	ldw	ra,8(sp)
    7ac0:	dc400117 	ldw	r17,4(sp)
    7ac4:	dc000017 	ldw	r16,0(sp)
    7ac8:	dec00304 	addi	sp,sp,12
    7acc:	f800283a 	ret
    7ad0:	80800017 	ldw	r2,0(r16)
    7ad4:	103ff826 	beq	r2,zero,7ab8 <_lseek_r+0x3c>
    7ad8:	88800015 	stw	r2,0(r17)
    7adc:	1805883a 	mov	r2,r3
    7ae0:	dfc00217 	ldw	ra,8(sp)
    7ae4:	dc400117 	ldw	r17,4(sp)
    7ae8:	dc000017 	ldw	r16,0(sp)
    7aec:	dec00304 	addi	sp,sp,12
    7af0:	f800283a 	ret

00007af4 <_read_r>:
    7af4:	defffd04 	addi	sp,sp,-12
    7af8:	dc000015 	stw	r16,0(sp)
    7afc:	04000074 	movhi	r16,1
    7b00:	84379604 	addi	r16,r16,-8616
    7b04:	dc400115 	stw	r17,4(sp)
    7b08:	80000015 	stw	zero,0(r16)
    7b0c:	2023883a 	mov	r17,r4
    7b10:	2809883a 	mov	r4,r5
    7b14:	300b883a 	mov	r5,r6
    7b18:	380d883a 	mov	r6,r7
    7b1c:	dfc00215 	stw	ra,8(sp)
    7b20:	000a5140 	call	a514 <read>
    7b24:	1007883a 	mov	r3,r2
    7b28:	00bfffc4 	movi	r2,-1
    7b2c:	18800626 	beq	r3,r2,7b48 <_read_r+0x54>
    7b30:	1805883a 	mov	r2,r3
    7b34:	dfc00217 	ldw	ra,8(sp)
    7b38:	dc400117 	ldw	r17,4(sp)
    7b3c:	dc000017 	ldw	r16,0(sp)
    7b40:	dec00304 	addi	sp,sp,12
    7b44:	f800283a 	ret
    7b48:	80800017 	ldw	r2,0(r16)
    7b4c:	103ff826 	beq	r2,zero,7b30 <_read_r+0x3c>
    7b50:	88800015 	stw	r2,0(r17)
    7b54:	1805883a 	mov	r2,r3
    7b58:	dfc00217 	ldw	ra,8(sp)
    7b5c:	dc400117 	ldw	r17,4(sp)
    7b60:	dc000017 	ldw	r16,0(sp)
    7b64:	dec00304 	addi	sp,sp,12
    7b68:	f800283a 	ret

00007b6c <__udivdi3>:
    7b6c:	defff004 	addi	sp,sp,-64
    7b70:	2005883a 	mov	r2,r4
    7b74:	3011883a 	mov	r8,r6
    7b78:	df000e15 	stw	fp,56(sp)
    7b7c:	dd000a15 	stw	r20,40(sp)
    7b80:	dc000615 	stw	r16,24(sp)
    7b84:	dfc00f15 	stw	ra,60(sp)
    7b88:	ddc00d15 	stw	r23,52(sp)
    7b8c:	dd800c15 	stw	r22,48(sp)
    7b90:	dd400b15 	stw	r21,44(sp)
    7b94:	dcc00915 	stw	r19,36(sp)
    7b98:	dc800815 	stw	r18,32(sp)
    7b9c:	dc400715 	stw	r17,28(sp)
    7ba0:	4021883a 	mov	r16,r8
    7ba4:	1039883a 	mov	fp,r2
    7ba8:	2829883a 	mov	r20,r5
    7bac:	38003b1e 	bne	r7,zero,7c9c <__udivdi3+0x130>
    7bb0:	2a005c36 	bltu	r5,r8,7d24 <__udivdi3+0x1b8>
    7bb4:	4000a626 	beq	r8,zero,7e50 <__udivdi3+0x2e4>
    7bb8:	00bfffd4 	movui	r2,65535
    7bbc:	14009e36 	bltu	r2,r16,7e38 <__udivdi3+0x2cc>
    7bc0:	00803fc4 	movi	r2,255
    7bc4:	14013d36 	bltu	r2,r16,80bc <__udivdi3+0x550>
    7bc8:	000b883a 	mov	r5,zero
    7bcc:	0005883a 	mov	r2,zero
    7bd0:	8084d83a 	srl	r2,r16,r2
    7bd4:	01000074 	movhi	r4,1
    7bd8:	2131db04 	addi	r4,r4,-14484
    7bdc:	01800804 	movi	r6,32
    7be0:	1105883a 	add	r2,r2,r4
    7be4:	10c00003 	ldbu	r3,0(r2)
    7be8:	28c7883a 	add	r3,r5,r3
    7bec:	30edc83a 	sub	r22,r6,r3
    7bf0:	b000ee1e 	bne	r22,zero,7fac <__udivdi3+0x440>
    7bf4:	802ad43a 	srli	r21,r16,16
    7bf8:	00800044 	movi	r2,1
    7bfc:	a423c83a 	sub	r17,r20,r16
    7c00:	85ffffcc 	andi	r23,r16,65535
    7c04:	d8800315 	stw	r2,12(sp)
    7c08:	8809883a 	mov	r4,r17
    7c0c:	a80b883a 	mov	r5,r21
    7c10:	00008fc0 	call	8fc <__udivsi3>
    7c14:	8809883a 	mov	r4,r17
    7c18:	a80b883a 	mov	r5,r21
    7c1c:	102d883a 	mov	r22,r2
    7c20:	00009040 	call	904 <__umodsi3>
    7c24:	1004943a 	slli	r2,r2,16
    7c28:	e006d43a 	srli	r3,fp,16
    7c2c:	bda3383a 	mul	r17,r23,r22
    7c30:	10c4b03a 	or	r2,r2,r3
    7c34:	1440042e 	bgeu	r2,r17,7c48 <__udivdi3+0xdc>
    7c38:	1405883a 	add	r2,r2,r16
    7c3c:	b5bfffc4 	addi	r22,r22,-1
    7c40:	14000136 	bltu	r2,r16,7c48 <__udivdi3+0xdc>
    7c44:	14413d36 	bltu	r2,r17,813c <__udivdi3+0x5d0>
    7c48:	1463c83a 	sub	r17,r2,r17
    7c4c:	8809883a 	mov	r4,r17
    7c50:	a80b883a 	mov	r5,r21
    7c54:	00008fc0 	call	8fc <__udivsi3>
    7c58:	8809883a 	mov	r4,r17
    7c5c:	a80b883a 	mov	r5,r21
    7c60:	1029883a 	mov	r20,r2
    7c64:	00009040 	call	904 <__umodsi3>
    7c68:	1004943a 	slli	r2,r2,16
    7c6c:	bd09383a 	mul	r4,r23,r20
    7c70:	e0ffffcc 	andi	r3,fp,65535
    7c74:	10c4b03a 	or	r2,r2,r3
    7c78:	1100042e 	bgeu	r2,r4,7c8c <__udivdi3+0x120>
    7c7c:	8085883a 	add	r2,r16,r2
    7c80:	a53fffc4 	addi	r20,r20,-1
    7c84:	14000136 	bltu	r2,r16,7c8c <__udivdi3+0x120>
    7c88:	11012036 	bltu	r2,r4,810c <__udivdi3+0x5a0>
    7c8c:	b004943a 	slli	r2,r22,16
    7c90:	d9000317 	ldw	r4,12(sp)
    7c94:	a084b03a 	or	r2,r20,r2
    7c98:	00001506 	br	7cf0 <__udivdi3+0x184>
    7c9c:	380d883a 	mov	r6,r7
    7ca0:	29c06236 	bltu	r5,r7,7e2c <__udivdi3+0x2c0>
    7ca4:	00bfffd4 	movui	r2,65535
    7ca8:	11c05a36 	bltu	r2,r7,7e14 <__udivdi3+0x2a8>
    7cac:	00803fc4 	movi	r2,255
    7cb0:	11c0fc36 	bltu	r2,r7,80a4 <__udivdi3+0x538>
    7cb4:	000b883a 	mov	r5,zero
    7cb8:	0005883a 	mov	r2,zero
    7cbc:	3084d83a 	srl	r2,r6,r2
    7cc0:	01000074 	movhi	r4,1
    7cc4:	2131db04 	addi	r4,r4,-14484
    7cc8:	01c00804 	movi	r7,32
    7ccc:	1105883a 	add	r2,r2,r4
    7cd0:	10c00003 	ldbu	r3,0(r2)
    7cd4:	28c7883a 	add	r3,r5,r3
    7cd8:	38efc83a 	sub	r23,r7,r3
    7cdc:	b800691e 	bne	r23,zero,7e84 <__udivdi3+0x318>
    7ce0:	35000136 	bltu	r6,r20,7ce8 <__udivdi3+0x17c>
    7ce4:	e4005136 	bltu	fp,r16,7e2c <__udivdi3+0x2c0>
    7ce8:	00800044 	movi	r2,1
    7cec:	0009883a 	mov	r4,zero
    7cf0:	2007883a 	mov	r3,r4
    7cf4:	dfc00f17 	ldw	ra,60(sp)
    7cf8:	df000e17 	ldw	fp,56(sp)
    7cfc:	ddc00d17 	ldw	r23,52(sp)
    7d00:	dd800c17 	ldw	r22,48(sp)
    7d04:	dd400b17 	ldw	r21,44(sp)
    7d08:	dd000a17 	ldw	r20,40(sp)
    7d0c:	dcc00917 	ldw	r19,36(sp)
    7d10:	dc800817 	ldw	r18,32(sp)
    7d14:	dc400717 	ldw	r17,28(sp)
    7d18:	dc000617 	ldw	r16,24(sp)
    7d1c:	dec01004 	addi	sp,sp,64
    7d20:	f800283a 	ret
    7d24:	00bfffd4 	movui	r2,65535
    7d28:	12005036 	bltu	r2,r8,7e6c <__udivdi3+0x300>
    7d2c:	00803fc4 	movi	r2,255
    7d30:	1200e836 	bltu	r2,r8,80d4 <__udivdi3+0x568>
    7d34:	000b883a 	mov	r5,zero
    7d38:	0005883a 	mov	r2,zero
    7d3c:	8084d83a 	srl	r2,r16,r2
    7d40:	01000074 	movhi	r4,1
    7d44:	2131db04 	addi	r4,r4,-14484
    7d48:	01800804 	movi	r6,32
    7d4c:	1105883a 	add	r2,r2,r4
    7d50:	10c00003 	ldbu	r3,0(r2)
    7d54:	28c7883a 	add	r3,r5,r3
    7d58:	30cbc83a 	sub	r5,r6,r3
    7d5c:	28000626 	beq	r5,zero,7d78 <__udivdi3+0x20c>
    7d60:	3145c83a 	sub	r2,r6,r5
    7d64:	e084d83a 	srl	r2,fp,r2
    7d68:	a146983a 	sll	r3,r20,r5
    7d6c:	e178983a 	sll	fp,fp,r5
    7d70:	8160983a 	sll	r16,r16,r5
    7d74:	18a8b03a 	or	r20,r3,r2
    7d78:	802ad43a 	srli	r21,r16,16
    7d7c:	a009883a 	mov	r4,r20
    7d80:	85ffffcc 	andi	r23,r16,65535
    7d84:	a80b883a 	mov	r5,r21
    7d88:	00008fc0 	call	8fc <__udivsi3>
    7d8c:	a009883a 	mov	r4,r20
    7d90:	a80b883a 	mov	r5,r21
    7d94:	102d883a 	mov	r22,r2
    7d98:	00009040 	call	904 <__umodsi3>
    7d9c:	1004943a 	slli	r2,r2,16
    7da0:	e006d43a 	srli	r3,fp,16
    7da4:	bda3383a 	mul	r17,r23,r22
    7da8:	10c4b03a 	or	r2,r2,r3
    7dac:	1440042e 	bgeu	r2,r17,7dc0 <__udivdi3+0x254>
    7db0:	1405883a 	add	r2,r2,r16
    7db4:	b5bfffc4 	addi	r22,r22,-1
    7db8:	14000136 	bltu	r2,r16,7dc0 <__udivdi3+0x254>
    7dbc:	1440d536 	bltu	r2,r17,8114 <__udivdi3+0x5a8>
    7dc0:	1463c83a 	sub	r17,r2,r17
    7dc4:	8809883a 	mov	r4,r17
    7dc8:	a80b883a 	mov	r5,r21
    7dcc:	00008fc0 	call	8fc <__udivsi3>
    7dd0:	8809883a 	mov	r4,r17
    7dd4:	a80b883a 	mov	r5,r21
    7dd8:	1029883a 	mov	r20,r2
    7ddc:	00009040 	call	904 <__umodsi3>
    7de0:	1004943a 	slli	r2,r2,16
    7de4:	bd09383a 	mul	r4,r23,r20
    7de8:	e0ffffcc 	andi	r3,fp,65535
    7dec:	10c4b03a 	or	r2,r2,r3
    7df0:	1100042e 	bgeu	r2,r4,7e04 <__udivdi3+0x298>
    7df4:	8085883a 	add	r2,r16,r2
    7df8:	a53fffc4 	addi	r20,r20,-1
    7dfc:	14000136 	bltu	r2,r16,7e04 <__udivdi3+0x298>
    7e00:	1100c736 	bltu	r2,r4,8120 <__udivdi3+0x5b4>
    7e04:	b004943a 	slli	r2,r22,16
    7e08:	0009883a 	mov	r4,zero
    7e0c:	a084b03a 	or	r2,r20,r2
    7e10:	003fb706 	br	7cf0 <__udivdi3+0x184>
    7e14:	00804034 	movhi	r2,256
    7e18:	10bfffc4 	addi	r2,r2,-1
    7e1c:	11c0a436 	bltu	r2,r7,80b0 <__udivdi3+0x544>
    7e20:	01400404 	movi	r5,16
    7e24:	2805883a 	mov	r2,r5
    7e28:	003fa406 	br	7cbc <__udivdi3+0x150>
    7e2c:	0005883a 	mov	r2,zero
    7e30:	0009883a 	mov	r4,zero
    7e34:	003fae06 	br	7cf0 <__udivdi3+0x184>
    7e38:	00804034 	movhi	r2,256
    7e3c:	10bfffc4 	addi	r2,r2,-1
    7e40:	1400a136 	bltu	r2,r16,80c8 <__udivdi3+0x55c>
    7e44:	01400404 	movi	r5,16
    7e48:	2805883a 	mov	r2,r5
    7e4c:	003f6006 	br	7bd0 <__udivdi3+0x64>
    7e50:	01000044 	movi	r4,1
    7e54:	000b883a 	mov	r5,zero
    7e58:	00008fc0 	call	8fc <__udivsi3>
    7e5c:	1021883a 	mov	r16,r2
    7e60:	00bfffd4 	movui	r2,65535
    7e64:	143ff436 	bltu	r2,r16,7e38 <__udivdi3+0x2cc>
    7e68:	003f5506 	br	7bc0 <__udivdi3+0x54>
    7e6c:	00804034 	movhi	r2,256
    7e70:	10bfffc4 	addi	r2,r2,-1
    7e74:	12009a36 	bltu	r2,r8,80e0 <__udivdi3+0x574>
    7e78:	01400404 	movi	r5,16
    7e7c:	2805883a 	mov	r2,r5
    7e80:	003fae06 	br	7d3c <__udivdi3+0x1d0>
    7e84:	3dc5c83a 	sub	r2,r7,r23
    7e88:	35c8983a 	sll	r4,r6,r23
    7e8c:	8086d83a 	srl	r3,r16,r2
    7e90:	a0a2d83a 	srl	r17,r20,r2
    7e94:	e084d83a 	srl	r2,fp,r2
    7e98:	20eab03a 	or	r21,r4,r3
    7e9c:	a82cd43a 	srli	r22,r21,16
    7ea0:	a5c6983a 	sll	r3,r20,r23
    7ea4:	8809883a 	mov	r4,r17
    7ea8:	b00b883a 	mov	r5,r22
    7eac:	1886b03a 	or	r3,r3,r2
    7eb0:	d8c00215 	stw	r3,8(sp)
    7eb4:	00008fc0 	call	8fc <__udivsi3>
    7eb8:	8809883a 	mov	r4,r17
    7ebc:	b00b883a 	mov	r5,r22
    7ec0:	1029883a 	mov	r20,r2
    7ec4:	00009040 	call	904 <__umodsi3>
    7ec8:	a8ffffcc 	andi	r3,r21,65535
    7ecc:	d8c00515 	stw	r3,20(sp)
    7ed0:	d9000217 	ldw	r4,8(sp)
    7ed4:	d9400517 	ldw	r5,20(sp)
    7ed8:	1004943a 	slli	r2,r2,16
    7edc:	2006d43a 	srli	r3,r4,16
    7ee0:	85e0983a 	sll	r16,r16,r23
    7ee4:	2d23383a 	mul	r17,r5,r20
    7ee8:	10c4b03a 	or	r2,r2,r3
    7eec:	dc000015 	stw	r16,0(sp)
    7ef0:	1440032e 	bgeu	r2,r17,7f00 <__udivdi3+0x394>
    7ef4:	1545883a 	add	r2,r2,r21
    7ef8:	a53fffc4 	addi	r20,r20,-1
    7efc:	15407f2e 	bgeu	r2,r21,80fc <__udivdi3+0x590>
    7f00:	1463c83a 	sub	r17,r2,r17
    7f04:	8809883a 	mov	r4,r17
    7f08:	b00b883a 	mov	r5,r22
    7f0c:	00008fc0 	call	8fc <__udivsi3>
    7f10:	8809883a 	mov	r4,r17
    7f14:	b00b883a 	mov	r5,r22
    7f18:	1021883a 	mov	r16,r2
    7f1c:	00009040 	call	904 <__umodsi3>
    7f20:	d8c00517 	ldw	r3,20(sp)
    7f24:	d9000217 	ldw	r4,8(sp)
    7f28:	1004943a 	slli	r2,r2,16
    7f2c:	1c0f383a 	mul	r7,r3,r16
    7f30:	20ffffcc 	andi	r3,r4,65535
    7f34:	10e2b03a 	or	r17,r2,r3
    7f38:	89c0032e 	bgeu	r17,r7,7f48 <__udivdi3+0x3dc>
    7f3c:	8d63883a 	add	r17,r17,r21
    7f40:	843fffc4 	addi	r16,r16,-1
    7f44:	8d40692e 	bgeu	r17,r21,80ec <__udivdi3+0x580>
    7f48:	a008943a 	slli	r4,r20,16
    7f4c:	d9400017 	ldw	r5,0(sp)
    7f50:	89e3c83a 	sub	r17,r17,r7
    7f54:	8110b03a 	or	r8,r16,r4
    7f58:	280cd43a 	srli	r6,r5,16
    7f5c:	28ffffcc 	andi	r3,r5,65535
    7f60:	40bfffcc 	andi	r2,r8,65535
    7f64:	400ad43a 	srli	r5,r8,16
    7f68:	10d3383a 	mul	r9,r2,r3
    7f6c:	1185383a 	mul	r2,r2,r6
    7f70:	28c7383a 	mul	r3,r5,r3
    7f74:	4808d43a 	srli	r4,r9,16
    7f78:	298b383a 	mul	r5,r5,r6
    7f7c:	10c5883a 	add	r2,r2,r3
    7f80:	2089883a 	add	r4,r4,r2
    7f84:	20c0022e 	bgeu	r4,r3,7f90 <__udivdi3+0x424>
    7f88:	00800074 	movhi	r2,1
    7f8c:	288b883a 	add	r5,r5,r2
    7f90:	2004d43a 	srli	r2,r4,16
    7f94:	288b883a 	add	r5,r5,r2
    7f98:	89403f36 	bltu	r17,r5,8098 <__udivdi3+0x52c>
    7f9c:	89403926 	beq	r17,r5,8084 <__udivdi3+0x518>
    7fa0:	4005883a 	mov	r2,r8
    7fa4:	0009883a 	mov	r4,zero
    7fa8:	003f5106 	br	7cf0 <__udivdi3+0x184>
    7fac:	85a0983a 	sll	r16,r16,r22
    7fb0:	3585c83a 	sub	r2,r6,r22
    7fb4:	a0a2d83a 	srl	r17,r20,r2
    7fb8:	802ad43a 	srli	r21,r16,16
    7fbc:	e084d83a 	srl	r2,fp,r2
    7fc0:	a586983a 	sll	r3,r20,r22
    7fc4:	8809883a 	mov	r4,r17
    7fc8:	a80b883a 	mov	r5,r21
    7fcc:	1886b03a 	or	r3,r3,r2
    7fd0:	d8c00115 	stw	r3,4(sp)
    7fd4:	00008fc0 	call	8fc <__udivsi3>
    7fd8:	8809883a 	mov	r4,r17
    7fdc:	a80b883a 	mov	r5,r21
    7fe0:	d8800415 	stw	r2,16(sp)
    7fe4:	00009040 	call	904 <__umodsi3>
    7fe8:	d9000117 	ldw	r4,4(sp)
    7fec:	d9400417 	ldw	r5,16(sp)
    7ff0:	1004943a 	slli	r2,r2,16
    7ff4:	85ffffcc 	andi	r23,r16,65535
    7ff8:	2006d43a 	srli	r3,r4,16
    7ffc:	b963383a 	mul	r17,r23,r5
    8000:	10c4b03a 	or	r2,r2,r3
    8004:	1440042e 	bgeu	r2,r17,8018 <__udivdi3+0x4ac>
    8008:	297fffc4 	addi	r5,r5,-1
    800c:	1405883a 	add	r2,r2,r16
    8010:	d9400415 	stw	r5,16(sp)
    8014:	1400442e 	bgeu	r2,r16,8128 <__udivdi3+0x5bc>
    8018:	1463c83a 	sub	r17,r2,r17
    801c:	8809883a 	mov	r4,r17
    8020:	a80b883a 	mov	r5,r21
    8024:	00008fc0 	call	8fc <__udivsi3>
    8028:	8809883a 	mov	r4,r17
    802c:	a80b883a 	mov	r5,r21
    8030:	1029883a 	mov	r20,r2
    8034:	00009040 	call	904 <__umodsi3>
    8038:	d9400117 	ldw	r5,4(sp)
    803c:	1004943a 	slli	r2,r2,16
    8040:	bd09383a 	mul	r4,r23,r20
    8044:	28ffffcc 	andi	r3,r5,65535
    8048:	10c6b03a 	or	r3,r2,r3
    804c:	1900062e 	bgeu	r3,r4,8068 <__udivdi3+0x4fc>
    8050:	1c07883a 	add	r3,r3,r16
    8054:	a53fffc4 	addi	r20,r20,-1
    8058:	1c000336 	bltu	r3,r16,8068 <__udivdi3+0x4fc>
    805c:	1900022e 	bgeu	r3,r4,8068 <__udivdi3+0x4fc>
    8060:	a53fffc4 	addi	r20,r20,-1
    8064:	1c07883a 	add	r3,r3,r16
    8068:	d9400417 	ldw	r5,16(sp)
    806c:	e5b8983a 	sll	fp,fp,r22
    8070:	1923c83a 	sub	r17,r3,r4
    8074:	2804943a 	slli	r2,r5,16
    8078:	a0a8b03a 	or	r20,r20,r2
    807c:	dd000315 	stw	r20,12(sp)
    8080:	003ee106 	br	7c08 <__udivdi3+0x9c>
    8084:	2004943a 	slli	r2,r4,16
    8088:	e5c8983a 	sll	r4,fp,r23
    808c:	48ffffcc 	andi	r3,r9,65535
    8090:	10c5883a 	add	r2,r2,r3
    8094:	20bfc22e 	bgeu	r4,r2,7fa0 <__udivdi3+0x434>
    8098:	40bfffc4 	addi	r2,r8,-1
    809c:	0009883a 	mov	r4,zero
    80a0:	003f1306 	br	7cf0 <__udivdi3+0x184>
    80a4:	01400204 	movi	r5,8
    80a8:	2805883a 	mov	r2,r5
    80ac:	003f0306 	br	7cbc <__udivdi3+0x150>
    80b0:	01400604 	movi	r5,24
    80b4:	2805883a 	mov	r2,r5
    80b8:	003f0006 	br	7cbc <__udivdi3+0x150>
    80bc:	01400204 	movi	r5,8
    80c0:	2805883a 	mov	r2,r5
    80c4:	003ec206 	br	7bd0 <__udivdi3+0x64>
    80c8:	01400604 	movi	r5,24
    80cc:	2805883a 	mov	r2,r5
    80d0:	003ebf06 	br	7bd0 <__udivdi3+0x64>
    80d4:	01400204 	movi	r5,8
    80d8:	2805883a 	mov	r2,r5
    80dc:	003f1706 	br	7d3c <__udivdi3+0x1d0>
    80e0:	01400604 	movi	r5,24
    80e4:	2805883a 	mov	r2,r5
    80e8:	003f1406 	br	7d3c <__udivdi3+0x1d0>
    80ec:	89ff962e 	bgeu	r17,r7,7f48 <__udivdi3+0x3dc>
    80f0:	8d63883a 	add	r17,r17,r21
    80f4:	843fffc4 	addi	r16,r16,-1
    80f8:	003f9306 	br	7f48 <__udivdi3+0x3dc>
    80fc:	147f802e 	bgeu	r2,r17,7f00 <__udivdi3+0x394>
    8100:	a53fffc4 	addi	r20,r20,-1
    8104:	1545883a 	add	r2,r2,r21
    8108:	003f7d06 	br	7f00 <__udivdi3+0x394>
    810c:	a53fffc4 	addi	r20,r20,-1
    8110:	003ede06 	br	7c8c <__udivdi3+0x120>
    8114:	b5bfffc4 	addi	r22,r22,-1
    8118:	1405883a 	add	r2,r2,r16
    811c:	003f2806 	br	7dc0 <__udivdi3+0x254>
    8120:	a53fffc4 	addi	r20,r20,-1
    8124:	003f3706 	br	7e04 <__udivdi3+0x298>
    8128:	147fbb2e 	bgeu	r2,r17,8018 <__udivdi3+0x4ac>
    812c:	297fffc4 	addi	r5,r5,-1
    8130:	1405883a 	add	r2,r2,r16
    8134:	d9400415 	stw	r5,16(sp)
    8138:	003fb706 	br	8018 <__udivdi3+0x4ac>
    813c:	b5bfffc4 	addi	r22,r22,-1
    8140:	1405883a 	add	r2,r2,r16
    8144:	003ec006 	br	7c48 <__udivdi3+0xdc>

00008148 <__umoddi3>:
    8148:	defff104 	addi	sp,sp,-60
    814c:	dd800b15 	stw	r22,44(sp)
    8150:	dd000915 	stw	r20,36(sp)
    8154:	dc000515 	stw	r16,20(sp)
    8158:	dfc00e15 	stw	ra,56(sp)
    815c:	df000d15 	stw	fp,52(sp)
    8160:	ddc00c15 	stw	r23,48(sp)
    8164:	dd400a15 	stw	r21,40(sp)
    8168:	dcc00815 	stw	r19,32(sp)
    816c:	dc800715 	stw	r18,28(sp)
    8170:	dc400615 	stw	r17,24(sp)
    8174:	3021883a 	mov	r16,r6
    8178:	202d883a 	mov	r22,r4
    817c:	2829883a 	mov	r20,r5
    8180:	38002b1e 	bne	r7,zero,8230 <__umoddi3+0xe8>
    8184:	29805036 	bltu	r5,r6,82c8 <__umoddi3+0x180>
    8188:	30008a26 	beq	r6,zero,83b4 <__umoddi3+0x26c>
    818c:	00bfffd4 	movui	r2,65535
    8190:	14008236 	bltu	r2,r16,839c <__umoddi3+0x254>
    8194:	00803fc4 	movi	r2,255
    8198:	14013636 	bltu	r2,r16,8674 <__umoddi3+0x52c>
    819c:	000b883a 	mov	r5,zero
    81a0:	0005883a 	mov	r2,zero
    81a4:	8084d83a 	srl	r2,r16,r2
    81a8:	01000074 	movhi	r4,1
    81ac:	2131db04 	addi	r4,r4,-14484
    81b0:	01800804 	movi	r6,32
    81b4:	1105883a 	add	r2,r2,r4
    81b8:	10c00003 	ldbu	r3,0(r2)
    81bc:	28c7883a 	add	r3,r5,r3
    81c0:	30efc83a 	sub	r23,r6,r3
    81c4:	b800941e 	bne	r23,zero,8418 <__umoddi3+0x2d0>
    81c8:	802ad43a 	srli	r21,r16,16
    81cc:	a423c83a 	sub	r17,r20,r16
    81d0:	0039883a 	mov	fp,zero
    81d4:	853fffcc 	andi	r20,r16,65535
    81d8:	8809883a 	mov	r4,r17
    81dc:	a80b883a 	mov	r5,r21
    81e0:	00008fc0 	call	8fc <__udivsi3>
    81e4:	8809883a 	mov	r4,r17
    81e8:	a80b883a 	mov	r5,r21
    81ec:	a0a3383a 	mul	r17,r20,r2
    81f0:	00009040 	call	904 <__umodsi3>
    81f4:	1004943a 	slli	r2,r2,16
    81f8:	b006d43a 	srli	r3,r22,16
    81fc:	10c4b03a 	or	r2,r2,r3
    8200:	1440032e 	bgeu	r2,r17,8210 <__umoddi3+0xc8>
    8204:	1405883a 	add	r2,r2,r16
    8208:	14000136 	bltu	r2,r16,8210 <__umoddi3+0xc8>
    820c:	14413536 	bltu	r2,r17,86e4 <__umoddi3+0x59c>
    8210:	1463c83a 	sub	r17,r2,r17
    8214:	8809883a 	mov	r4,r17
    8218:	a80b883a 	mov	r5,r21
    821c:	00008fc0 	call	8fc <__udivsi3>
    8220:	8809883a 	mov	r4,r17
    8224:	a0a3383a 	mul	r17,r20,r2
    8228:	a80b883a 	mov	r5,r21
    822c:	00004d06 	br	8364 <__umoddi3+0x21c>
    8230:	380d883a 	mov	r6,r7
    8234:	29c0102e 	bgeu	r5,r7,8278 <__umoddi3+0x130>
    8238:	2011883a 	mov	r8,r4
    823c:	2813883a 	mov	r9,r5
    8240:	4005883a 	mov	r2,r8
    8244:	4807883a 	mov	r3,r9
    8248:	dfc00e17 	ldw	ra,56(sp)
    824c:	df000d17 	ldw	fp,52(sp)
    8250:	ddc00c17 	ldw	r23,48(sp)
    8254:	dd800b17 	ldw	r22,44(sp)
    8258:	dd400a17 	ldw	r21,40(sp)
    825c:	dd000917 	ldw	r20,36(sp)
    8260:	dcc00817 	ldw	r19,32(sp)
    8264:	dc800717 	ldw	r18,28(sp)
    8268:	dc400617 	ldw	r17,24(sp)
    826c:	dc000517 	ldw	r16,20(sp)
    8270:	dec00f04 	addi	sp,sp,60
    8274:	f800283a 	ret
    8278:	00bfffd4 	movui	r2,65535
    827c:	11c05a36 	bltu	r2,r7,83e8 <__umoddi3+0x2a0>
    8280:	00803fc4 	movi	r2,255
    8284:	11c0fe36 	bltu	r2,r7,8680 <__umoddi3+0x538>
    8288:	000b883a 	mov	r5,zero
    828c:	0005883a 	mov	r2,zero
    8290:	3084d83a 	srl	r2,r6,r2
    8294:	01000074 	movhi	r4,1
    8298:	2131db04 	addi	r4,r4,-14484
    829c:	01c00804 	movi	r7,32
    82a0:	1105883a 	add	r2,r2,r4
    82a4:	10c00003 	ldbu	r3,0(r2)
    82a8:	28c7883a 	add	r3,r5,r3
    82ac:	38ebc83a 	sub	r21,r7,r3
    82b0:	a800851e 	bne	r21,zero,84c8 <__umoddi3+0x380>
    82b4:	35005236 	bltu	r6,r20,8400 <__umoddi3+0x2b8>
    82b8:	b400512e 	bgeu	r22,r16,8400 <__umoddi3+0x2b8>
    82bc:	b011883a 	mov	r8,r22
    82c0:	a013883a 	mov	r9,r20
    82c4:	003fde06 	br	8240 <__umoddi3+0xf8>
    82c8:	00bfffd4 	movui	r2,65535
    82cc:	11804036 	bltu	r2,r6,83d0 <__umoddi3+0x288>
    82d0:	00803fc4 	movi	r2,255
    82d4:	1180ed36 	bltu	r2,r6,868c <__umoddi3+0x544>
    82d8:	000b883a 	mov	r5,zero
    82dc:	0005883a 	mov	r2,zero
    82e0:	8084d83a 	srl	r2,r16,r2
    82e4:	01000074 	movhi	r4,1
    82e8:	2131db04 	addi	r4,r4,-14484
    82ec:	01800804 	movi	r6,32
    82f0:	1105883a 	add	r2,r2,r4
    82f4:	10c00003 	ldbu	r3,0(r2)
    82f8:	28c7883a 	add	r3,r5,r3
    82fc:	30c7c83a 	sub	r3,r6,r3
    8300:	1800bf1e 	bne	r3,zero,8600 <__umoddi3+0x4b8>
    8304:	0039883a 	mov	fp,zero
    8308:	802ad43a 	srli	r21,r16,16
    830c:	a009883a 	mov	r4,r20
    8310:	85ffffcc 	andi	r23,r16,65535
    8314:	a80b883a 	mov	r5,r21
    8318:	00008fc0 	call	8fc <__udivsi3>
    831c:	a009883a 	mov	r4,r20
    8320:	a80b883a 	mov	r5,r21
    8324:	b8a3383a 	mul	r17,r23,r2
    8328:	00009040 	call	904 <__umodsi3>
    832c:	1004943a 	slli	r2,r2,16
    8330:	b006d43a 	srli	r3,r22,16
    8334:	10c4b03a 	or	r2,r2,r3
    8338:	1440032e 	bgeu	r2,r17,8348 <__umoddi3+0x200>
    833c:	1405883a 	add	r2,r2,r16
    8340:	14000136 	bltu	r2,r16,8348 <__umoddi3+0x200>
    8344:	1440e536 	bltu	r2,r17,86dc <__umoddi3+0x594>
    8348:	1463c83a 	sub	r17,r2,r17
    834c:	8809883a 	mov	r4,r17
    8350:	a80b883a 	mov	r5,r21
    8354:	00008fc0 	call	8fc <__udivsi3>
    8358:	8809883a 	mov	r4,r17
    835c:	b8a3383a 	mul	r17,r23,r2
    8360:	a80b883a 	mov	r5,r21
    8364:	00009040 	call	904 <__umodsi3>
    8368:	1004943a 	slli	r2,r2,16
    836c:	b0ffffcc 	andi	r3,r22,65535
    8370:	10c4b03a 	or	r2,r2,r3
    8374:	1440042e 	bgeu	r2,r17,8388 <__umoddi3+0x240>
    8378:	1405883a 	add	r2,r2,r16
    837c:	14000236 	bltu	r2,r16,8388 <__umoddi3+0x240>
    8380:	1440012e 	bgeu	r2,r17,8388 <__umoddi3+0x240>
    8384:	1405883a 	add	r2,r2,r16
    8388:	1445c83a 	sub	r2,r2,r17
    838c:	1724d83a 	srl	r18,r2,fp
    8390:	0013883a 	mov	r9,zero
    8394:	9011883a 	mov	r8,r18
    8398:	003fa906 	br	8240 <__umoddi3+0xf8>
    839c:	00804034 	movhi	r2,256
    83a0:	10bfffc4 	addi	r2,r2,-1
    83a4:	1400b036 	bltu	r2,r16,8668 <__umoddi3+0x520>
    83a8:	01400404 	movi	r5,16
    83ac:	2805883a 	mov	r2,r5
    83b0:	003f7c06 	br	81a4 <__umoddi3+0x5c>
    83b4:	01000044 	movi	r4,1
    83b8:	000b883a 	mov	r5,zero
    83bc:	00008fc0 	call	8fc <__udivsi3>
    83c0:	1021883a 	mov	r16,r2
    83c4:	00bfffd4 	movui	r2,65535
    83c8:	143ff436 	bltu	r2,r16,839c <__umoddi3+0x254>
    83cc:	003f7106 	br	8194 <__umoddi3+0x4c>
    83d0:	00804034 	movhi	r2,256
    83d4:	10bfffc4 	addi	r2,r2,-1
    83d8:	1180af36 	bltu	r2,r6,8698 <__umoddi3+0x550>
    83dc:	01400404 	movi	r5,16
    83e0:	2805883a 	mov	r2,r5
    83e4:	003fbe06 	br	82e0 <__umoddi3+0x198>
    83e8:	00804034 	movhi	r2,256
    83ec:	10bfffc4 	addi	r2,r2,-1
    83f0:	11c0ac36 	bltu	r2,r7,86a4 <__umoddi3+0x55c>
    83f4:	01400404 	movi	r5,16
    83f8:	2805883a 	mov	r2,r5
    83fc:	003fa406 	br	8290 <__umoddi3+0x148>
    8400:	b409c83a 	sub	r4,r22,r16
    8404:	b105803a 	cmpltu	r2,r22,r4
    8408:	a187c83a 	sub	r3,r20,r6
    840c:	18a9c83a 	sub	r20,r3,r2
    8410:	202d883a 	mov	r22,r4
    8414:	003fa906 	br	82bc <__umoddi3+0x174>
    8418:	85e0983a 	sll	r16,r16,r23
    841c:	35c5c83a 	sub	r2,r6,r23
    8420:	a0a2d83a 	srl	r17,r20,r2
    8424:	802ad43a 	srli	r21,r16,16
    8428:	b084d83a 	srl	r2,r22,r2
    842c:	a5c6983a 	sll	r3,r20,r23
    8430:	8809883a 	mov	r4,r17
    8434:	a80b883a 	mov	r5,r21
    8438:	1886b03a 	or	r3,r3,r2
    843c:	d8c00115 	stw	r3,4(sp)
    8440:	853fffcc 	andi	r20,r16,65535
    8444:	00008fc0 	call	8fc <__udivsi3>
    8448:	8809883a 	mov	r4,r17
    844c:	a80b883a 	mov	r5,r21
    8450:	a0a3383a 	mul	r17,r20,r2
    8454:	00009040 	call	904 <__umodsi3>
    8458:	d9000117 	ldw	r4,4(sp)
    845c:	1004943a 	slli	r2,r2,16
    8460:	b839883a 	mov	fp,r23
    8464:	2006d43a 	srli	r3,r4,16
    8468:	10c4b03a 	or	r2,r2,r3
    846c:	1440022e 	bgeu	r2,r17,8478 <__umoddi3+0x330>
    8470:	1405883a 	add	r2,r2,r16
    8474:	1400962e 	bgeu	r2,r16,86d0 <__umoddi3+0x588>
    8478:	1463c83a 	sub	r17,r2,r17
    847c:	8809883a 	mov	r4,r17
    8480:	a80b883a 	mov	r5,r21
    8484:	00008fc0 	call	8fc <__udivsi3>
    8488:	8809883a 	mov	r4,r17
    848c:	a80b883a 	mov	r5,r21
    8490:	a0a3383a 	mul	r17,r20,r2
    8494:	00009040 	call	904 <__umodsi3>
    8498:	d9400117 	ldw	r5,4(sp)
    849c:	1004943a 	slli	r2,r2,16
    84a0:	28ffffcc 	andi	r3,r5,65535
    84a4:	10c4b03a 	or	r2,r2,r3
    84a8:	1440042e 	bgeu	r2,r17,84bc <__umoddi3+0x374>
    84ac:	1405883a 	add	r2,r2,r16
    84b0:	14000236 	bltu	r2,r16,84bc <__umoddi3+0x374>
    84b4:	1440012e 	bgeu	r2,r17,84bc <__umoddi3+0x374>
    84b8:	1405883a 	add	r2,r2,r16
    84bc:	b5ec983a 	sll	r22,r22,r23
    84c0:	1463c83a 	sub	r17,r2,r17
    84c4:	003f4406 	br	81d8 <__umoddi3+0x90>
    84c8:	3d4fc83a 	sub	r7,r7,r21
    84cc:	3546983a 	sll	r3,r6,r21
    84d0:	81c4d83a 	srl	r2,r16,r7
    84d4:	a1e2d83a 	srl	r17,r20,r7
    84d8:	a54c983a 	sll	r6,r20,r21
    84dc:	18aeb03a 	or	r23,r3,r2
    84e0:	b828d43a 	srli	r20,r23,16
    84e4:	b1c4d83a 	srl	r2,r22,r7
    84e8:	8809883a 	mov	r4,r17
    84ec:	a00b883a 	mov	r5,r20
    84f0:	308cb03a 	or	r6,r6,r2
    84f4:	d9c00315 	stw	r7,12(sp)
    84f8:	d9800215 	stw	r6,8(sp)
    84fc:	00008fc0 	call	8fc <__udivsi3>
    8500:	8809883a 	mov	r4,r17
    8504:	a00b883a 	mov	r5,r20
    8508:	1039883a 	mov	fp,r2
    850c:	00009040 	call	904 <__umodsi3>
    8510:	b8ffffcc 	andi	r3,r23,65535
    8514:	d8c00415 	stw	r3,16(sp)
    8518:	d9000217 	ldw	r4,8(sp)
    851c:	d9400417 	ldw	r5,16(sp)
    8520:	1004943a 	slli	r2,r2,16
    8524:	2006d43a 	srli	r3,r4,16
    8528:	8560983a 	sll	r16,r16,r21
    852c:	2f23383a 	mul	r17,r5,fp
    8530:	10c4b03a 	or	r2,r2,r3
    8534:	dc000015 	stw	r16,0(sp)
    8538:	b56c983a 	sll	r22,r22,r21
    853c:	1440032e 	bgeu	r2,r17,854c <__umoddi3+0x404>
    8540:	15c5883a 	add	r2,r2,r23
    8544:	e73fffc4 	addi	fp,fp,-1
    8548:	15c05d2e 	bgeu	r2,r23,86c0 <__umoddi3+0x578>
    854c:	1463c83a 	sub	r17,r2,r17
    8550:	8809883a 	mov	r4,r17
    8554:	a00b883a 	mov	r5,r20
    8558:	00008fc0 	call	8fc <__udivsi3>
    855c:	8809883a 	mov	r4,r17
    8560:	a00b883a 	mov	r5,r20
    8564:	1021883a 	mov	r16,r2
    8568:	00009040 	call	904 <__umodsi3>
    856c:	d8c00417 	ldw	r3,16(sp)
    8570:	d9000217 	ldw	r4,8(sp)
    8574:	1004943a 	slli	r2,r2,16
    8578:	1c23383a 	mul	r17,r3,r16
    857c:	20ffffcc 	andi	r3,r4,65535
    8580:	10ceb03a 	or	r7,r2,r3
    8584:	3c40032e 	bgeu	r7,r17,8594 <__umoddi3+0x44c>
    8588:	3dcf883a 	add	r7,r7,r23
    858c:	843fffc4 	addi	r16,r16,-1
    8590:	3dc0472e 	bgeu	r7,r23,86b0 <__umoddi3+0x568>
    8594:	e004943a 	slli	r2,fp,16
    8598:	d9400017 	ldw	r5,0(sp)
    859c:	3c4fc83a 	sub	r7,r7,r17
    85a0:	8084b03a 	or	r2,r16,r2
    85a4:	28ffffcc 	andi	r3,r5,65535
    85a8:	280cd43a 	srli	r6,r5,16
    85ac:	100ad43a 	srli	r5,r2,16
    85b0:	10bfffcc 	andi	r2,r2,65535
    85b4:	10d1383a 	mul	r8,r2,r3
    85b8:	28c7383a 	mul	r3,r5,r3
    85bc:	1185383a 	mul	r2,r2,r6
    85c0:	4008d43a 	srli	r4,r8,16
    85c4:	298b383a 	mul	r5,r5,r6
    85c8:	10c5883a 	add	r2,r2,r3
    85cc:	2089883a 	add	r4,r4,r2
    85d0:	20c0022e 	bgeu	r4,r3,85dc <__umoddi3+0x494>
    85d4:	00800074 	movhi	r2,1
    85d8:	288b883a 	add	r5,r5,r2
    85dc:	2004d43a 	srli	r2,r4,16
    85e0:	2008943a 	slli	r4,r4,16
    85e4:	40ffffcc 	andi	r3,r8,65535
    85e8:	288b883a 	add	r5,r5,r2
    85ec:	20c9883a 	add	r4,r4,r3
    85f0:	39400b36 	bltu	r7,r5,8620 <__umoddi3+0x4d8>
    85f4:	39403d26 	beq	r7,r5,86ec <__umoddi3+0x5a4>
    85f8:	394bc83a 	sub	r5,r7,r5
    85fc:	00000f06 	br	863c <__umoddi3+0x4f4>
    8600:	30c5c83a 	sub	r2,r6,r3
    8604:	1839883a 	mov	fp,r3
    8608:	b084d83a 	srl	r2,r22,r2
    860c:	a0c6983a 	sll	r3,r20,r3
    8610:	8720983a 	sll	r16,r16,fp
    8614:	b72c983a 	sll	r22,r22,fp
    8618:	18a8b03a 	or	r20,r3,r2
    861c:	003f3a06 	br	8308 <__umoddi3+0x1c0>
    8620:	d8c00017 	ldw	r3,0(sp)
    8624:	20c5c83a 	sub	r2,r4,r3
    8628:	2089803a 	cmpltu	r4,r4,r2
    862c:	2dc7c83a 	sub	r3,r5,r23
    8630:	1907c83a 	sub	r3,r3,r4
    8634:	38cbc83a 	sub	r5,r7,r3
    8638:	1009883a 	mov	r4,r2
    863c:	b105c83a 	sub	r2,r22,r4
    8640:	b087803a 	cmpltu	r3,r22,r2
    8644:	28c7c83a 	sub	r3,r5,r3
    8648:	d9400317 	ldw	r5,12(sp)
    864c:	1544d83a 	srl	r2,r2,r21
    8650:	1948983a 	sll	r4,r3,r5
    8654:	1d46d83a 	srl	r3,r3,r21
    8658:	20a4b03a 	or	r18,r4,r2
    865c:	9011883a 	mov	r8,r18
    8660:	1813883a 	mov	r9,r3
    8664:	003ef606 	br	8240 <__umoddi3+0xf8>
    8668:	01400604 	movi	r5,24
    866c:	2805883a 	mov	r2,r5
    8670:	003ecc06 	br	81a4 <__umoddi3+0x5c>
    8674:	01400204 	movi	r5,8
    8678:	2805883a 	mov	r2,r5
    867c:	003ec906 	br	81a4 <__umoddi3+0x5c>
    8680:	01400204 	movi	r5,8
    8684:	2805883a 	mov	r2,r5
    8688:	003f0106 	br	8290 <__umoddi3+0x148>
    868c:	01400204 	movi	r5,8
    8690:	2805883a 	mov	r2,r5
    8694:	003f1206 	br	82e0 <__umoddi3+0x198>
    8698:	01400604 	movi	r5,24
    869c:	2805883a 	mov	r2,r5
    86a0:	003f0f06 	br	82e0 <__umoddi3+0x198>
    86a4:	01400604 	movi	r5,24
    86a8:	2805883a 	mov	r2,r5
    86ac:	003ef806 	br	8290 <__umoddi3+0x148>
    86b0:	3c7fb82e 	bgeu	r7,r17,8594 <__umoddi3+0x44c>
    86b4:	843fffc4 	addi	r16,r16,-1
    86b8:	3dcf883a 	add	r7,r7,r23
    86bc:	003fb506 	br	8594 <__umoddi3+0x44c>
    86c0:	147fa22e 	bgeu	r2,r17,854c <__umoddi3+0x404>
    86c4:	e73fffc4 	addi	fp,fp,-1
    86c8:	15c5883a 	add	r2,r2,r23
    86cc:	003f9f06 	br	854c <__umoddi3+0x404>
    86d0:	147f692e 	bgeu	r2,r17,8478 <__umoddi3+0x330>
    86d4:	1405883a 	add	r2,r2,r16
    86d8:	003f6706 	br	8478 <__umoddi3+0x330>
    86dc:	1405883a 	add	r2,r2,r16
    86e0:	003f1906 	br	8348 <__umoddi3+0x200>
    86e4:	1405883a 	add	r2,r2,r16
    86e8:	003ec906 	br	8210 <__umoddi3+0xc8>
    86ec:	b13fcc36 	bltu	r22,r4,8620 <__umoddi3+0x4d8>
    86f0:	000b883a 	mov	r5,zero
    86f4:	003fd106 	br	863c <__umoddi3+0x4f4>

000086f8 <_fpadd_parts>:
    86f8:	defff804 	addi	sp,sp,-32
    86fc:	dcc00315 	stw	r19,12(sp)
    8700:	2027883a 	mov	r19,r4
    8704:	21000017 	ldw	r4,0(r4)
    8708:	00c00044 	movi	r3,1
    870c:	dd400515 	stw	r21,20(sp)
    8710:	dd000415 	stw	r20,16(sp)
    8714:	ddc00715 	stw	r23,28(sp)
    8718:	dd800615 	stw	r22,24(sp)
    871c:	dc800215 	stw	r18,8(sp)
    8720:	dc400115 	stw	r17,4(sp)
    8724:	dc000015 	stw	r16,0(sp)
    8728:	282b883a 	mov	r21,r5
    872c:	3029883a 	mov	r20,r6
    8730:	1900632e 	bgeu	r3,r4,88c0 <_fpadd_parts+0x1c8>
    8734:	28800017 	ldw	r2,0(r5)
    8738:	1880812e 	bgeu	r3,r2,8940 <_fpadd_parts+0x248>
    873c:	00c00104 	movi	r3,4
    8740:	20c0dc26 	beq	r4,r3,8ab4 <_fpadd_parts+0x3bc>
    8744:	10c07e26 	beq	r2,r3,8940 <_fpadd_parts+0x248>
    8748:	00c00084 	movi	r3,2
    874c:	10c06726 	beq	r2,r3,88ec <_fpadd_parts+0x1f4>
    8750:	20c07b26 	beq	r4,r3,8940 <_fpadd_parts+0x248>
    8754:	9dc00217 	ldw	r23,8(r19)
    8758:	28c00217 	ldw	r3,8(r5)
    875c:	9c400317 	ldw	r17,12(r19)
    8760:	2bc00317 	ldw	r15,12(r5)
    8764:	b8cdc83a 	sub	r6,r23,r3
    8768:	9c800417 	ldw	r18,16(r19)
    876c:	2c000417 	ldw	r16,16(r5)
    8770:	3009883a 	mov	r4,r6
    8774:	30009716 	blt	r6,zero,89d4 <_fpadd_parts+0x2dc>
    8778:	00800fc4 	movi	r2,63
    877c:	11806b16 	blt	r2,r6,892c <_fpadd_parts+0x234>
    8780:	0100a40e 	bge	zero,r4,8a14 <_fpadd_parts+0x31c>
    8784:	35bff804 	addi	r22,r6,-32
    8788:	b000bc16 	blt	r22,zero,8a7c <_fpadd_parts+0x384>
    878c:	8596d83a 	srl	r11,r16,r22
    8790:	0019883a 	mov	r12,zero
    8794:	0013883a 	mov	r9,zero
    8798:	01000044 	movi	r4,1
    879c:	0015883a 	mov	r10,zero
    87a0:	b000be16 	blt	r22,zero,8a9c <_fpadd_parts+0x3a4>
    87a4:	2590983a 	sll	r8,r4,r22
    87a8:	000f883a 	mov	r7,zero
    87ac:	00bfffc4 	movi	r2,-1
    87b0:	3889883a 	add	r4,r7,r2
    87b4:	408b883a 	add	r5,r8,r2
    87b8:	21cd803a 	cmpltu	r6,r4,r7
    87bc:	314b883a 	add	r5,r6,r5
    87c0:	7904703a 	and	r2,r15,r4
    87c4:	8146703a 	and	r3,r16,r5
    87c8:	10c4b03a 	or	r2,r2,r3
    87cc:	10000226 	beq	r2,zero,87d8 <_fpadd_parts+0xe0>
    87d0:	02400044 	movi	r9,1
    87d4:	0015883a 	mov	r10,zero
    87d8:	5a5eb03a 	or	r15,r11,r9
    87dc:	62a0b03a 	or	r16,r12,r10
    87e0:	99400117 	ldw	r5,4(r19)
    87e4:	a8800117 	ldw	r2,4(r21)
    87e8:	28806e26 	beq	r5,r2,89a4 <_fpadd_parts+0x2ac>
    87ec:	28006626 	beq	r5,zero,8988 <_fpadd_parts+0x290>
    87f0:	7c45c83a 	sub	r2,r15,r17
    87f4:	7889803a 	cmpltu	r4,r15,r2
    87f8:	8487c83a 	sub	r3,r16,r18
    87fc:	1909c83a 	sub	r4,r3,r4
    8800:	100d883a 	mov	r6,r2
    8804:	200f883a 	mov	r7,r4
    8808:	38007716 	blt	r7,zero,89e8 <_fpadd_parts+0x2f0>
    880c:	a5c00215 	stw	r23,8(r20)
    8810:	a1c00415 	stw	r7,16(r20)
    8814:	a0000115 	stw	zero,4(r20)
    8818:	a1800315 	stw	r6,12(r20)
    881c:	a2000317 	ldw	r8,12(r20)
    8820:	a2400417 	ldw	r9,16(r20)
    8824:	00bfffc4 	movi	r2,-1
    8828:	408b883a 	add	r5,r8,r2
    882c:	2a09803a 	cmpltu	r4,r5,r8
    8830:	488d883a 	add	r6,r9,r2
    8834:	01c40034 	movhi	r7,4096
    8838:	39ffffc4 	addi	r7,r7,-1
    883c:	218d883a 	add	r6,r4,r6
    8840:	39801736 	bltu	r7,r6,88a0 <_fpadd_parts+0x1a8>
    8844:	31c06526 	beq	r6,r7,89dc <_fpadd_parts+0x2e4>
    8848:	a3000217 	ldw	r12,8(r20)
    884c:	4209883a 	add	r4,r8,r8
    8850:	00bfffc4 	movi	r2,-1
    8854:	220f803a 	cmpltu	r7,r4,r8
    8858:	4a4b883a 	add	r5,r9,r9
    885c:	394f883a 	add	r7,r7,r5
    8860:	2095883a 	add	r10,r4,r2
    8864:	3897883a 	add	r11,r7,r2
    8868:	510d803a 	cmpltu	r6,r10,r4
    886c:	6099883a 	add	r12,r12,r2
    8870:	32d7883a 	add	r11,r6,r11
    8874:	00840034 	movhi	r2,4096
    8878:	10bfffc4 	addi	r2,r2,-1
    887c:	2011883a 	mov	r8,r4
    8880:	3813883a 	mov	r9,r7
    8884:	a1000315 	stw	r4,12(r20)
    8888:	a1c00415 	stw	r7,16(r20)
    888c:	a3000215 	stw	r12,8(r20)
    8890:	12c00336 	bltu	r2,r11,88a0 <_fpadd_parts+0x1a8>
    8894:	58bfed1e 	bne	r11,r2,884c <_fpadd_parts+0x154>
    8898:	00bfff84 	movi	r2,-2
    889c:	12bfeb2e 	bgeu	r2,r10,884c <_fpadd_parts+0x154>
    88a0:	a2800417 	ldw	r10,16(r20)
    88a4:	008000c4 	movi	r2,3
    88a8:	00c80034 	movhi	r3,8192
    88ac:	18ffffc4 	addi	r3,r3,-1
    88b0:	a2400317 	ldw	r9,12(r20)
    88b4:	a0800015 	stw	r2,0(r20)
    88b8:	1a802336 	bltu	r3,r10,8948 <_fpadd_parts+0x250>
    88bc:	a027883a 	mov	r19,r20
    88c0:	9805883a 	mov	r2,r19
    88c4:	ddc00717 	ldw	r23,28(sp)
    88c8:	dd800617 	ldw	r22,24(sp)
    88cc:	dd400517 	ldw	r21,20(sp)
    88d0:	dd000417 	ldw	r20,16(sp)
    88d4:	dcc00317 	ldw	r19,12(sp)
    88d8:	dc800217 	ldw	r18,8(sp)
    88dc:	dc400117 	ldw	r17,4(sp)
    88e0:	dc000017 	ldw	r16,0(sp)
    88e4:	dec00804 	addi	sp,sp,32
    88e8:	f800283a 	ret
    88ec:	20fff41e 	bne	r4,r3,88c0 <_fpadd_parts+0x1c8>
    88f0:	31000015 	stw	r4,0(r6)
    88f4:	98800117 	ldw	r2,4(r19)
    88f8:	30800115 	stw	r2,4(r6)
    88fc:	98c00217 	ldw	r3,8(r19)
    8900:	30c00215 	stw	r3,8(r6)
    8904:	98800317 	ldw	r2,12(r19)
    8908:	30800315 	stw	r2,12(r6)
    890c:	98c00417 	ldw	r3,16(r19)
    8910:	30c00415 	stw	r3,16(r6)
    8914:	98800117 	ldw	r2,4(r19)
    8918:	28c00117 	ldw	r3,4(r5)
    891c:	3027883a 	mov	r19,r6
    8920:	10c4703a 	and	r2,r2,r3
    8924:	30800115 	stw	r2,4(r6)
    8928:	003fe506 	br	88c0 <_fpadd_parts+0x1c8>
    892c:	1dc02616 	blt	r3,r23,89c8 <_fpadd_parts+0x2d0>
    8930:	0023883a 	mov	r17,zero
    8934:	182f883a 	mov	r23,r3
    8938:	0025883a 	mov	r18,zero
    893c:	003fa806 	br	87e0 <_fpadd_parts+0xe8>
    8940:	a827883a 	mov	r19,r21
    8944:	003fde06 	br	88c0 <_fpadd_parts+0x1c8>
    8948:	01800044 	movi	r6,1
    894c:	500497fa 	slli	r2,r10,31
    8950:	4808d07a 	srli	r4,r9,1
    8954:	518ad83a 	srl	r5,r10,r6
    8958:	a2000217 	ldw	r8,8(r20)
    895c:	1108b03a 	or	r4,r2,r4
    8960:	0007883a 	mov	r3,zero
    8964:	4984703a 	and	r2,r9,r6
    8968:	208cb03a 	or	r6,r4,r2
    896c:	28ceb03a 	or	r7,r5,r3
    8970:	42000044 	addi	r8,r8,1
    8974:	a027883a 	mov	r19,r20
    8978:	a1c00415 	stw	r7,16(r20)
    897c:	a2000215 	stw	r8,8(r20)
    8980:	a1800315 	stw	r6,12(r20)
    8984:	003fce06 	br	88c0 <_fpadd_parts+0x1c8>
    8988:	8bc5c83a 	sub	r2,r17,r15
    898c:	8889803a 	cmpltu	r4,r17,r2
    8990:	9407c83a 	sub	r3,r18,r16
    8994:	1909c83a 	sub	r4,r3,r4
    8998:	100d883a 	mov	r6,r2
    899c:	200f883a 	mov	r7,r4
    89a0:	003f9906 	br	8808 <_fpadd_parts+0x110>
    89a4:	7c45883a 	add	r2,r15,r17
    89a8:	13c9803a 	cmpltu	r4,r2,r15
    89ac:	8487883a 	add	r3,r16,r18
    89b0:	20c9883a 	add	r4,r4,r3
    89b4:	a1400115 	stw	r5,4(r20)
    89b8:	a5c00215 	stw	r23,8(r20)
    89bc:	a0800315 	stw	r2,12(r20)
    89c0:	a1000415 	stw	r4,16(r20)
    89c4:	003fb606 	br	88a0 <_fpadd_parts+0x1a8>
    89c8:	001f883a 	mov	r15,zero
    89cc:	0021883a 	mov	r16,zero
    89d0:	003f8306 	br	87e0 <_fpadd_parts+0xe8>
    89d4:	018dc83a 	sub	r6,zero,r6
    89d8:	003f6706 	br	8778 <_fpadd_parts+0x80>
    89dc:	00bfff84 	movi	r2,-2
    89e0:	117faf36 	bltu	r2,r5,88a0 <_fpadd_parts+0x1a8>
    89e4:	003f9806 	br	8848 <_fpadd_parts+0x150>
    89e8:	0005883a 	mov	r2,zero
    89ec:	1189c83a 	sub	r4,r2,r6
    89f0:	1105803a 	cmpltu	r2,r2,r4
    89f4:	01cbc83a 	sub	r5,zero,r7
    89f8:	2885c83a 	sub	r2,r5,r2
    89fc:	01800044 	movi	r6,1
    8a00:	a1800115 	stw	r6,4(r20)
    8a04:	a5c00215 	stw	r23,8(r20)
    8a08:	a1000315 	stw	r4,12(r20)
    8a0c:	a0800415 	stw	r2,16(r20)
    8a10:	003f8206 	br	881c <_fpadd_parts+0x124>
    8a14:	203f7226 	beq	r4,zero,87e0 <_fpadd_parts+0xe8>
    8a18:	35bff804 	addi	r22,r6,-32
    8a1c:	b9af883a 	add	r23,r23,r6
    8a20:	b0003116 	blt	r22,zero,8ae8 <_fpadd_parts+0x3f0>
    8a24:	959ad83a 	srl	r13,r18,r22
    8a28:	001d883a 	mov	r14,zero
    8a2c:	000f883a 	mov	r7,zero
    8a30:	01000044 	movi	r4,1
    8a34:	0011883a 	mov	r8,zero
    8a38:	b0002516 	blt	r22,zero,8ad0 <_fpadd_parts+0x3d8>
    8a3c:	2594983a 	sll	r10,r4,r22
    8a40:	0013883a 	mov	r9,zero
    8a44:	00bfffc4 	movi	r2,-1
    8a48:	4889883a 	add	r4,r9,r2
    8a4c:	508b883a 	add	r5,r10,r2
    8a50:	224d803a 	cmpltu	r6,r4,r9
    8a54:	314b883a 	add	r5,r6,r5
    8a58:	8904703a 	and	r2,r17,r4
    8a5c:	9146703a 	and	r3,r18,r5
    8a60:	10c4b03a 	or	r2,r2,r3
    8a64:	10000226 	beq	r2,zero,8a70 <_fpadd_parts+0x378>
    8a68:	01c00044 	movi	r7,1
    8a6c:	0011883a 	mov	r8,zero
    8a70:	69e2b03a 	or	r17,r13,r7
    8a74:	7224b03a 	or	r18,r14,r8
    8a78:	003f5906 	br	87e0 <_fpadd_parts+0xe8>
    8a7c:	8407883a 	add	r3,r16,r16
    8a80:	008007c4 	movi	r2,31
    8a84:	1185c83a 	sub	r2,r2,r6
    8a88:	1886983a 	sll	r3,r3,r2
    8a8c:	7996d83a 	srl	r11,r15,r6
    8a90:	8198d83a 	srl	r12,r16,r6
    8a94:	1ad6b03a 	or	r11,r3,r11
    8a98:	003f3e06 	br	8794 <_fpadd_parts+0x9c>
    8a9c:	2006d07a 	srli	r3,r4,1
    8aa0:	008007c4 	movi	r2,31
    8aa4:	1185c83a 	sub	r2,r2,r6
    8aa8:	1890d83a 	srl	r8,r3,r2
    8aac:	218e983a 	sll	r7,r4,r6
    8ab0:	003f3e06 	br	87ac <_fpadd_parts+0xb4>
    8ab4:	113f821e 	bne	r2,r4,88c0 <_fpadd_parts+0x1c8>
    8ab8:	28c00117 	ldw	r3,4(r5)
    8abc:	98800117 	ldw	r2,4(r19)
    8ac0:	10ff7f26 	beq	r2,r3,88c0 <_fpadd_parts+0x1c8>
    8ac4:	04c00074 	movhi	r19,1
    8ac8:	9cf1d604 	addi	r19,r19,-14504
    8acc:	003f7c06 	br	88c0 <_fpadd_parts+0x1c8>
    8ad0:	2006d07a 	srli	r3,r4,1
    8ad4:	008007c4 	movi	r2,31
    8ad8:	1185c83a 	sub	r2,r2,r6
    8adc:	1894d83a 	srl	r10,r3,r2
    8ae0:	2192983a 	sll	r9,r4,r6
    8ae4:	003fd706 	br	8a44 <_fpadd_parts+0x34c>
    8ae8:	9487883a 	add	r3,r18,r18
    8aec:	008007c4 	movi	r2,31
    8af0:	1185c83a 	sub	r2,r2,r6
    8af4:	1886983a 	sll	r3,r3,r2
    8af8:	899ad83a 	srl	r13,r17,r6
    8afc:	919cd83a 	srl	r14,r18,r6
    8b00:	1b5ab03a 	or	r13,r3,r13
    8b04:	003fc906 	br	8a2c <_fpadd_parts+0x334>

00008b08 <__subdf3>:
    8b08:	deffea04 	addi	sp,sp,-88
    8b0c:	dcc01415 	stw	r19,80(sp)
    8b10:	dcc00404 	addi	r19,sp,16
    8b14:	2011883a 	mov	r8,r4
    8b18:	2813883a 	mov	r9,r5
    8b1c:	dc401315 	stw	r17,76(sp)
    8b20:	d809883a 	mov	r4,sp
    8b24:	980b883a 	mov	r5,r19
    8b28:	dc400904 	addi	r17,sp,36
    8b2c:	dfc01515 	stw	ra,84(sp)
    8b30:	da400115 	stw	r9,4(sp)
    8b34:	d9c00315 	stw	r7,12(sp)
    8b38:	da000015 	stw	r8,0(sp)
    8b3c:	d9800215 	stw	r6,8(sp)
    8b40:	0009c500 	call	9c50 <__unpack_d>
    8b44:	d9000204 	addi	r4,sp,8
    8b48:	880b883a 	mov	r5,r17
    8b4c:	0009c500 	call	9c50 <__unpack_d>
    8b50:	d8800a17 	ldw	r2,40(sp)
    8b54:	880b883a 	mov	r5,r17
    8b58:	9809883a 	mov	r4,r19
    8b5c:	d9800e04 	addi	r6,sp,56
    8b60:	1080005c 	xori	r2,r2,1
    8b64:	d8800a15 	stw	r2,40(sp)
    8b68:	00086f80 	call	86f8 <_fpadd_parts>
    8b6c:	1009883a 	mov	r4,r2
    8b70:	000993c0 	call	993c <__pack_d>
    8b74:	dfc01517 	ldw	ra,84(sp)
    8b78:	dcc01417 	ldw	r19,80(sp)
    8b7c:	dc401317 	ldw	r17,76(sp)
    8b80:	dec01604 	addi	sp,sp,88
    8b84:	f800283a 	ret

00008b88 <__adddf3>:
    8b88:	deffea04 	addi	sp,sp,-88
    8b8c:	dcc01415 	stw	r19,80(sp)
    8b90:	dcc00404 	addi	r19,sp,16
    8b94:	2011883a 	mov	r8,r4
    8b98:	2813883a 	mov	r9,r5
    8b9c:	dc401315 	stw	r17,76(sp)
    8ba0:	d809883a 	mov	r4,sp
    8ba4:	980b883a 	mov	r5,r19
    8ba8:	dc400904 	addi	r17,sp,36
    8bac:	dfc01515 	stw	ra,84(sp)
    8bb0:	da400115 	stw	r9,4(sp)
    8bb4:	d9c00315 	stw	r7,12(sp)
    8bb8:	da000015 	stw	r8,0(sp)
    8bbc:	d9800215 	stw	r6,8(sp)
    8bc0:	0009c500 	call	9c50 <__unpack_d>
    8bc4:	d9000204 	addi	r4,sp,8
    8bc8:	880b883a 	mov	r5,r17
    8bcc:	0009c500 	call	9c50 <__unpack_d>
    8bd0:	d9800e04 	addi	r6,sp,56
    8bd4:	9809883a 	mov	r4,r19
    8bd8:	880b883a 	mov	r5,r17
    8bdc:	00086f80 	call	86f8 <_fpadd_parts>
    8be0:	1009883a 	mov	r4,r2
    8be4:	000993c0 	call	993c <__pack_d>
    8be8:	dfc01517 	ldw	ra,84(sp)
    8bec:	dcc01417 	ldw	r19,80(sp)
    8bf0:	dc401317 	ldw	r17,76(sp)
    8bf4:	dec01604 	addi	sp,sp,88
    8bf8:	f800283a 	ret

00008bfc <__muldf3>:
    8bfc:	deffe004 	addi	sp,sp,-128
    8c00:	dc401815 	stw	r17,96(sp)
    8c04:	dc400404 	addi	r17,sp,16
    8c08:	2011883a 	mov	r8,r4
    8c0c:	2813883a 	mov	r9,r5
    8c10:	dc001715 	stw	r16,92(sp)
    8c14:	d809883a 	mov	r4,sp
    8c18:	880b883a 	mov	r5,r17
    8c1c:	dc000904 	addi	r16,sp,36
    8c20:	dfc01f15 	stw	ra,124(sp)
    8c24:	da400115 	stw	r9,4(sp)
    8c28:	d9c00315 	stw	r7,12(sp)
    8c2c:	da000015 	stw	r8,0(sp)
    8c30:	d9800215 	stw	r6,8(sp)
    8c34:	ddc01e15 	stw	r23,120(sp)
    8c38:	dd801d15 	stw	r22,116(sp)
    8c3c:	dd401c15 	stw	r21,112(sp)
    8c40:	dd001b15 	stw	r20,108(sp)
    8c44:	dcc01a15 	stw	r19,104(sp)
    8c48:	dc801915 	stw	r18,100(sp)
    8c4c:	0009c500 	call	9c50 <__unpack_d>
    8c50:	d9000204 	addi	r4,sp,8
    8c54:	800b883a 	mov	r5,r16
    8c58:	0009c500 	call	9c50 <__unpack_d>
    8c5c:	d9000417 	ldw	r4,16(sp)
    8c60:	00800044 	movi	r2,1
    8c64:	1100102e 	bgeu	r2,r4,8ca8 <__muldf3+0xac>
    8c68:	d8c00917 	ldw	r3,36(sp)
    8c6c:	10c0062e 	bgeu	r2,r3,8c88 <__muldf3+0x8c>
    8c70:	00800104 	movi	r2,4
    8c74:	20800a26 	beq	r4,r2,8ca0 <__muldf3+0xa4>
    8c78:	1880cc26 	beq	r3,r2,8fac <__muldf3+0x3b0>
    8c7c:	00800084 	movi	r2,2
    8c80:	20800926 	beq	r4,r2,8ca8 <__muldf3+0xac>
    8c84:	1880191e 	bne	r3,r2,8cec <__muldf3+0xf0>
    8c88:	d8c00a17 	ldw	r3,40(sp)
    8c8c:	d8800517 	ldw	r2,20(sp)
    8c90:	8009883a 	mov	r4,r16
    8c94:	10c4c03a 	cmpne	r2,r2,r3
    8c98:	d8800a15 	stw	r2,40(sp)
    8c9c:	00000706 	br	8cbc <__muldf3+0xc0>
    8ca0:	00800084 	movi	r2,2
    8ca4:	1880c326 	beq	r3,r2,8fb4 <__muldf3+0x3b8>
    8ca8:	d8800517 	ldw	r2,20(sp)
    8cac:	d8c00a17 	ldw	r3,40(sp)
    8cb0:	8809883a 	mov	r4,r17
    8cb4:	10c4c03a 	cmpne	r2,r2,r3
    8cb8:	d8800515 	stw	r2,20(sp)
    8cbc:	000993c0 	call	993c <__pack_d>
    8cc0:	dfc01f17 	ldw	ra,124(sp)
    8cc4:	ddc01e17 	ldw	r23,120(sp)
    8cc8:	dd801d17 	ldw	r22,116(sp)
    8ccc:	dd401c17 	ldw	r21,112(sp)
    8cd0:	dd001b17 	ldw	r20,108(sp)
    8cd4:	dcc01a17 	ldw	r19,104(sp)
    8cd8:	dc801917 	ldw	r18,100(sp)
    8cdc:	dc401817 	ldw	r17,96(sp)
    8ce0:	dc001717 	ldw	r16,92(sp)
    8ce4:	dec02004 	addi	sp,sp,128
    8ce8:	f800283a 	ret
    8cec:	dd800717 	ldw	r22,28(sp)
    8cf0:	dc800c17 	ldw	r18,48(sp)
    8cf4:	002b883a 	mov	r21,zero
    8cf8:	0023883a 	mov	r17,zero
    8cfc:	a80b883a 	mov	r5,r21
    8d00:	b00d883a 	mov	r6,r22
    8d04:	880f883a 	mov	r7,r17
    8d08:	ddc00817 	ldw	r23,32(sp)
    8d0c:	dcc00d17 	ldw	r19,52(sp)
    8d10:	9009883a 	mov	r4,r18
    8d14:	00098240 	call	9824 <__muldi3>
    8d18:	001b883a 	mov	r13,zero
    8d1c:	680f883a 	mov	r7,r13
    8d20:	b009883a 	mov	r4,r22
    8d24:	000b883a 	mov	r5,zero
    8d28:	980d883a 	mov	r6,r19
    8d2c:	b82d883a 	mov	r22,r23
    8d30:	002f883a 	mov	r23,zero
    8d34:	db401615 	stw	r13,88(sp)
    8d38:	d8801315 	stw	r2,76(sp)
    8d3c:	d8c01415 	stw	r3,80(sp)
    8d40:	dcc01515 	stw	r19,84(sp)
    8d44:	00098240 	call	9824 <__muldi3>
    8d48:	b00d883a 	mov	r6,r22
    8d4c:	000b883a 	mov	r5,zero
    8d50:	9009883a 	mov	r4,r18
    8d54:	b80f883a 	mov	r7,r23
    8d58:	1021883a 	mov	r16,r2
    8d5c:	1823883a 	mov	r17,r3
    8d60:	00098240 	call	9824 <__muldi3>
    8d64:	8085883a 	add	r2,r16,r2
    8d68:	140d803a 	cmpltu	r6,r2,r16
    8d6c:	88c7883a 	add	r3,r17,r3
    8d70:	30cd883a 	add	r6,r6,r3
    8d74:	1029883a 	mov	r20,r2
    8d78:	302b883a 	mov	r21,r6
    8d7c:	da801317 	ldw	r10,76(sp)
    8d80:	dac01417 	ldw	r11,80(sp)
    8d84:	db001517 	ldw	r12,84(sp)
    8d88:	db401617 	ldw	r13,88(sp)
    8d8c:	3440612e 	bgeu	r6,r17,8f14 <__muldf3+0x318>
    8d90:	0009883a 	mov	r4,zero
    8d94:	5105883a 	add	r2,r10,r4
    8d98:	128d803a 	cmpltu	r6,r2,r10
    8d9c:	5d07883a 	add	r3,r11,r20
    8da0:	30cd883a 	add	r6,r6,r3
    8da4:	0021883a 	mov	r16,zero
    8da8:	04400044 	movi	r17,1
    8dac:	1025883a 	mov	r18,r2
    8db0:	3027883a 	mov	r19,r6
    8db4:	32c06236 	bltu	r6,r11,8f40 <__muldf3+0x344>
    8db8:	59807a26 	beq	r11,r6,8fa4 <__muldf3+0x3a8>
    8dbc:	680b883a 	mov	r5,r13
    8dc0:	b80f883a 	mov	r7,r23
    8dc4:	6009883a 	mov	r4,r12
    8dc8:	b00d883a 	mov	r6,r22
    8dcc:	00098240 	call	9824 <__muldi3>
    8dd0:	1009883a 	mov	r4,r2
    8dd4:	000f883a 	mov	r7,zero
    8dd8:	1545883a 	add	r2,r2,r21
    8ddc:	1111803a 	cmpltu	r8,r2,r4
    8de0:	19c7883a 	add	r3,r3,r7
    8de4:	40c7883a 	add	r3,r8,r3
    8de8:	88cb883a 	add	r5,r17,r3
    8dec:	d8c00617 	ldw	r3,24(sp)
    8df0:	8089883a 	add	r4,r16,r2
    8df4:	d8800b17 	ldw	r2,44(sp)
    8df8:	18c00104 	addi	r3,r3,4
    8dfc:	240d803a 	cmpltu	r6,r4,r16
    8e00:	10c7883a 	add	r3,r2,r3
    8e04:	2013883a 	mov	r9,r4
    8e08:	d8800a17 	ldw	r2,40(sp)
    8e0c:	d9000517 	ldw	r4,20(sp)
    8e10:	314d883a 	add	r6,r6,r5
    8e14:	3015883a 	mov	r10,r6
    8e18:	2088c03a 	cmpne	r4,r4,r2
    8e1c:	00880034 	movhi	r2,8192
    8e20:	10bfffc4 	addi	r2,r2,-1
    8e24:	d9000f15 	stw	r4,60(sp)
    8e28:	d8c01015 	stw	r3,64(sp)
    8e2c:	1180162e 	bgeu	r2,r6,8e88 <__muldf3+0x28c>
    8e30:	1811883a 	mov	r8,r3
    8e34:	101f883a 	mov	r15,r2
    8e38:	980497fa 	slli	r2,r19,31
    8e3c:	9016d07a 	srli	r11,r18,1
    8e40:	500697fa 	slli	r3,r10,31
    8e44:	480cd07a 	srli	r6,r9,1
    8e48:	500ed07a 	srli	r7,r10,1
    8e4c:	12d6b03a 	or	r11,r2,r11
    8e50:	00800044 	movi	r2,1
    8e54:	198cb03a 	or	r6,r3,r6
    8e58:	4888703a 	and	r4,r9,r2
    8e5c:	9818d07a 	srli	r12,r19,1
    8e60:	001b883a 	mov	r13,zero
    8e64:	03a00034 	movhi	r14,32768
    8e68:	3013883a 	mov	r9,r6
    8e6c:	3815883a 	mov	r10,r7
    8e70:	4091883a 	add	r8,r8,r2
    8e74:	20000226 	beq	r4,zero,8e80 <__muldf3+0x284>
    8e78:	5b64b03a 	or	r18,r11,r13
    8e7c:	63a6b03a 	or	r19,r12,r14
    8e80:	7abfed36 	bltu	r15,r10,8e38 <__muldf3+0x23c>
    8e84:	da001015 	stw	r8,64(sp)
    8e88:	00840034 	movhi	r2,4096
    8e8c:	10bfffc4 	addi	r2,r2,-1
    8e90:	12801436 	bltu	r2,r10,8ee4 <__muldf3+0x2e8>
    8e94:	da001017 	ldw	r8,64(sp)
    8e98:	101f883a 	mov	r15,r2
    8e9c:	4a45883a 	add	r2,r9,r9
    8ea0:	124d803a 	cmpltu	r6,r2,r9
    8ea4:	5287883a 	add	r3,r10,r10
    8ea8:	9497883a 	add	r11,r18,r18
    8eac:	5c8f803a 	cmpltu	r7,r11,r18
    8eb0:	9cd9883a 	add	r12,r19,r19
    8eb4:	01000044 	movi	r4,1
    8eb8:	30cd883a 	add	r6,r6,r3
    8ebc:	3b0f883a 	add	r7,r7,r12
    8ec0:	423fffc4 	addi	r8,r8,-1
    8ec4:	1013883a 	mov	r9,r2
    8ec8:	3015883a 	mov	r10,r6
    8ecc:	111ab03a 	or	r13,r2,r4
    8ed0:	98003016 	blt	r19,zero,8f94 <__muldf3+0x398>
    8ed4:	5825883a 	mov	r18,r11
    8ed8:	3827883a 	mov	r19,r7
    8edc:	7abfef2e 	bgeu	r15,r10,8e9c <__muldf3+0x2a0>
    8ee0:	da001015 	stw	r8,64(sp)
    8ee4:	00803fc4 	movi	r2,255
    8ee8:	488e703a 	and	r7,r9,r2
    8eec:	00802004 	movi	r2,128
    8ef0:	0007883a 	mov	r3,zero
    8ef4:	0011883a 	mov	r8,zero
    8ef8:	38801826 	beq	r7,r2,8f5c <__muldf3+0x360>
    8efc:	008000c4 	movi	r2,3
    8f00:	d9000e04 	addi	r4,sp,56
    8f04:	da801215 	stw	r10,72(sp)
    8f08:	d8800e15 	stw	r2,56(sp)
    8f0c:	da401115 	stw	r9,68(sp)
    8f10:	003f6a06 	br	8cbc <__muldf3+0xc0>
    8f14:	89802126 	beq	r17,r6,8f9c <__muldf3+0x3a0>
    8f18:	0009883a 	mov	r4,zero
    8f1c:	5105883a 	add	r2,r10,r4
    8f20:	128d803a 	cmpltu	r6,r2,r10
    8f24:	5d07883a 	add	r3,r11,r20
    8f28:	30cd883a 	add	r6,r6,r3
    8f2c:	0021883a 	mov	r16,zero
    8f30:	0023883a 	mov	r17,zero
    8f34:	1025883a 	mov	r18,r2
    8f38:	3027883a 	mov	r19,r6
    8f3c:	32ff9e2e 	bgeu	r6,r11,8db8 <__muldf3+0x1bc>
    8f40:	00800044 	movi	r2,1
    8f44:	8089883a 	add	r4,r16,r2
    8f48:	240d803a 	cmpltu	r6,r4,r16
    8f4c:	344d883a 	add	r6,r6,r17
    8f50:	2021883a 	mov	r16,r4
    8f54:	3023883a 	mov	r17,r6
    8f58:	003f9806 	br	8dbc <__muldf3+0x1c0>
    8f5c:	403fe71e 	bne	r8,zero,8efc <__muldf3+0x300>
    8f60:	01004004 	movi	r4,256
    8f64:	4904703a 	and	r2,r9,r4
    8f68:	10c4b03a 	or	r2,r2,r3
    8f6c:	103fe31e 	bne	r2,zero,8efc <__muldf3+0x300>
    8f70:	94c4b03a 	or	r2,r18,r19
    8f74:	103fe126 	beq	r2,zero,8efc <__muldf3+0x300>
    8f78:	49c5883a 	add	r2,r9,r7
    8f7c:	1251803a 	cmpltu	r8,r2,r9
    8f80:	4291883a 	add	r8,r8,r10
    8f84:	013fc004 	movi	r4,-256
    8f88:	1112703a 	and	r9,r2,r4
    8f8c:	4015883a 	mov	r10,r8
    8f90:	003fda06 	br	8efc <__muldf3+0x300>
    8f94:	6813883a 	mov	r9,r13
    8f98:	003fce06 	br	8ed4 <__muldf3+0x2d8>
    8f9c:	143f7c36 	bltu	r2,r16,8d90 <__muldf3+0x194>
    8fa0:	003fdd06 	br	8f18 <__muldf3+0x31c>
    8fa4:	12bf852e 	bgeu	r2,r10,8dbc <__muldf3+0x1c0>
    8fa8:	003fe506 	br	8f40 <__muldf3+0x344>
    8fac:	00800084 	movi	r2,2
    8fb0:	20bf351e 	bne	r4,r2,8c88 <__muldf3+0x8c>
    8fb4:	01000074 	movhi	r4,1
    8fb8:	2131d604 	addi	r4,r4,-14504
    8fbc:	003f3f06 	br	8cbc <__muldf3+0xc0>

00008fc0 <__divdf3>:
    8fc0:	deffed04 	addi	sp,sp,-76
    8fc4:	dcc01115 	stw	r19,68(sp)
    8fc8:	dcc00404 	addi	r19,sp,16
    8fcc:	2011883a 	mov	r8,r4
    8fd0:	2813883a 	mov	r9,r5
    8fd4:	dc000e15 	stw	r16,56(sp)
    8fd8:	d809883a 	mov	r4,sp
    8fdc:	980b883a 	mov	r5,r19
    8fe0:	dc000904 	addi	r16,sp,36
    8fe4:	dfc01215 	stw	ra,72(sp)
    8fe8:	da400115 	stw	r9,4(sp)
    8fec:	d9c00315 	stw	r7,12(sp)
    8ff0:	da000015 	stw	r8,0(sp)
    8ff4:	d9800215 	stw	r6,8(sp)
    8ff8:	dc801015 	stw	r18,64(sp)
    8ffc:	dc400f15 	stw	r17,60(sp)
    9000:	0009c500 	call	9c50 <__unpack_d>
    9004:	d9000204 	addi	r4,sp,8
    9008:	800b883a 	mov	r5,r16
    900c:	0009c500 	call	9c50 <__unpack_d>
    9010:	d9000417 	ldw	r4,16(sp)
    9014:	00800044 	movi	r2,1
    9018:	11000b2e 	bgeu	r2,r4,9048 <__divdf3+0x88>
    901c:	d9400917 	ldw	r5,36(sp)
    9020:	1140762e 	bgeu	r2,r5,91fc <__divdf3+0x23c>
    9024:	d8800517 	ldw	r2,20(sp)
    9028:	d8c00a17 	ldw	r3,40(sp)
    902c:	01800104 	movi	r6,4
    9030:	10c4f03a 	xor	r2,r2,r3
    9034:	d8800515 	stw	r2,20(sp)
    9038:	21800226 	beq	r4,r6,9044 <__divdf3+0x84>
    903c:	00800084 	movi	r2,2
    9040:	2080141e 	bne	r4,r2,9094 <__divdf3+0xd4>
    9044:	29000926 	beq	r5,r4,906c <__divdf3+0xac>
    9048:	9809883a 	mov	r4,r19
    904c:	000993c0 	call	993c <__pack_d>
    9050:	dfc01217 	ldw	ra,72(sp)
    9054:	dcc01117 	ldw	r19,68(sp)
    9058:	dc801017 	ldw	r18,64(sp)
    905c:	dc400f17 	ldw	r17,60(sp)
    9060:	dc000e17 	ldw	r16,56(sp)
    9064:	dec01304 	addi	sp,sp,76
    9068:	f800283a 	ret
    906c:	01000074 	movhi	r4,1
    9070:	2131d604 	addi	r4,r4,-14504
    9074:	000993c0 	call	993c <__pack_d>
    9078:	dfc01217 	ldw	ra,72(sp)
    907c:	dcc01117 	ldw	r19,68(sp)
    9080:	dc801017 	ldw	r18,64(sp)
    9084:	dc400f17 	ldw	r17,60(sp)
    9088:	dc000e17 	ldw	r16,56(sp)
    908c:	dec01304 	addi	sp,sp,76
    9090:	f800283a 	ret
    9094:	29805b26 	beq	r5,r6,9204 <__divdf3+0x244>
    9098:	28802d26 	beq	r5,r2,9150 <__divdf3+0x190>
    909c:	d8c00617 	ldw	r3,24(sp)
    90a0:	d8800b17 	ldw	r2,44(sp)
    90a4:	d9c00817 	ldw	r7,32(sp)
    90a8:	dc400d17 	ldw	r17,52(sp)
    90ac:	188bc83a 	sub	r5,r3,r2
    90b0:	d9800717 	ldw	r6,28(sp)
    90b4:	dc000c17 	ldw	r16,48(sp)
    90b8:	d9400615 	stw	r5,24(sp)
    90bc:	3c403836 	bltu	r7,r17,91a0 <__divdf3+0x1e0>
    90c0:	89c03626 	beq	r17,r7,919c <__divdf3+0x1dc>
    90c4:	0015883a 	mov	r10,zero
    90c8:	001d883a 	mov	r14,zero
    90cc:	02c40034 	movhi	r11,4096
    90d0:	001f883a 	mov	r15,zero
    90d4:	003f883a 	mov	ra,zero
    90d8:	04800f44 	movi	r18,61
    90dc:	00000f06 	br	911c <__divdf3+0x15c>
    90e0:	601d883a 	mov	r14,r12
    90e4:	681f883a 	mov	r15,r13
    90e8:	400d883a 	mov	r6,r8
    90ec:	100f883a 	mov	r7,r2
    90f0:	3191883a 	add	r8,r6,r6
    90f4:	5808d07a 	srli	r4,r11,1
    90f8:	4185803a 	cmpltu	r2,r8,r6
    90fc:	39d3883a 	add	r9,r7,r7
    9100:	28c6b03a 	or	r3,r5,r3
    9104:	1245883a 	add	r2,r2,r9
    9108:	1815883a 	mov	r10,r3
    910c:	2017883a 	mov	r11,r4
    9110:	400d883a 	mov	r6,r8
    9114:	100f883a 	mov	r7,r2
    9118:	fc801726 	beq	ra,r18,9178 <__divdf3+0x1b8>
    911c:	580a97fa 	slli	r5,r11,31
    9120:	5006d07a 	srli	r3,r10,1
    9124:	ffc00044 	addi	ra,ra,1
    9128:	3c7ff136 	bltu	r7,r17,90f0 <__divdf3+0x130>
    912c:	3411c83a 	sub	r8,r6,r16
    9130:	3205803a 	cmpltu	r2,r6,r8
    9134:	3c53c83a 	sub	r9,r7,r17
    9138:	7298b03a 	or	r12,r14,r10
    913c:	7adab03a 	or	r13,r15,r11
    9140:	4885c83a 	sub	r2,r9,r2
    9144:	89ffe61e 	bne	r17,r7,90e0 <__divdf3+0x120>
    9148:	343fe936 	bltu	r6,r16,90f0 <__divdf3+0x130>
    914c:	003fe406 	br	90e0 <__divdf3+0x120>
    9150:	9809883a 	mov	r4,r19
    9154:	d9800415 	stw	r6,16(sp)
    9158:	000993c0 	call	993c <__pack_d>
    915c:	dfc01217 	ldw	ra,72(sp)
    9160:	dcc01117 	ldw	r19,68(sp)
    9164:	dc801017 	ldw	r18,64(sp)
    9168:	dc400f17 	ldw	r17,60(sp)
    916c:	dc000e17 	ldw	r16,56(sp)
    9170:	dec01304 	addi	sp,sp,76
    9174:	f800283a 	ret
    9178:	00803fc4 	movi	r2,255
    917c:	7090703a 	and	r8,r14,r2
    9180:	00802004 	movi	r2,128
    9184:	0007883a 	mov	r3,zero
    9188:	0013883a 	mov	r9,zero
    918c:	40800d26 	beq	r8,r2,91c4 <__divdf3+0x204>
    9190:	dbc00815 	stw	r15,32(sp)
    9194:	db800715 	stw	r14,28(sp)
    9198:	003fab06 	br	9048 <__divdf3+0x88>
    919c:	343fc92e 	bgeu	r6,r16,90c4 <__divdf3+0x104>
    91a0:	3185883a 	add	r2,r6,r6
    91a4:	1189803a 	cmpltu	r4,r2,r6
    91a8:	39c7883a 	add	r3,r7,r7
    91ac:	20c9883a 	add	r4,r4,r3
    91b0:	297fffc4 	addi	r5,r5,-1
    91b4:	100d883a 	mov	r6,r2
    91b8:	200f883a 	mov	r7,r4
    91bc:	d9400615 	stw	r5,24(sp)
    91c0:	003fc006 	br	90c4 <__divdf3+0x104>
    91c4:	483ff21e 	bne	r9,zero,9190 <__divdf3+0x1d0>
    91c8:	01004004 	movi	r4,256
    91cc:	7104703a 	and	r2,r14,r4
    91d0:	10c4b03a 	or	r2,r2,r3
    91d4:	103fee1e 	bne	r2,zero,9190 <__divdf3+0x1d0>
    91d8:	31c4b03a 	or	r2,r6,r7
    91dc:	103fec26 	beq	r2,zero,9190 <__divdf3+0x1d0>
    91e0:	7205883a 	add	r2,r14,r8
    91e4:	1391803a 	cmpltu	r8,r2,r14
    91e8:	43d1883a 	add	r8,r8,r15
    91ec:	013fc004 	movi	r4,-256
    91f0:	111c703a 	and	r14,r2,r4
    91f4:	401f883a 	mov	r15,r8
    91f8:	003fe506 	br	9190 <__divdf3+0x1d0>
    91fc:	8009883a 	mov	r4,r16
    9200:	003f9206 	br	904c <__divdf3+0x8c>
    9204:	9809883a 	mov	r4,r19
    9208:	d8000715 	stw	zero,28(sp)
    920c:	d8000815 	stw	zero,32(sp)
    9210:	d8000615 	stw	zero,24(sp)
    9214:	003f8d06 	br	904c <__divdf3+0x8c>

00009218 <__eqdf2>:
    9218:	deffef04 	addi	sp,sp,-68
    921c:	dc400f15 	stw	r17,60(sp)
    9220:	dc400404 	addi	r17,sp,16
    9224:	2005883a 	mov	r2,r4
    9228:	2807883a 	mov	r3,r5
    922c:	dc000e15 	stw	r16,56(sp)
    9230:	d809883a 	mov	r4,sp
    9234:	880b883a 	mov	r5,r17
    9238:	dc000904 	addi	r16,sp,36
    923c:	d8c00115 	stw	r3,4(sp)
    9240:	d8800015 	stw	r2,0(sp)
    9244:	d9800215 	stw	r6,8(sp)
    9248:	dfc01015 	stw	ra,64(sp)
    924c:	d9c00315 	stw	r7,12(sp)
    9250:	0009c500 	call	9c50 <__unpack_d>
    9254:	d9000204 	addi	r4,sp,8
    9258:	800b883a 	mov	r5,r16
    925c:	0009c500 	call	9c50 <__unpack_d>
    9260:	d8800417 	ldw	r2,16(sp)
    9264:	00c00044 	movi	r3,1
    9268:	180d883a 	mov	r6,r3
    926c:	1880062e 	bgeu	r3,r2,9288 <__eqdf2+0x70>
    9270:	d8800917 	ldw	r2,36(sp)
    9274:	8809883a 	mov	r4,r17
    9278:	800b883a 	mov	r5,r16
    927c:	1880022e 	bgeu	r3,r2,9288 <__eqdf2+0x70>
    9280:	0009d880 	call	9d88 <__fpcmp_parts_d>
    9284:	100d883a 	mov	r6,r2
    9288:	3005883a 	mov	r2,r6
    928c:	dfc01017 	ldw	ra,64(sp)
    9290:	dc400f17 	ldw	r17,60(sp)
    9294:	dc000e17 	ldw	r16,56(sp)
    9298:	dec01104 	addi	sp,sp,68
    929c:	f800283a 	ret

000092a0 <__nedf2>:
    92a0:	deffef04 	addi	sp,sp,-68
    92a4:	dc400f15 	stw	r17,60(sp)
    92a8:	dc400404 	addi	r17,sp,16
    92ac:	2005883a 	mov	r2,r4
    92b0:	2807883a 	mov	r3,r5
    92b4:	dc000e15 	stw	r16,56(sp)
    92b8:	d809883a 	mov	r4,sp
    92bc:	880b883a 	mov	r5,r17
    92c0:	dc000904 	addi	r16,sp,36
    92c4:	d8c00115 	stw	r3,4(sp)
    92c8:	d8800015 	stw	r2,0(sp)
    92cc:	d9800215 	stw	r6,8(sp)
    92d0:	dfc01015 	stw	ra,64(sp)
    92d4:	d9c00315 	stw	r7,12(sp)
    92d8:	0009c500 	call	9c50 <__unpack_d>
    92dc:	d9000204 	addi	r4,sp,8
    92e0:	800b883a 	mov	r5,r16
    92e4:	0009c500 	call	9c50 <__unpack_d>
    92e8:	d8800417 	ldw	r2,16(sp)
    92ec:	00c00044 	movi	r3,1
    92f0:	180d883a 	mov	r6,r3
    92f4:	1880062e 	bgeu	r3,r2,9310 <__nedf2+0x70>
    92f8:	d8800917 	ldw	r2,36(sp)
    92fc:	8809883a 	mov	r4,r17
    9300:	800b883a 	mov	r5,r16
    9304:	1880022e 	bgeu	r3,r2,9310 <__nedf2+0x70>
    9308:	0009d880 	call	9d88 <__fpcmp_parts_d>
    930c:	100d883a 	mov	r6,r2
    9310:	3005883a 	mov	r2,r6
    9314:	dfc01017 	ldw	ra,64(sp)
    9318:	dc400f17 	ldw	r17,60(sp)
    931c:	dc000e17 	ldw	r16,56(sp)
    9320:	dec01104 	addi	sp,sp,68
    9324:	f800283a 	ret

00009328 <__gtdf2>:
    9328:	deffef04 	addi	sp,sp,-68
    932c:	dc400f15 	stw	r17,60(sp)
    9330:	dc400404 	addi	r17,sp,16
    9334:	2005883a 	mov	r2,r4
    9338:	2807883a 	mov	r3,r5
    933c:	dc000e15 	stw	r16,56(sp)
    9340:	d809883a 	mov	r4,sp
    9344:	880b883a 	mov	r5,r17
    9348:	dc000904 	addi	r16,sp,36
    934c:	d8c00115 	stw	r3,4(sp)
    9350:	d8800015 	stw	r2,0(sp)
    9354:	d9800215 	stw	r6,8(sp)
    9358:	dfc01015 	stw	ra,64(sp)
    935c:	d9c00315 	stw	r7,12(sp)
    9360:	0009c500 	call	9c50 <__unpack_d>
    9364:	d9000204 	addi	r4,sp,8
    9368:	800b883a 	mov	r5,r16
    936c:	0009c500 	call	9c50 <__unpack_d>
    9370:	d8800417 	ldw	r2,16(sp)
    9374:	00c00044 	movi	r3,1
    9378:	01bfffc4 	movi	r6,-1
    937c:	1880062e 	bgeu	r3,r2,9398 <__gtdf2+0x70>
    9380:	d8800917 	ldw	r2,36(sp)
    9384:	8809883a 	mov	r4,r17
    9388:	800b883a 	mov	r5,r16
    938c:	1880022e 	bgeu	r3,r2,9398 <__gtdf2+0x70>
    9390:	0009d880 	call	9d88 <__fpcmp_parts_d>
    9394:	100d883a 	mov	r6,r2
    9398:	3005883a 	mov	r2,r6
    939c:	dfc01017 	ldw	ra,64(sp)
    93a0:	dc400f17 	ldw	r17,60(sp)
    93a4:	dc000e17 	ldw	r16,56(sp)
    93a8:	dec01104 	addi	sp,sp,68
    93ac:	f800283a 	ret

000093b0 <__gedf2>:
    93b0:	deffef04 	addi	sp,sp,-68
    93b4:	dc400f15 	stw	r17,60(sp)
    93b8:	dc400404 	addi	r17,sp,16
    93bc:	2005883a 	mov	r2,r4
    93c0:	2807883a 	mov	r3,r5
    93c4:	dc000e15 	stw	r16,56(sp)
    93c8:	d809883a 	mov	r4,sp
    93cc:	880b883a 	mov	r5,r17
    93d0:	dc000904 	addi	r16,sp,36
    93d4:	d8c00115 	stw	r3,4(sp)
    93d8:	d8800015 	stw	r2,0(sp)
    93dc:	d9800215 	stw	r6,8(sp)
    93e0:	dfc01015 	stw	ra,64(sp)
    93e4:	d9c00315 	stw	r7,12(sp)
    93e8:	0009c500 	call	9c50 <__unpack_d>
    93ec:	d9000204 	addi	r4,sp,8
    93f0:	800b883a 	mov	r5,r16
    93f4:	0009c500 	call	9c50 <__unpack_d>
    93f8:	d8800417 	ldw	r2,16(sp)
    93fc:	00c00044 	movi	r3,1
    9400:	01bfffc4 	movi	r6,-1
    9404:	1880062e 	bgeu	r3,r2,9420 <__gedf2+0x70>
    9408:	d8800917 	ldw	r2,36(sp)
    940c:	8809883a 	mov	r4,r17
    9410:	800b883a 	mov	r5,r16
    9414:	1880022e 	bgeu	r3,r2,9420 <__gedf2+0x70>
    9418:	0009d880 	call	9d88 <__fpcmp_parts_d>
    941c:	100d883a 	mov	r6,r2
    9420:	3005883a 	mov	r2,r6
    9424:	dfc01017 	ldw	ra,64(sp)
    9428:	dc400f17 	ldw	r17,60(sp)
    942c:	dc000e17 	ldw	r16,56(sp)
    9430:	dec01104 	addi	sp,sp,68
    9434:	f800283a 	ret

00009438 <__ltdf2>:
    9438:	deffef04 	addi	sp,sp,-68
    943c:	dc400f15 	stw	r17,60(sp)
    9440:	dc400404 	addi	r17,sp,16
    9444:	2005883a 	mov	r2,r4
    9448:	2807883a 	mov	r3,r5
    944c:	dc000e15 	stw	r16,56(sp)
    9450:	d809883a 	mov	r4,sp
    9454:	880b883a 	mov	r5,r17
    9458:	dc000904 	addi	r16,sp,36
    945c:	d8c00115 	stw	r3,4(sp)
    9460:	d8800015 	stw	r2,0(sp)
    9464:	d9800215 	stw	r6,8(sp)
    9468:	dfc01015 	stw	ra,64(sp)
    946c:	d9c00315 	stw	r7,12(sp)
    9470:	0009c500 	call	9c50 <__unpack_d>
    9474:	d9000204 	addi	r4,sp,8
    9478:	800b883a 	mov	r5,r16
    947c:	0009c500 	call	9c50 <__unpack_d>
    9480:	d8800417 	ldw	r2,16(sp)
    9484:	00c00044 	movi	r3,1
    9488:	180d883a 	mov	r6,r3
    948c:	1880062e 	bgeu	r3,r2,94a8 <__ltdf2+0x70>
    9490:	d8800917 	ldw	r2,36(sp)
    9494:	8809883a 	mov	r4,r17
    9498:	800b883a 	mov	r5,r16
    949c:	1880022e 	bgeu	r3,r2,94a8 <__ltdf2+0x70>
    94a0:	0009d880 	call	9d88 <__fpcmp_parts_d>
    94a4:	100d883a 	mov	r6,r2
    94a8:	3005883a 	mov	r2,r6
    94ac:	dfc01017 	ldw	ra,64(sp)
    94b0:	dc400f17 	ldw	r17,60(sp)
    94b4:	dc000e17 	ldw	r16,56(sp)
    94b8:	dec01104 	addi	sp,sp,68
    94bc:	f800283a 	ret

000094c0 <__floatsidf>:
    94c0:	2006d7fa 	srli	r3,r4,31
    94c4:	defff604 	addi	sp,sp,-40
    94c8:	008000c4 	movi	r2,3
    94cc:	dfc00915 	stw	ra,36(sp)
    94d0:	dcc00815 	stw	r19,32(sp)
    94d4:	dc800715 	stw	r18,28(sp)
    94d8:	dc400615 	stw	r17,24(sp)
    94dc:	dc000515 	stw	r16,20(sp)
    94e0:	d8800015 	stw	r2,0(sp)
    94e4:	d8c00115 	stw	r3,4(sp)
    94e8:	20000f1e 	bne	r4,zero,9528 <__floatsidf+0x68>
    94ec:	00800084 	movi	r2,2
    94f0:	d8800015 	stw	r2,0(sp)
    94f4:	d809883a 	mov	r4,sp
    94f8:	000993c0 	call	993c <__pack_d>
    94fc:	1009883a 	mov	r4,r2
    9500:	180b883a 	mov	r5,r3
    9504:	2005883a 	mov	r2,r4
    9508:	2807883a 	mov	r3,r5
    950c:	dfc00917 	ldw	ra,36(sp)
    9510:	dcc00817 	ldw	r19,32(sp)
    9514:	dc800717 	ldw	r18,28(sp)
    9518:	dc400617 	ldw	r17,24(sp)
    951c:	dc000517 	ldw	r16,20(sp)
    9520:	dec00a04 	addi	sp,sp,40
    9524:	f800283a 	ret
    9528:	00800f04 	movi	r2,60
    952c:	1807003a 	cmpeq	r3,r3,zero
    9530:	d8800215 	stw	r2,8(sp)
    9534:	18001126 	beq	r3,zero,957c <__floatsidf+0xbc>
    9538:	0027883a 	mov	r19,zero
    953c:	2025883a 	mov	r18,r4
    9540:	d9000315 	stw	r4,12(sp)
    9544:	dcc00415 	stw	r19,16(sp)
    9548:	00098bc0 	call	98bc <__clzsi2>
    954c:	11000744 	addi	r4,r2,29
    9550:	013fe80e 	bge	zero,r4,94f4 <__floatsidf+0x34>
    9554:	10bfff44 	addi	r2,r2,-3
    9558:	10000c16 	blt	r2,zero,958c <__floatsidf+0xcc>
    955c:	90a2983a 	sll	r17,r18,r2
    9560:	0021883a 	mov	r16,zero
    9564:	d8800217 	ldw	r2,8(sp)
    9568:	dc400415 	stw	r17,16(sp)
    956c:	dc000315 	stw	r16,12(sp)
    9570:	1105c83a 	sub	r2,r2,r4
    9574:	d8800215 	stw	r2,8(sp)
    9578:	003fde06 	br	94f4 <__floatsidf+0x34>
    957c:	00a00034 	movhi	r2,32768
    9580:	20800a26 	beq	r4,r2,95ac <__floatsidf+0xec>
    9584:	0109c83a 	sub	r4,zero,r4
    9588:	003feb06 	br	9538 <__floatsidf+0x78>
    958c:	9006d07a 	srli	r3,r18,1
    9590:	008007c4 	movi	r2,31
    9594:	1105c83a 	sub	r2,r2,r4
    9598:	1886d83a 	srl	r3,r3,r2
    959c:	9922983a 	sll	r17,r19,r4
    95a0:	9120983a 	sll	r16,r18,r4
    95a4:	1c62b03a 	or	r17,r3,r17
    95a8:	003fee06 	br	9564 <__floatsidf+0xa4>
    95ac:	0009883a 	mov	r4,zero
    95b0:	01707834 	movhi	r5,49632
    95b4:	003fd306 	br	9504 <__floatsidf+0x44>

000095b8 <__fixdfsi>:
    95b8:	defff804 	addi	sp,sp,-32
    95bc:	2005883a 	mov	r2,r4
    95c0:	2807883a 	mov	r3,r5
    95c4:	d809883a 	mov	r4,sp
    95c8:	d9400204 	addi	r5,sp,8
    95cc:	d8c00115 	stw	r3,4(sp)
    95d0:	d8800015 	stw	r2,0(sp)
    95d4:	dfc00715 	stw	ra,28(sp)
    95d8:	0009c500 	call	9c50 <__unpack_d>
    95dc:	d8c00217 	ldw	r3,8(sp)
    95e0:	00800084 	movi	r2,2
    95e4:	1880051e 	bne	r3,r2,95fc <__fixdfsi+0x44>
    95e8:	0007883a 	mov	r3,zero
    95ec:	1805883a 	mov	r2,r3
    95f0:	dfc00717 	ldw	ra,28(sp)
    95f4:	dec00804 	addi	sp,sp,32
    95f8:	f800283a 	ret
    95fc:	00800044 	movi	r2,1
    9600:	10fff92e 	bgeu	r2,r3,95e8 <__fixdfsi+0x30>
    9604:	00800104 	movi	r2,4
    9608:	18800426 	beq	r3,r2,961c <__fixdfsi+0x64>
    960c:	d8c00417 	ldw	r3,16(sp)
    9610:	183ff516 	blt	r3,zero,95e8 <__fixdfsi+0x30>
    9614:	00800784 	movi	r2,30
    9618:	10c0080e 	bge	r2,r3,963c <__fixdfsi+0x84>
    961c:	d8800317 	ldw	r2,12(sp)
    9620:	1000121e 	bne	r2,zero,966c <__fixdfsi+0xb4>
    9624:	00e00034 	movhi	r3,32768
    9628:	18ffffc4 	addi	r3,r3,-1
    962c:	1805883a 	mov	r2,r3
    9630:	dfc00717 	ldw	ra,28(sp)
    9634:	dec00804 	addi	sp,sp,32
    9638:	f800283a 	ret
    963c:	00800f04 	movi	r2,60
    9640:	10d1c83a 	sub	r8,r2,r3
    9644:	40bff804 	addi	r2,r8,-32
    9648:	d9800517 	ldw	r6,20(sp)
    964c:	d9c00617 	ldw	r7,24(sp)
    9650:	10000816 	blt	r2,zero,9674 <__fixdfsi+0xbc>
    9654:	3888d83a 	srl	r4,r7,r2
    9658:	d8800317 	ldw	r2,12(sp)
    965c:	2007883a 	mov	r3,r4
    9660:	103fe226 	beq	r2,zero,95ec <__fixdfsi+0x34>
    9664:	0107c83a 	sub	r3,zero,r4
    9668:	003fe006 	br	95ec <__fixdfsi+0x34>
    966c:	00e00034 	movhi	r3,32768
    9670:	003fde06 	br	95ec <__fixdfsi+0x34>
    9674:	39c7883a 	add	r3,r7,r7
    9678:	008007c4 	movi	r2,31
    967c:	1205c83a 	sub	r2,r2,r8
    9680:	1886983a 	sll	r3,r3,r2
    9684:	3208d83a 	srl	r4,r6,r8
    9688:	1908b03a 	or	r4,r3,r4
    968c:	003ff206 	br	9658 <__fixdfsi+0xa0>

00009690 <__floatunsidf>:
    9690:	defff204 	addi	sp,sp,-56
    9694:	dfc00d15 	stw	ra,52(sp)
    9698:	ddc00c15 	stw	r23,48(sp)
    969c:	dd800b15 	stw	r22,44(sp)
    96a0:	dd400a15 	stw	r21,40(sp)
    96a4:	dd000915 	stw	r20,36(sp)
    96a8:	dcc00815 	stw	r19,32(sp)
    96ac:	dc800715 	stw	r18,28(sp)
    96b0:	dc400615 	stw	r17,24(sp)
    96b4:	dc000515 	stw	r16,20(sp)
    96b8:	d8000115 	stw	zero,4(sp)
    96bc:	20000f1e 	bne	r4,zero,96fc <__floatunsidf+0x6c>
    96c0:	00800084 	movi	r2,2
    96c4:	d8800015 	stw	r2,0(sp)
    96c8:	d809883a 	mov	r4,sp
    96cc:	000993c0 	call	993c <__pack_d>
    96d0:	dfc00d17 	ldw	ra,52(sp)
    96d4:	ddc00c17 	ldw	r23,48(sp)
    96d8:	dd800b17 	ldw	r22,44(sp)
    96dc:	dd400a17 	ldw	r21,40(sp)
    96e0:	dd000917 	ldw	r20,36(sp)
    96e4:	dcc00817 	ldw	r19,32(sp)
    96e8:	dc800717 	ldw	r18,28(sp)
    96ec:	dc400617 	ldw	r17,24(sp)
    96f0:	dc000517 	ldw	r16,20(sp)
    96f4:	dec00e04 	addi	sp,sp,56
    96f8:	f800283a 	ret
    96fc:	008000c4 	movi	r2,3
    9700:	00c00f04 	movi	r3,60
    9704:	002f883a 	mov	r23,zero
    9708:	202d883a 	mov	r22,r4
    970c:	d8800015 	stw	r2,0(sp)
    9710:	d8c00215 	stw	r3,8(sp)
    9714:	d9000315 	stw	r4,12(sp)
    9718:	ddc00415 	stw	r23,16(sp)
    971c:	00098bc0 	call	98bc <__clzsi2>
    9720:	12400744 	addi	r9,r2,29
    9724:	48000b16 	blt	r9,zero,9754 <__floatunsidf+0xc4>
    9728:	483fe726 	beq	r9,zero,96c8 <__floatunsidf+0x38>
    972c:	10bfff44 	addi	r2,r2,-3
    9730:	10002e16 	blt	r2,zero,97ec <__floatunsidf+0x15c>
    9734:	b0a2983a 	sll	r17,r22,r2
    9738:	0021883a 	mov	r16,zero
    973c:	d8800217 	ldw	r2,8(sp)
    9740:	dc400415 	stw	r17,16(sp)
    9744:	dc000315 	stw	r16,12(sp)
    9748:	1245c83a 	sub	r2,r2,r9
    974c:	d8800215 	stw	r2,8(sp)
    9750:	003fdd06 	br	96c8 <__floatunsidf+0x38>
    9754:	0255c83a 	sub	r10,zero,r9
    9758:	51bff804 	addi	r6,r10,-32
    975c:	30001b16 	blt	r6,zero,97cc <__floatunsidf+0x13c>
    9760:	b9a8d83a 	srl	r20,r23,r6
    9764:	002b883a 	mov	r21,zero
    9768:	000f883a 	mov	r7,zero
    976c:	01000044 	movi	r4,1
    9770:	0011883a 	mov	r8,zero
    9774:	30002516 	blt	r6,zero,980c <__floatunsidf+0x17c>
    9778:	21a6983a 	sll	r19,r4,r6
    977c:	0025883a 	mov	r18,zero
    9780:	00bfffc4 	movi	r2,-1
    9784:	9089883a 	add	r4,r18,r2
    9788:	988b883a 	add	r5,r19,r2
    978c:	248d803a 	cmpltu	r6,r4,r18
    9790:	314b883a 	add	r5,r6,r5
    9794:	b104703a 	and	r2,r22,r4
    9798:	b946703a 	and	r3,r23,r5
    979c:	10c4b03a 	or	r2,r2,r3
    97a0:	10000226 	beq	r2,zero,97ac <__floatunsidf+0x11c>
    97a4:	01c00044 	movi	r7,1
    97a8:	0011883a 	mov	r8,zero
    97ac:	d9000217 	ldw	r4,8(sp)
    97b0:	a1c4b03a 	or	r2,r20,r7
    97b4:	aa06b03a 	or	r3,r21,r8
    97b8:	2249c83a 	sub	r4,r4,r9
    97bc:	d8c00415 	stw	r3,16(sp)
    97c0:	d9000215 	stw	r4,8(sp)
    97c4:	d8800315 	stw	r2,12(sp)
    97c8:	003fbf06 	br	96c8 <__floatunsidf+0x38>
    97cc:	bdc7883a 	add	r3,r23,r23
    97d0:	008007c4 	movi	r2,31
    97d4:	1285c83a 	sub	r2,r2,r10
    97d8:	1886983a 	sll	r3,r3,r2
    97dc:	b2a8d83a 	srl	r20,r22,r10
    97e0:	baaad83a 	srl	r21,r23,r10
    97e4:	1d28b03a 	or	r20,r3,r20
    97e8:	003fdf06 	br	9768 <__floatunsidf+0xd8>
    97ec:	b006d07a 	srli	r3,r22,1
    97f0:	008007c4 	movi	r2,31
    97f4:	1245c83a 	sub	r2,r2,r9
    97f8:	1886d83a 	srl	r3,r3,r2
    97fc:	ba62983a 	sll	r17,r23,r9
    9800:	b260983a 	sll	r16,r22,r9
    9804:	1c62b03a 	or	r17,r3,r17
    9808:	003fcc06 	br	973c <__floatunsidf+0xac>
    980c:	2006d07a 	srli	r3,r4,1
    9810:	008007c4 	movi	r2,31
    9814:	1285c83a 	sub	r2,r2,r10
    9818:	18a6d83a 	srl	r19,r3,r2
    981c:	22a4983a 	sll	r18,r4,r10
    9820:	003fd706 	br	9780 <__floatunsidf+0xf0>

00009824 <__muldi3>:
    9824:	2011883a 	mov	r8,r4
    9828:	427fffcc 	andi	r9,r8,65535
    982c:	4018d43a 	srli	r12,r8,16
    9830:	32bfffcc 	andi	r10,r6,65535
    9834:	3016d43a 	srli	r11,r6,16
    9838:	4a85383a 	mul	r2,r9,r10
    983c:	6295383a 	mul	r10,r12,r10
    9840:	4ad3383a 	mul	r9,r9,r11
    9844:	113fffcc 	andi	r4,r2,65535
    9848:	1004d43a 	srli	r2,r2,16
    984c:	4a93883a 	add	r9,r9,r10
    9850:	3807883a 	mov	r3,r7
    9854:	1245883a 	add	r2,r2,r9
    9858:	280f883a 	mov	r7,r5
    985c:	180b883a 	mov	r5,r3
    9860:	1006943a 	slli	r3,r2,16
    9864:	defffd04 	addi	sp,sp,-12
    9868:	dc800215 	stw	r18,8(sp)
    986c:	1907883a 	add	r3,r3,r4
    9870:	dc400115 	stw	r17,4(sp)
    9874:	dc000015 	stw	r16,0(sp)
    9878:	4165383a 	mul	r18,r8,r5
    987c:	31e3383a 	mul	r17,r6,r7
    9880:	1012d43a 	srli	r9,r2,16
    9884:	62d9383a 	mul	r12,r12,r11
    9888:	181f883a 	mov	r15,r3
    988c:	1280022e 	bgeu	r2,r10,9898 <__muldi3+0x74>
    9890:	00800074 	movhi	r2,1
    9894:	6099883a 	add	r12,r12,r2
    9898:	624d883a 	add	r6,r12,r9
    989c:	9187883a 	add	r3,r18,r6
    98a0:	88c7883a 	add	r3,r17,r3
    98a4:	7805883a 	mov	r2,r15
    98a8:	dc800217 	ldw	r18,8(sp)
    98ac:	dc400117 	ldw	r17,4(sp)
    98b0:	dc000017 	ldw	r16,0(sp)
    98b4:	dec00304 	addi	sp,sp,12
    98b8:	f800283a 	ret

000098bc <__clzsi2>:
    98bc:	00bfffd4 	movui	r2,65535
    98c0:	11000e36 	bltu	r2,r4,98fc <__clzsi2+0x40>
    98c4:	00803fc4 	movi	r2,255
    98c8:	01400204 	movi	r5,8
    98cc:	0007883a 	mov	r3,zero
    98d0:	11001036 	bltu	r2,r4,9914 <__clzsi2+0x58>
    98d4:	000b883a 	mov	r5,zero
    98d8:	20c6d83a 	srl	r3,r4,r3
    98dc:	00800074 	movhi	r2,1
    98e0:	10b1db04 	addi	r2,r2,-14484
    98e4:	1887883a 	add	r3,r3,r2
    98e8:	18800003 	ldbu	r2,0(r3)
    98ec:	00c00804 	movi	r3,32
    98f0:	2885883a 	add	r2,r5,r2
    98f4:	1885c83a 	sub	r2,r3,r2
    98f8:	f800283a 	ret
    98fc:	01400404 	movi	r5,16
    9900:	00804034 	movhi	r2,256
    9904:	10bfffc4 	addi	r2,r2,-1
    9908:	2807883a 	mov	r3,r5
    990c:	113ff22e 	bgeu	r2,r4,98d8 <__clzsi2+0x1c>
    9910:	01400604 	movi	r5,24
    9914:	2807883a 	mov	r3,r5
    9918:	20c6d83a 	srl	r3,r4,r3
    991c:	00800074 	movhi	r2,1
    9920:	10b1db04 	addi	r2,r2,-14484
    9924:	1887883a 	add	r3,r3,r2
    9928:	18800003 	ldbu	r2,0(r3)
    992c:	00c00804 	movi	r3,32
    9930:	2885883a 	add	r2,r5,r2
    9934:	1885c83a 	sub	r2,r3,r2
    9938:	f800283a 	ret

0000993c <__pack_d>:
    993c:	20c00017 	ldw	r3,0(r4)
    9940:	defffd04 	addi	sp,sp,-12
    9944:	dc000015 	stw	r16,0(sp)
    9948:	dc800215 	stw	r18,8(sp)
    994c:	dc400115 	stw	r17,4(sp)
    9950:	00800044 	movi	r2,1
    9954:	22000317 	ldw	r8,12(r4)
    9958:	001f883a 	mov	r15,zero
    995c:	22400417 	ldw	r9,16(r4)
    9960:	24000117 	ldw	r16,4(r4)
    9964:	10c0552e 	bgeu	r2,r3,9abc <__pack_d+0x180>
    9968:	00800104 	movi	r2,4
    996c:	18804f26 	beq	r3,r2,9aac <__pack_d+0x170>
    9970:	00800084 	movi	r2,2
    9974:	18800226 	beq	r3,r2,9980 <__pack_d+0x44>
    9978:	4244b03a 	or	r2,r8,r9
    997c:	10001a1e 	bne	r2,zero,99e8 <__pack_d+0xac>
    9980:	000d883a 	mov	r6,zero
    9984:	000f883a 	mov	r7,zero
    9988:	0011883a 	mov	r8,zero
    998c:	00800434 	movhi	r2,16
    9990:	10bfffc4 	addi	r2,r2,-1
    9994:	301d883a 	mov	r14,r6
    9998:	3884703a 	and	r2,r7,r2
    999c:	400a953a 	slli	r5,r8,20
    99a0:	79bffc2c 	andhi	r6,r15,65520
    99a4:	308cb03a 	or	r6,r6,r2
    99a8:	00e00434 	movhi	r3,32784
    99ac:	18ffffc4 	addi	r3,r3,-1
    99b0:	800497fa 	slli	r2,r16,31
    99b4:	30c6703a 	and	r3,r6,r3
    99b8:	1946b03a 	or	r3,r3,r5
    99bc:	01600034 	movhi	r5,32768
    99c0:	297fffc4 	addi	r5,r5,-1
    99c4:	194a703a 	and	r5,r3,r5
    99c8:	288ab03a 	or	r5,r5,r2
    99cc:	2807883a 	mov	r3,r5
    99d0:	7005883a 	mov	r2,r14
    99d4:	dc800217 	ldw	r18,8(sp)
    99d8:	dc400117 	ldw	r17,4(sp)
    99dc:	dc000017 	ldw	r16,0(sp)
    99e0:	dec00304 	addi	sp,sp,12
    99e4:	f800283a 	ret
    99e8:	21000217 	ldw	r4,8(r4)
    99ec:	00bf0084 	movi	r2,-1022
    99f0:	20803f16 	blt	r4,r2,9af0 <__pack_d+0x1b4>
    99f4:	0080ffc4 	movi	r2,1023
    99f8:	11002c16 	blt	r2,r4,9aac <__pack_d+0x170>
    99fc:	00803fc4 	movi	r2,255
    9a00:	408c703a 	and	r6,r8,r2
    9a04:	00802004 	movi	r2,128
    9a08:	0007883a 	mov	r3,zero
    9a0c:	000f883a 	mov	r7,zero
    9a10:	2280ffc4 	addi	r10,r4,1023
    9a14:	30801e26 	beq	r6,r2,9a90 <__pack_d+0x154>
    9a18:	00801fc4 	movi	r2,127
    9a1c:	4089883a 	add	r4,r8,r2
    9a20:	220d803a 	cmpltu	r6,r4,r8
    9a24:	324d883a 	add	r6,r6,r9
    9a28:	2011883a 	mov	r8,r4
    9a2c:	3013883a 	mov	r9,r6
    9a30:	00880034 	movhi	r2,8192
    9a34:	10bfffc4 	addi	r2,r2,-1
    9a38:	12400d36 	bltu	r2,r9,9a70 <__pack_d+0x134>
    9a3c:	4804963a 	slli	r2,r9,24
    9a40:	400cd23a 	srli	r6,r8,8
    9a44:	480ed23a 	srli	r7,r9,8
    9a48:	013fffc4 	movi	r4,-1
    9a4c:	118cb03a 	or	r6,r2,r6
    9a50:	01400434 	movhi	r5,16
    9a54:	297fffc4 	addi	r5,r5,-1
    9a58:	3104703a 	and	r2,r6,r4
    9a5c:	3946703a 	and	r3,r7,r5
    9a60:	5201ffcc 	andi	r8,r10,2047
    9a64:	100d883a 	mov	r6,r2
    9a68:	180f883a 	mov	r7,r3
    9a6c:	003fc706 	br	998c <__pack_d+0x50>
    9a70:	480897fa 	slli	r4,r9,31
    9a74:	4004d07a 	srli	r2,r8,1
    9a78:	4806d07a 	srli	r3,r9,1
    9a7c:	52800044 	addi	r10,r10,1
    9a80:	2084b03a 	or	r2,r4,r2
    9a84:	1011883a 	mov	r8,r2
    9a88:	1813883a 	mov	r9,r3
    9a8c:	003feb06 	br	9a3c <__pack_d+0x100>
    9a90:	383fe11e 	bne	r7,zero,9a18 <__pack_d+0xdc>
    9a94:	01004004 	movi	r4,256
    9a98:	4104703a 	and	r2,r8,r4
    9a9c:	10c4b03a 	or	r2,r2,r3
    9aa0:	103fe326 	beq	r2,zero,9a30 <__pack_d+0xf4>
    9aa4:	3005883a 	mov	r2,r6
    9aa8:	003fdc06 	br	9a1c <__pack_d+0xe0>
    9aac:	000d883a 	mov	r6,zero
    9ab0:	000f883a 	mov	r7,zero
    9ab4:	0201ffc4 	movi	r8,2047
    9ab8:	003fb406 	br	998c <__pack_d+0x50>
    9abc:	0005883a 	mov	r2,zero
    9ac0:	00c00234 	movhi	r3,8
    9ac4:	408cb03a 	or	r6,r8,r2
    9ac8:	48ceb03a 	or	r7,r9,r3
    9acc:	013fffc4 	movi	r4,-1
    9ad0:	01400434 	movhi	r5,16
    9ad4:	297fffc4 	addi	r5,r5,-1
    9ad8:	3104703a 	and	r2,r6,r4
    9adc:	3946703a 	and	r3,r7,r5
    9ae0:	100d883a 	mov	r6,r2
    9ae4:	180f883a 	mov	r7,r3
    9ae8:	0201ffc4 	movi	r8,2047
    9aec:	003fa706 	br	998c <__pack_d+0x50>
    9af0:	1109c83a 	sub	r4,r2,r4
    9af4:	00800e04 	movi	r2,56
    9af8:	11004316 	blt	r2,r4,9c08 <__pack_d+0x2cc>
    9afc:	21fff804 	addi	r7,r4,-32
    9b00:	38004516 	blt	r7,zero,9c18 <__pack_d+0x2dc>
    9b04:	49d8d83a 	srl	r12,r9,r7
    9b08:	001b883a 	mov	r13,zero
    9b0c:	0023883a 	mov	r17,zero
    9b10:	01400044 	movi	r5,1
    9b14:	0025883a 	mov	r18,zero
    9b18:	38004716 	blt	r7,zero,9c38 <__pack_d+0x2fc>
    9b1c:	29d6983a 	sll	r11,r5,r7
    9b20:	0015883a 	mov	r10,zero
    9b24:	00bfffc4 	movi	r2,-1
    9b28:	5089883a 	add	r4,r10,r2
    9b2c:	588b883a 	add	r5,r11,r2
    9b30:	228d803a 	cmpltu	r6,r4,r10
    9b34:	314b883a 	add	r5,r6,r5
    9b38:	4104703a 	and	r2,r8,r4
    9b3c:	4946703a 	and	r3,r9,r5
    9b40:	10c4b03a 	or	r2,r2,r3
    9b44:	10000226 	beq	r2,zero,9b50 <__pack_d+0x214>
    9b48:	04400044 	movi	r17,1
    9b4c:	0025883a 	mov	r18,zero
    9b50:	00803fc4 	movi	r2,255
    9b54:	644eb03a 	or	r7,r12,r17
    9b58:	3892703a 	and	r9,r7,r2
    9b5c:	00802004 	movi	r2,128
    9b60:	6c90b03a 	or	r8,r13,r18
    9b64:	0015883a 	mov	r10,zero
    9b68:	48801626 	beq	r9,r2,9bc4 <__pack_d+0x288>
    9b6c:	01001fc4 	movi	r4,127
    9b70:	3905883a 	add	r2,r7,r4
    9b74:	11cd803a 	cmpltu	r6,r2,r7
    9b78:	320d883a 	add	r6,r6,r8
    9b7c:	100f883a 	mov	r7,r2
    9b80:	00840034 	movhi	r2,4096
    9b84:	10bfffc4 	addi	r2,r2,-1
    9b88:	3011883a 	mov	r8,r6
    9b8c:	0007883a 	mov	r3,zero
    9b90:	11801b36 	bltu	r2,r6,9c00 <__pack_d+0x2c4>
    9b94:	4004963a 	slli	r2,r8,24
    9b98:	3808d23a 	srli	r4,r7,8
    9b9c:	400ad23a 	srli	r5,r8,8
    9ba0:	1813883a 	mov	r9,r3
    9ba4:	1108b03a 	or	r4,r2,r4
    9ba8:	00bfffc4 	movi	r2,-1
    9bac:	00c00434 	movhi	r3,16
    9bb0:	18ffffc4 	addi	r3,r3,-1
    9bb4:	208c703a 	and	r6,r4,r2
    9bb8:	28ce703a 	and	r7,r5,r3
    9bbc:	4a01ffcc 	andi	r8,r9,2047
    9bc0:	003f7206 	br	998c <__pack_d+0x50>
    9bc4:	503fe91e 	bne	r10,zero,9b6c <__pack_d+0x230>
    9bc8:	01004004 	movi	r4,256
    9bcc:	3904703a 	and	r2,r7,r4
    9bd0:	0007883a 	mov	r3,zero
    9bd4:	10c4b03a 	or	r2,r2,r3
    9bd8:	10000626 	beq	r2,zero,9bf4 <__pack_d+0x2b8>
    9bdc:	3a45883a 	add	r2,r7,r9
    9be0:	11cd803a 	cmpltu	r6,r2,r7
    9be4:	320d883a 	add	r6,r6,r8
    9be8:	100f883a 	mov	r7,r2
    9bec:	3011883a 	mov	r8,r6
    9bf0:	0007883a 	mov	r3,zero
    9bf4:	00840034 	movhi	r2,4096
    9bf8:	10bfffc4 	addi	r2,r2,-1
    9bfc:	123fe52e 	bgeu	r2,r8,9b94 <__pack_d+0x258>
    9c00:	00c00044 	movi	r3,1
    9c04:	003fe306 	br	9b94 <__pack_d+0x258>
    9c08:	0009883a 	mov	r4,zero
    9c0c:	0013883a 	mov	r9,zero
    9c10:	000b883a 	mov	r5,zero
    9c14:	003fe406 	br	9ba8 <__pack_d+0x26c>
    9c18:	4a47883a 	add	r3,r9,r9
    9c1c:	008007c4 	movi	r2,31
    9c20:	1105c83a 	sub	r2,r2,r4
    9c24:	1886983a 	sll	r3,r3,r2
    9c28:	4118d83a 	srl	r12,r8,r4
    9c2c:	491ad83a 	srl	r13,r9,r4
    9c30:	1b18b03a 	or	r12,r3,r12
    9c34:	003fb506 	br	9b0c <__pack_d+0x1d0>
    9c38:	2806d07a 	srli	r3,r5,1
    9c3c:	008007c4 	movi	r2,31
    9c40:	1105c83a 	sub	r2,r2,r4
    9c44:	1896d83a 	srl	r11,r3,r2
    9c48:	2914983a 	sll	r10,r5,r4
    9c4c:	003fb506 	br	9b24 <__pack_d+0x1e8>

00009c50 <__unpack_d>:
    9c50:	20c00117 	ldw	r3,4(r4)
    9c54:	22400017 	ldw	r9,0(r4)
    9c58:	00800434 	movhi	r2,16
    9c5c:	10bfffc4 	addi	r2,r2,-1
    9c60:	1808d53a 	srli	r4,r3,20
    9c64:	180cd7fa 	srli	r6,r3,31
    9c68:	1894703a 	and	r10,r3,r2
    9c6c:	2201ffcc 	andi	r8,r4,2047
    9c70:	281b883a 	mov	r13,r5
    9c74:	4817883a 	mov	r11,r9
    9c78:	29800115 	stw	r6,4(r5)
    9c7c:	5019883a 	mov	r12,r10
    9c80:	40001e1e 	bne	r8,zero,9cfc <__unpack_d+0xac>
    9c84:	4a84b03a 	or	r2,r9,r10
    9c88:	10001926 	beq	r2,zero,9cf0 <__unpack_d+0xa0>
    9c8c:	4804d63a 	srli	r2,r9,24
    9c90:	500c923a 	slli	r6,r10,8
    9c94:	013f0084 	movi	r4,-1022
    9c98:	00c40034 	movhi	r3,4096
    9c9c:	18ffffc4 	addi	r3,r3,-1
    9ca0:	118cb03a 	or	r6,r2,r6
    9ca4:	008000c4 	movi	r2,3
    9ca8:	480a923a 	slli	r5,r9,8
    9cac:	68800015 	stw	r2,0(r13)
    9cb0:	69000215 	stw	r4,8(r13)
    9cb4:	19800b36 	bltu	r3,r6,9ce4 <__unpack_d+0x94>
    9cb8:	200f883a 	mov	r7,r4
    9cbc:	1811883a 	mov	r8,r3
    9cc0:	2945883a 	add	r2,r5,r5
    9cc4:	1149803a 	cmpltu	r4,r2,r5
    9cc8:	3187883a 	add	r3,r6,r6
    9ccc:	20c9883a 	add	r4,r4,r3
    9cd0:	100b883a 	mov	r5,r2
    9cd4:	200d883a 	mov	r6,r4
    9cd8:	39ffffc4 	addi	r7,r7,-1
    9cdc:	413ff82e 	bgeu	r8,r4,9cc0 <__unpack_d+0x70>
    9ce0:	69c00215 	stw	r7,8(r13)
    9ce4:	69800415 	stw	r6,16(r13)
    9ce8:	69400315 	stw	r5,12(r13)
    9cec:	f800283a 	ret
    9cf0:	00800084 	movi	r2,2
    9cf4:	28800015 	stw	r2,0(r5)
    9cf8:	f800283a 	ret
    9cfc:	0081ffc4 	movi	r2,2047
    9d00:	40800f26 	beq	r8,r2,9d40 <__unpack_d+0xf0>
    9d04:	480cd63a 	srli	r6,r9,24
    9d08:	5006923a 	slli	r3,r10,8
    9d0c:	4804923a 	slli	r2,r9,8
    9d10:	0009883a 	mov	r4,zero
    9d14:	30c6b03a 	or	r3,r6,r3
    9d18:	01440034 	movhi	r5,4096
    9d1c:	110cb03a 	or	r6,r2,r4
    9d20:	423f0044 	addi	r8,r8,-1023
    9d24:	194eb03a 	or	r7,r3,r5
    9d28:	008000c4 	movi	r2,3
    9d2c:	69c00415 	stw	r7,16(r13)
    9d30:	6a000215 	stw	r8,8(r13)
    9d34:	68800015 	stw	r2,0(r13)
    9d38:	69800315 	stw	r6,12(r13)
    9d3c:	f800283a 	ret
    9d40:	4a84b03a 	or	r2,r9,r10
    9d44:	1000031e 	bne	r2,zero,9d54 <__unpack_d+0x104>
    9d48:	00800104 	movi	r2,4
    9d4c:	28800015 	stw	r2,0(r5)
    9d50:	f800283a 	ret
    9d54:	0009883a 	mov	r4,zero
    9d58:	01400234 	movhi	r5,8
    9d5c:	4904703a 	and	r2,r9,r4
    9d60:	5146703a 	and	r3,r10,r5
    9d64:	10c4b03a 	or	r2,r2,r3
    9d68:	10000526 	beq	r2,zero,9d80 <__unpack_d+0x130>
    9d6c:	00800044 	movi	r2,1
    9d70:	68800015 	stw	r2,0(r13)
    9d74:	6b000415 	stw	r12,16(r13)
    9d78:	6ac00315 	stw	r11,12(r13)
    9d7c:	f800283a 	ret
    9d80:	68000015 	stw	zero,0(r13)
    9d84:	003ffb06 	br	9d74 <__unpack_d+0x124>

00009d88 <__fpcmp_parts_d>:
    9d88:	21800017 	ldw	r6,0(r4)
    9d8c:	00c00044 	movi	r3,1
    9d90:	19800a2e 	bgeu	r3,r6,9dbc <__fpcmp_parts_d+0x34>
    9d94:	28800017 	ldw	r2,0(r5)
    9d98:	1880082e 	bgeu	r3,r2,9dbc <__fpcmp_parts_d+0x34>
    9d9c:	00c00104 	movi	r3,4
    9da0:	30c02626 	beq	r6,r3,9e3c <__fpcmp_parts_d+0xb4>
    9da4:	10c02226 	beq	r2,r3,9e30 <__fpcmp_parts_d+0xa8>
    9da8:	00c00084 	movi	r3,2
    9dac:	30c00526 	beq	r6,r3,9dc4 <__fpcmp_parts_d+0x3c>
    9db0:	10c0071e 	bne	r2,r3,9dd0 <__fpcmp_parts_d+0x48>
    9db4:	20800117 	ldw	r2,4(r4)
    9db8:	1000091e 	bne	r2,zero,9de0 <__fpcmp_parts_d+0x58>
    9dbc:	00800044 	movi	r2,1
    9dc0:	f800283a 	ret
    9dc4:	10c01a1e 	bne	r2,r3,9e30 <__fpcmp_parts_d+0xa8>
    9dc8:	0005883a 	mov	r2,zero
    9dcc:	f800283a 	ret
    9dd0:	22000117 	ldw	r8,4(r4)
    9dd4:	28800117 	ldw	r2,4(r5)
    9dd8:	40800326 	beq	r8,r2,9de8 <__fpcmp_parts_d+0x60>
    9ddc:	403ff726 	beq	r8,zero,9dbc <__fpcmp_parts_d+0x34>
    9de0:	00bfffc4 	movi	r2,-1
    9de4:	f800283a 	ret
    9de8:	20c00217 	ldw	r3,8(r4)
    9dec:	28800217 	ldw	r2,8(r5)
    9df0:	10fffa16 	blt	r2,r3,9ddc <__fpcmp_parts_d+0x54>
    9df4:	18800916 	blt	r3,r2,9e1c <__fpcmp_parts_d+0x94>
    9df8:	21c00417 	ldw	r7,16(r4)
    9dfc:	28c00417 	ldw	r3,16(r5)
    9e00:	21800317 	ldw	r6,12(r4)
    9e04:	28800317 	ldw	r2,12(r5)
    9e08:	19fff436 	bltu	r3,r7,9ddc <__fpcmp_parts_d+0x54>
    9e0c:	38c00526 	beq	r7,r3,9e24 <__fpcmp_parts_d+0x9c>
    9e10:	38c00236 	bltu	r7,r3,9e1c <__fpcmp_parts_d+0x94>
    9e14:	19ffec1e 	bne	r3,r7,9dc8 <__fpcmp_parts_d+0x40>
    9e18:	30bfeb2e 	bgeu	r6,r2,9dc8 <__fpcmp_parts_d+0x40>
    9e1c:	403fe71e 	bne	r8,zero,9dbc <__fpcmp_parts_d+0x34>
    9e20:	003fef06 	br	9de0 <__fpcmp_parts_d+0x58>
    9e24:	11bffa2e 	bgeu	r2,r6,9e10 <__fpcmp_parts_d+0x88>
    9e28:	403fe426 	beq	r8,zero,9dbc <__fpcmp_parts_d+0x34>
    9e2c:	003fec06 	br	9de0 <__fpcmp_parts_d+0x58>
    9e30:	28800117 	ldw	r2,4(r5)
    9e34:	103fe11e 	bne	r2,zero,9dbc <__fpcmp_parts_d+0x34>
    9e38:	003fe906 	br	9de0 <__fpcmp_parts_d+0x58>
    9e3c:	11bfdd1e 	bne	r2,r6,9db4 <__fpcmp_parts_d+0x2c>
    9e40:	28c00117 	ldw	r3,4(r5)
    9e44:	20800117 	ldw	r2,4(r4)
    9e48:	1885c83a 	sub	r2,r3,r2
    9e4c:	f800283a 	ret

00009e50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9e50:	defff804 	addi	sp,sp,-32
    9e54:	dfc00715 	stw	ra,28(sp)
    9e58:	df000615 	stw	fp,24(sp)
    9e5c:	df000604 	addi	fp,sp,24
    9e60:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9e64:	e0bffc17 	ldw	r2,-16(fp)
    9e68:	1004803a 	cmplt	r2,r2,zero
    9e6c:	1000081e 	bne	r2,zero,9e90 <close+0x40>
    9e70:	e0bffc17 	ldw	r2,-16(fp)
    9e74:	10800324 	muli	r2,r2,12
    9e78:	1007883a 	mov	r3,r2
    9e7c:	00800074 	movhi	r2,1
    9e80:	10b43b04 	addi	r2,r2,-12052
    9e84:	1887883a 	add	r3,r3,r2
    9e88:	e0ffff15 	stw	r3,-4(fp)
    9e8c:	00000106 	br	9e94 <close+0x44>
    9e90:	e03fff15 	stw	zero,-4(fp)
    9e94:	e0bfff17 	ldw	r2,-4(fp)
    9e98:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9e9c:	e0bffb17 	ldw	r2,-20(fp)
    9ea0:	1005003a 	cmpeq	r2,r2,zero
    9ea4:	10001d1e 	bne	r2,zero,9f1c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9ea8:	e0bffb17 	ldw	r2,-20(fp)
    9eac:	10800017 	ldw	r2,0(r2)
    9eb0:	10800417 	ldw	r2,16(r2)
    9eb4:	1005003a 	cmpeq	r2,r2,zero
    9eb8:	1000071e 	bne	r2,zero,9ed8 <close+0x88>
    9ebc:	e0bffb17 	ldw	r2,-20(fp)
    9ec0:	10800017 	ldw	r2,0(r2)
    9ec4:	10800417 	ldw	r2,16(r2)
    9ec8:	e13ffb17 	ldw	r4,-20(fp)
    9ecc:	103ee83a 	callr	r2
    9ed0:	e0bffe15 	stw	r2,-8(fp)
    9ed4:	00000106 	br	9edc <close+0x8c>
    9ed8:	e03ffe15 	stw	zero,-8(fp)
    9edc:	e0bffe17 	ldw	r2,-8(fp)
    9ee0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9ee4:	e13ffc17 	ldw	r4,-16(fp)
    9ee8:	000a6940 	call	a694 <alt_release_fd>
    if (rval < 0)
    9eec:	e0bffa17 	ldw	r2,-24(fp)
    9ef0:	1004403a 	cmpge	r2,r2,zero
    9ef4:	1000071e 	bne	r2,zero,9f14 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9ef8:	0009f4c0 	call	9f4c <alt_get_errno>
    9efc:	e0fffa17 	ldw	r3,-24(fp)
    9f00:	00c7c83a 	sub	r3,zero,r3
    9f04:	10c00015 	stw	r3,0(r2)
      return -1;
    9f08:	00bfffc4 	movi	r2,-1
    9f0c:	e0bffd15 	stw	r2,-12(fp)
    9f10:	00000806 	br	9f34 <close+0xe4>
    }
    return 0;
    9f14:	e03ffd15 	stw	zero,-12(fp)
    9f18:	00000606 	br	9f34 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9f1c:	0009f4c0 	call	9f4c <alt_get_errno>
    9f20:	1007883a 	mov	r3,r2
    9f24:	00801444 	movi	r2,81
    9f28:	18800015 	stw	r2,0(r3)
    return -1;
    9f2c:	00bfffc4 	movi	r2,-1
    9f30:	e0bffd15 	stw	r2,-12(fp)
    9f34:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9f38:	e037883a 	mov	sp,fp
    9f3c:	dfc00117 	ldw	ra,4(sp)
    9f40:	df000017 	ldw	fp,0(sp)
    9f44:	dec00204 	addi	sp,sp,8
    9f48:	f800283a 	ret

00009f4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f4c:	defffd04 	addi	sp,sp,-12
    9f50:	dfc00215 	stw	ra,8(sp)
    9f54:	df000115 	stw	fp,4(sp)
    9f58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9f5c:	00800074 	movhi	r2,1
    9f60:	10b4d704 	addi	r2,r2,-11428
    9f64:	10800017 	ldw	r2,0(r2)
    9f68:	1005003a 	cmpeq	r2,r2,zero
    9f6c:	1000061e 	bne	r2,zero,9f88 <alt_get_errno+0x3c>
    9f70:	00800074 	movhi	r2,1
    9f74:	10b4d704 	addi	r2,r2,-11428
    9f78:	10800017 	ldw	r2,0(r2)
    9f7c:	103ee83a 	callr	r2
    9f80:	e0bfff15 	stw	r2,-4(fp)
    9f84:	00000306 	br	9f94 <alt_get_errno+0x48>
    9f88:	00800074 	movhi	r2,1
    9f8c:	10b79604 	addi	r2,r2,-8616
    9f90:	e0bfff15 	stw	r2,-4(fp)
    9f94:	e0bfff17 	ldw	r2,-4(fp)
}
    9f98:	e037883a 	mov	sp,fp
    9f9c:	dfc00117 	ldw	ra,4(sp)
    9fa0:	df000017 	ldw	fp,0(sp)
    9fa4:	dec00204 	addi	sp,sp,8
    9fa8:	f800283a 	ret

00009fac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9fac:	defffc04 	addi	sp,sp,-16
    9fb0:	df000315 	stw	fp,12(sp)
    9fb4:	df000304 	addi	fp,sp,12
    9fb8:	e13ffd15 	stw	r4,-12(fp)
    9fbc:	e17ffe15 	stw	r5,-8(fp)
    9fc0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9fc4:	e0bfff17 	ldw	r2,-4(fp)
}
    9fc8:	e037883a 	mov	sp,fp
    9fcc:	df000017 	ldw	fp,0(sp)
    9fd0:	dec00104 	addi	sp,sp,4
    9fd4:	f800283a 	ret

00009fd8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9fd8:	defff904 	addi	sp,sp,-28
    9fdc:	dfc00615 	stw	ra,24(sp)
    9fe0:	df000515 	stw	fp,20(sp)
    9fe4:	df000504 	addi	fp,sp,20
    9fe8:	e13ffc15 	stw	r4,-16(fp)
    9fec:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9ff0:	e0bffc17 	ldw	r2,-16(fp)
    9ff4:	1004803a 	cmplt	r2,r2,zero
    9ff8:	1000081e 	bne	r2,zero,a01c <fstat+0x44>
    9ffc:	e0bffc17 	ldw	r2,-16(fp)
    a000:	10800324 	muli	r2,r2,12
    a004:	1007883a 	mov	r3,r2
    a008:	00800074 	movhi	r2,1
    a00c:	10b43b04 	addi	r2,r2,-12052
    a010:	1887883a 	add	r3,r3,r2
    a014:	e0ffff15 	stw	r3,-4(fp)
    a018:	00000106 	br	a020 <fstat+0x48>
    a01c:	e03fff15 	stw	zero,-4(fp)
    a020:	e0bfff17 	ldw	r2,-4(fp)
    a024:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a028:	e0bffb17 	ldw	r2,-20(fp)
    a02c:	1005003a 	cmpeq	r2,r2,zero
    a030:	1000121e 	bne	r2,zero,a07c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a034:	e0bffb17 	ldw	r2,-20(fp)
    a038:	10800017 	ldw	r2,0(r2)
    a03c:	10800817 	ldw	r2,32(r2)
    a040:	1005003a 	cmpeq	r2,r2,zero
    a044:	1000081e 	bne	r2,zero,a068 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    a048:	e0bffb17 	ldw	r2,-20(fp)
    a04c:	10800017 	ldw	r2,0(r2)
    a050:	10800817 	ldw	r2,32(r2)
    a054:	e13ffb17 	ldw	r4,-20(fp)
    a058:	e17ffd17 	ldw	r5,-12(fp)
    a05c:	103ee83a 	callr	r2
    a060:	e0bffe15 	stw	r2,-8(fp)
    a064:	00000b06 	br	a094 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a068:	e0fffd17 	ldw	r3,-12(fp)
    a06c:	00880004 	movi	r2,8192
    a070:	18800115 	stw	r2,4(r3)
      return 0;
    a074:	e03ffe15 	stw	zero,-8(fp)
    a078:	00000606 	br	a094 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a07c:	000a0ac0 	call	a0ac <alt_get_errno>
    a080:	1007883a 	mov	r3,r2
    a084:	00801444 	movi	r2,81
    a088:	18800015 	stw	r2,0(r3)
    return -1;
    a08c:	00bfffc4 	movi	r2,-1
    a090:	e0bffe15 	stw	r2,-8(fp)
    a094:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a098:	e037883a 	mov	sp,fp
    a09c:	dfc00117 	ldw	ra,4(sp)
    a0a0:	df000017 	ldw	fp,0(sp)
    a0a4:	dec00204 	addi	sp,sp,8
    a0a8:	f800283a 	ret

0000a0ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0ac:	defffd04 	addi	sp,sp,-12
    a0b0:	dfc00215 	stw	ra,8(sp)
    a0b4:	df000115 	stw	fp,4(sp)
    a0b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a0bc:	00800074 	movhi	r2,1
    a0c0:	10b4d704 	addi	r2,r2,-11428
    a0c4:	10800017 	ldw	r2,0(r2)
    a0c8:	1005003a 	cmpeq	r2,r2,zero
    a0cc:	1000061e 	bne	r2,zero,a0e8 <alt_get_errno+0x3c>
    a0d0:	00800074 	movhi	r2,1
    a0d4:	10b4d704 	addi	r2,r2,-11428
    a0d8:	10800017 	ldw	r2,0(r2)
    a0dc:	103ee83a 	callr	r2
    a0e0:	e0bfff15 	stw	r2,-4(fp)
    a0e4:	00000306 	br	a0f4 <alt_get_errno+0x48>
    a0e8:	00800074 	movhi	r2,1
    a0ec:	10b79604 	addi	r2,r2,-8616
    a0f0:	e0bfff15 	stw	r2,-4(fp)
    a0f4:	e0bfff17 	ldw	r2,-4(fp)
}
    a0f8:	e037883a 	mov	sp,fp
    a0fc:	dfc00117 	ldw	ra,4(sp)
    a100:	df000017 	ldw	fp,0(sp)
    a104:	dec00204 	addi	sp,sp,8
    a108:	f800283a 	ret

0000a10c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a10c:	deffeb04 	addi	sp,sp,-84
    a110:	dfc01415 	stw	ra,80(sp)
    a114:	df001315 	stw	fp,76(sp)
    a118:	df001304 	addi	fp,sp,76
    a11c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a120:	e0bffd17 	ldw	r2,-12(fp)
    a124:	1004803a 	cmplt	r2,r2,zero
    a128:	1000081e 	bne	r2,zero,a14c <isatty+0x40>
    a12c:	e0bffd17 	ldw	r2,-12(fp)
    a130:	10800324 	muli	r2,r2,12
    a134:	1007883a 	mov	r3,r2
    a138:	00800074 	movhi	r2,1
    a13c:	10b43b04 	addi	r2,r2,-12052
    a140:	1887883a 	add	r3,r3,r2
    a144:	e0ffff15 	stw	r3,-4(fp)
    a148:	00000106 	br	a150 <isatty+0x44>
    a14c:	e03fff15 	stw	zero,-4(fp)
    a150:	e0bfff17 	ldw	r2,-4(fp)
    a154:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a158:	e0bfed17 	ldw	r2,-76(fp)
    a15c:	1005003a 	cmpeq	r2,r2,zero
    a160:	10000f1e 	bne	r2,zero,a1a0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a164:	e0bfed17 	ldw	r2,-76(fp)
    a168:	10800017 	ldw	r2,0(r2)
    a16c:	10800817 	ldw	r2,32(r2)
    a170:	1004c03a 	cmpne	r2,r2,zero
    a174:	1000031e 	bne	r2,zero,a184 <isatty+0x78>
    {
      return 1;
    a178:	00800044 	movi	r2,1
    a17c:	e0bffe15 	stw	r2,-8(fp)
    a180:	00000c06 	br	a1b4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a184:	e17fee04 	addi	r5,fp,-72
    a188:	e13ffd17 	ldw	r4,-12(fp)
    a18c:	0009fd80 	call	9fd8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a190:	e0bfef17 	ldw	r2,-68(fp)
    a194:	10880020 	cmpeqi	r2,r2,8192
    a198:	e0bffe15 	stw	r2,-8(fp)
    a19c:	00000506 	br	a1b4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a1a0:	000a1cc0 	call	a1cc <alt_get_errno>
    a1a4:	1007883a 	mov	r3,r2
    a1a8:	00801444 	movi	r2,81
    a1ac:	18800015 	stw	r2,0(r3)
    return 0;
    a1b0:	e03ffe15 	stw	zero,-8(fp)
    a1b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a1b8:	e037883a 	mov	sp,fp
    a1bc:	dfc00117 	ldw	ra,4(sp)
    a1c0:	df000017 	ldw	fp,0(sp)
    a1c4:	dec00204 	addi	sp,sp,8
    a1c8:	f800283a 	ret

0000a1cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a1cc:	defffd04 	addi	sp,sp,-12
    a1d0:	dfc00215 	stw	ra,8(sp)
    a1d4:	df000115 	stw	fp,4(sp)
    a1d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a1dc:	00800074 	movhi	r2,1
    a1e0:	10b4d704 	addi	r2,r2,-11428
    a1e4:	10800017 	ldw	r2,0(r2)
    a1e8:	1005003a 	cmpeq	r2,r2,zero
    a1ec:	1000061e 	bne	r2,zero,a208 <alt_get_errno+0x3c>
    a1f0:	00800074 	movhi	r2,1
    a1f4:	10b4d704 	addi	r2,r2,-11428
    a1f8:	10800017 	ldw	r2,0(r2)
    a1fc:	103ee83a 	callr	r2
    a200:	e0bfff15 	stw	r2,-4(fp)
    a204:	00000306 	br	a214 <alt_get_errno+0x48>
    a208:	00800074 	movhi	r2,1
    a20c:	10b79604 	addi	r2,r2,-8616
    a210:	e0bfff15 	stw	r2,-4(fp)
    a214:	e0bfff17 	ldw	r2,-4(fp)
}
    a218:	e037883a 	mov	sp,fp
    a21c:	dfc00117 	ldw	ra,4(sp)
    a220:	df000017 	ldw	fp,0(sp)
    a224:	dec00204 	addi	sp,sp,8
    a228:	f800283a 	ret

0000a22c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a22c:	defffe04 	addi	sp,sp,-8
    a230:	dfc00115 	stw	ra,4(sp)
    a234:	df000015 	stw	fp,0(sp)
    a238:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a23c:	01000074 	movhi	r4,1
    a240:	2134da04 	addi	r4,r4,-11416
    a244:	01400074 	movhi	r5,1
    a248:	29722404 	addi	r5,r5,-14192
    a24c:	01800074 	movhi	r6,1
    a250:	31b4da04 	addi	r6,r6,-11416
    a254:	000a2ac0 	call	a2ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a258:	01000034 	movhi	r4,0
    a25c:	21000804 	addi	r4,r4,32
    a260:	01400034 	movhi	r5,0
    a264:	29400804 	addi	r5,r5,32
    a268:	01800034 	movhi	r6,0
    a26c:	31806d04 	addi	r6,r6,436
    a270:	000a2ac0 	call	a2ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a274:	01000074 	movhi	r4,1
    a278:	21315404 	addi	r4,r4,-15024
    a27c:	01400074 	movhi	r5,1
    a280:	29715404 	addi	r5,r5,-15024
    a284:	01800074 	movhi	r6,1
    a288:	31b22404 	addi	r6,r6,-14192
    a28c:	000a2ac0 	call	a2ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a290:	000b50c0 	call	b50c <alt_dcache_flush_all>
  alt_icache_flush_all();
    a294:	000b72c0 	call	b72c <alt_icache_flush_all>
}
    a298:	e037883a 	mov	sp,fp
    a29c:	dfc00117 	ldw	ra,4(sp)
    a2a0:	df000017 	ldw	fp,0(sp)
    a2a4:	dec00204 	addi	sp,sp,8
    a2a8:	f800283a 	ret

0000a2ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a2ac:	defffc04 	addi	sp,sp,-16
    a2b0:	df000315 	stw	fp,12(sp)
    a2b4:	df000304 	addi	fp,sp,12
    a2b8:	e13ffd15 	stw	r4,-12(fp)
    a2bc:	e17ffe15 	stw	r5,-8(fp)
    a2c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a2c4:	e0fffe17 	ldw	r3,-8(fp)
    a2c8:	e0bffd17 	ldw	r2,-12(fp)
    a2cc:	18800e26 	beq	r3,r2,a308 <alt_load_section+0x5c>
  {
    while( to != end )
    a2d0:	00000a06 	br	a2fc <alt_load_section+0x50>
    {
      *to++ = *from++;
    a2d4:	e0bffd17 	ldw	r2,-12(fp)
    a2d8:	10c00017 	ldw	r3,0(r2)
    a2dc:	e0bffe17 	ldw	r2,-8(fp)
    a2e0:	10c00015 	stw	r3,0(r2)
    a2e4:	e0bffe17 	ldw	r2,-8(fp)
    a2e8:	10800104 	addi	r2,r2,4
    a2ec:	e0bffe15 	stw	r2,-8(fp)
    a2f0:	e0bffd17 	ldw	r2,-12(fp)
    a2f4:	10800104 	addi	r2,r2,4
    a2f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a2fc:	e0fffe17 	ldw	r3,-8(fp)
    a300:	e0bfff17 	ldw	r2,-4(fp)
    a304:	18bff31e 	bne	r3,r2,a2d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a308:	e037883a 	mov	sp,fp
    a30c:	df000017 	ldw	fp,0(sp)
    a310:	dec00104 	addi	sp,sp,4
    a314:	f800283a 	ret

0000a318 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a318:	defff804 	addi	sp,sp,-32
    a31c:	dfc00715 	stw	ra,28(sp)
    a320:	df000615 	stw	fp,24(sp)
    a324:	df000604 	addi	fp,sp,24
    a328:	e13ffc15 	stw	r4,-16(fp)
    a32c:	e17ffd15 	stw	r5,-12(fp)
    a330:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a334:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a338:	e0bffc17 	ldw	r2,-16(fp)
    a33c:	1004803a 	cmplt	r2,r2,zero
    a340:	1000081e 	bne	r2,zero,a364 <lseek+0x4c>
    a344:	e0bffc17 	ldw	r2,-16(fp)
    a348:	10800324 	muli	r2,r2,12
    a34c:	1007883a 	mov	r3,r2
    a350:	00800074 	movhi	r2,1
    a354:	10b43b04 	addi	r2,r2,-12052
    a358:	1887883a 	add	r3,r3,r2
    a35c:	e0ffff15 	stw	r3,-4(fp)
    a360:	00000106 	br	a368 <lseek+0x50>
    a364:	e03fff15 	stw	zero,-4(fp)
    a368:	e0bfff17 	ldw	r2,-4(fp)
    a36c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a370:	e0bffb17 	ldw	r2,-20(fp)
    a374:	1005003a 	cmpeq	r2,r2,zero
    a378:	1000111e 	bne	r2,zero,a3c0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a37c:	e0bffb17 	ldw	r2,-20(fp)
    a380:	10800017 	ldw	r2,0(r2)
    a384:	10800717 	ldw	r2,28(r2)
    a388:	1005003a 	cmpeq	r2,r2,zero
    a38c:	1000091e 	bne	r2,zero,a3b4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a390:	e0bffb17 	ldw	r2,-20(fp)
    a394:	10800017 	ldw	r2,0(r2)
    a398:	10800717 	ldw	r2,28(r2)
    a39c:	e13ffb17 	ldw	r4,-20(fp)
    a3a0:	e17ffd17 	ldw	r5,-12(fp)
    a3a4:	e1bffe17 	ldw	r6,-8(fp)
    a3a8:	103ee83a 	callr	r2
    a3ac:	e0bffa15 	stw	r2,-24(fp)
    a3b0:	00000506 	br	a3c8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a3b4:	00bfde84 	movi	r2,-134
    a3b8:	e0bffa15 	stw	r2,-24(fp)
    a3bc:	00000206 	br	a3c8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    a3c0:	00bfebc4 	movi	r2,-81
    a3c4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a3c8:	e0bffa17 	ldw	r2,-24(fp)
    a3cc:	1004403a 	cmpge	r2,r2,zero
    a3d0:	1000071e 	bne	r2,zero,a3f0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a3d4:	000a4080 	call	a408 <alt_get_errno>
    a3d8:	1007883a 	mov	r3,r2
    a3dc:	e0bffa17 	ldw	r2,-24(fp)
    a3e0:	0085c83a 	sub	r2,zero,r2
    a3e4:	18800015 	stw	r2,0(r3)
    rc = -1;
    a3e8:	00bfffc4 	movi	r2,-1
    a3ec:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a3f0:	e0bffa17 	ldw	r2,-24(fp)
}
    a3f4:	e037883a 	mov	sp,fp
    a3f8:	dfc00117 	ldw	ra,4(sp)
    a3fc:	df000017 	ldw	fp,0(sp)
    a400:	dec00204 	addi	sp,sp,8
    a404:	f800283a 	ret

0000a408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a408:	defffd04 	addi	sp,sp,-12
    a40c:	dfc00215 	stw	ra,8(sp)
    a410:	df000115 	stw	fp,4(sp)
    a414:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a418:	00800074 	movhi	r2,1
    a41c:	10b4d704 	addi	r2,r2,-11428
    a420:	10800017 	ldw	r2,0(r2)
    a424:	1005003a 	cmpeq	r2,r2,zero
    a428:	1000061e 	bne	r2,zero,a444 <alt_get_errno+0x3c>
    a42c:	00800074 	movhi	r2,1
    a430:	10b4d704 	addi	r2,r2,-11428
    a434:	10800017 	ldw	r2,0(r2)
    a438:	103ee83a 	callr	r2
    a43c:	e0bfff15 	stw	r2,-4(fp)
    a440:	00000306 	br	a450 <alt_get_errno+0x48>
    a444:	00800074 	movhi	r2,1
    a448:	10b79604 	addi	r2,r2,-8616
    a44c:	e0bfff15 	stw	r2,-4(fp)
    a450:	e0bfff17 	ldw	r2,-4(fp)
}
    a454:	e037883a 	mov	sp,fp
    a458:	dfc00117 	ldw	ra,4(sp)
    a45c:	df000017 	ldw	fp,0(sp)
    a460:	dec00204 	addi	sp,sp,8
    a464:	f800283a 	ret

0000a468 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a468:	defffd04 	addi	sp,sp,-12
    a46c:	dfc00215 	stw	ra,8(sp)
    a470:	df000115 	stw	fp,4(sp)
    a474:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a478:	0009883a 	mov	r4,zero
    a47c:	000a9600 	call	a960 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a480:	000a9940 	call	a994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a484:	01000074 	movhi	r4,1
    a488:	21321e04 	addi	r4,r4,-14216
    a48c:	01400074 	movhi	r5,1
    a490:	29721e04 	addi	r5,r5,-14216
    a494:	01800074 	movhi	r6,1
    a498:	31b21e04 	addi	r6,r6,-14216
    a49c:	000baec0 	call	baec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a4a0:	000b6640 	call	b664 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a4a4:	01000074 	movhi	r4,1
    a4a8:	212db204 	addi	r4,r4,-18744
    a4ac:	000c1440 	call	c144 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a4b0:	d122cb17 	ldw	r4,-29908(gp)
    a4b4:	d162cc17 	ldw	r5,-29904(gp)
    a4b8:	d1a2cd17 	ldw	r6,-29900(gp)
    a4bc:	00002940 	call	294 <main>
    a4c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a4c4:	01000044 	movi	r4,1
    a4c8:	0009e500 	call	9e50 <close>
  exit (result);
    a4cc:	e13fff17 	ldw	r4,-4(fp)
    a4d0:	000c1580 	call	c158 <exit>

0000a4d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a4d4:	defffe04 	addi	sp,sp,-8
    a4d8:	df000115 	stw	fp,4(sp)
    a4dc:	df000104 	addi	fp,sp,4
    a4e0:	e13fff15 	stw	r4,-4(fp)
}
    a4e4:	e037883a 	mov	sp,fp
    a4e8:	df000017 	ldw	fp,0(sp)
    a4ec:	dec00104 	addi	sp,sp,4
    a4f0:	f800283a 	ret

0000a4f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a4f4:	defffe04 	addi	sp,sp,-8
    a4f8:	df000115 	stw	fp,4(sp)
    a4fc:	df000104 	addi	fp,sp,4
    a500:	e13fff15 	stw	r4,-4(fp)
}
    a504:	e037883a 	mov	sp,fp
    a508:	df000017 	ldw	fp,0(sp)
    a50c:	dec00104 	addi	sp,sp,4
    a510:	f800283a 	ret

0000a514 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a514:	defff704 	addi	sp,sp,-36
    a518:	dfc00815 	stw	ra,32(sp)
    a51c:	df000715 	stw	fp,28(sp)
    a520:	df000704 	addi	fp,sp,28
    a524:	e13ffb15 	stw	r4,-20(fp)
    a528:	e17ffc15 	stw	r5,-16(fp)
    a52c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a530:	e0bffb17 	ldw	r2,-20(fp)
    a534:	1004803a 	cmplt	r2,r2,zero
    a538:	1000081e 	bne	r2,zero,a55c <read+0x48>
    a53c:	e0bffb17 	ldw	r2,-20(fp)
    a540:	10800324 	muli	r2,r2,12
    a544:	1007883a 	mov	r3,r2
    a548:	00800074 	movhi	r2,1
    a54c:	10b43b04 	addi	r2,r2,-12052
    a550:	1887883a 	add	r3,r3,r2
    a554:	e0ffff15 	stw	r3,-4(fp)
    a558:	00000106 	br	a560 <read+0x4c>
    a55c:	e03fff15 	stw	zero,-4(fp)
    a560:	e0bfff17 	ldw	r2,-4(fp)
    a564:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a568:	e0bffa17 	ldw	r2,-24(fp)
    a56c:	1005003a 	cmpeq	r2,r2,zero
    a570:	1000241e 	bne	r2,zero,a604 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a574:	e0bffa17 	ldw	r2,-24(fp)
    a578:	10800217 	ldw	r2,8(r2)
    a57c:	108000cc 	andi	r2,r2,3
    a580:	10800060 	cmpeqi	r2,r2,1
    a584:	10001a1e 	bne	r2,zero,a5f0 <read+0xdc>
    a588:	e0bffa17 	ldw	r2,-24(fp)
    a58c:	10800017 	ldw	r2,0(r2)
    a590:	10800517 	ldw	r2,20(r2)
    a594:	1005003a 	cmpeq	r2,r2,zero
    a598:	1000151e 	bne	r2,zero,a5f0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a59c:	e0bffa17 	ldw	r2,-24(fp)
    a5a0:	10800017 	ldw	r2,0(r2)
    a5a4:	10800517 	ldw	r2,20(r2)
    a5a8:	e17ffc17 	ldw	r5,-16(fp)
    a5ac:	e1bffd17 	ldw	r6,-12(fp)
    a5b0:	e13ffa17 	ldw	r4,-24(fp)
    a5b4:	103ee83a 	callr	r2
    a5b8:	e0bff915 	stw	r2,-28(fp)
    a5bc:	e0bff917 	ldw	r2,-28(fp)
    a5c0:	1004403a 	cmpge	r2,r2,zero
    a5c4:	1000071e 	bne	r2,zero,a5e4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a5c8:	000a6340 	call	a634 <alt_get_errno>
    a5cc:	e0fff917 	ldw	r3,-28(fp)
    a5d0:	00c7c83a 	sub	r3,zero,r3
    a5d4:	10c00015 	stw	r3,0(r2)
          return -1;
    a5d8:	00bfffc4 	movi	r2,-1
    a5dc:	e0bffe15 	stw	r2,-8(fp)
    a5e0:	00000e06 	br	a61c <read+0x108>
        }
        return rval;
    a5e4:	e0bff917 	ldw	r2,-28(fp)
    a5e8:	e0bffe15 	stw	r2,-8(fp)
    a5ec:	00000b06 	br	a61c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a5f0:	000a6340 	call	a634 <alt_get_errno>
    a5f4:	1007883a 	mov	r3,r2
    a5f8:	00800344 	movi	r2,13
    a5fc:	18800015 	stw	r2,0(r3)
    a600:	00000406 	br	a614 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a604:	000a6340 	call	a634 <alt_get_errno>
    a608:	1007883a 	mov	r3,r2
    a60c:	00801444 	movi	r2,81
    a610:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a614:	00bfffc4 	movi	r2,-1
    a618:	e0bffe15 	stw	r2,-8(fp)
    a61c:	e0bffe17 	ldw	r2,-8(fp)
}
    a620:	e037883a 	mov	sp,fp
    a624:	dfc00117 	ldw	ra,4(sp)
    a628:	df000017 	ldw	fp,0(sp)
    a62c:	dec00204 	addi	sp,sp,8
    a630:	f800283a 	ret

0000a634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a634:	defffd04 	addi	sp,sp,-12
    a638:	dfc00215 	stw	ra,8(sp)
    a63c:	df000115 	stw	fp,4(sp)
    a640:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a644:	00800074 	movhi	r2,1
    a648:	10b4d704 	addi	r2,r2,-11428
    a64c:	10800017 	ldw	r2,0(r2)
    a650:	1005003a 	cmpeq	r2,r2,zero
    a654:	1000061e 	bne	r2,zero,a670 <alt_get_errno+0x3c>
    a658:	00800074 	movhi	r2,1
    a65c:	10b4d704 	addi	r2,r2,-11428
    a660:	10800017 	ldw	r2,0(r2)
    a664:	103ee83a 	callr	r2
    a668:	e0bfff15 	stw	r2,-4(fp)
    a66c:	00000306 	br	a67c <alt_get_errno+0x48>
    a670:	00800074 	movhi	r2,1
    a674:	10b79604 	addi	r2,r2,-8616
    a678:	e0bfff15 	stw	r2,-4(fp)
    a67c:	e0bfff17 	ldw	r2,-4(fp)
}
    a680:	e037883a 	mov	sp,fp
    a684:	dfc00117 	ldw	ra,4(sp)
    a688:	df000017 	ldw	fp,0(sp)
    a68c:	dec00204 	addi	sp,sp,8
    a690:	f800283a 	ret

0000a694 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a694:	defffe04 	addi	sp,sp,-8
    a698:	df000115 	stw	fp,4(sp)
    a69c:	df000104 	addi	fp,sp,4
    a6a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a6a4:	e0bfff17 	ldw	r2,-4(fp)
    a6a8:	108000d0 	cmplti	r2,r2,3
    a6ac:	10000d1e 	bne	r2,zero,a6e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a6b0:	e0bfff17 	ldw	r2,-4(fp)
    a6b4:	00c00074 	movhi	r3,1
    a6b8:	18f43b04 	addi	r3,r3,-12052
    a6bc:	10800324 	muli	r2,r2,12
    a6c0:	10c5883a 	add	r2,r2,r3
    a6c4:	10800204 	addi	r2,r2,8
    a6c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a6cc:	e0bfff17 	ldw	r2,-4(fp)
    a6d0:	00c00074 	movhi	r3,1
    a6d4:	18f43b04 	addi	r3,r3,-12052
    a6d8:	10800324 	muli	r2,r2,12
    a6dc:	10c5883a 	add	r2,r2,r3
    a6e0:	10000015 	stw	zero,0(r2)
  }
}
    a6e4:	e037883a 	mov	sp,fp
    a6e8:	df000017 	ldw	fp,0(sp)
    a6ec:	dec00104 	addi	sp,sp,4
    a6f0:	f800283a 	ret

0000a6f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a6f4:	defff804 	addi	sp,sp,-32
    a6f8:	df000715 	stw	fp,28(sp)
    a6fc:	df000704 	addi	fp,sp,28
    a700:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a704:	0005303a 	rdctl	r2,status
    a708:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a70c:	e0fffb17 	ldw	r3,-20(fp)
    a710:	00bfff84 	movi	r2,-2
    a714:	1884703a 	and	r2,r3,r2
    a718:	1001703a 	wrctl	status,r2
  
  return context;
    a71c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a720:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a724:	d0a00c17 	ldw	r2,-32720(gp)
    a728:	10c000c4 	addi	r3,r2,3
    a72c:	00bfff04 	movi	r2,-4
    a730:	1884703a 	and	r2,r3,r2
    a734:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a738:	d0e00c17 	ldw	r3,-32720(gp)
    a73c:	e0bffe17 	ldw	r2,-8(fp)
    a740:	1887883a 	add	r3,r3,r2
    a744:	00804034 	movhi	r2,256
    a748:	10800004 	addi	r2,r2,0
    a74c:	10c0072e 	bgeu	r2,r3,a76c <sbrk+0x78>
    a750:	e0bffd17 	ldw	r2,-12(fp)
    a754:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a758:	e0bffa17 	ldw	r2,-24(fp)
    a75c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a760:	00bfffc4 	movi	r2,-1
    a764:	e0bfff15 	stw	r2,-4(fp)
    a768:	00000c06 	br	a79c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a76c:	d0a00c17 	ldw	r2,-32720(gp)
    a770:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a774:	d0e00c17 	ldw	r3,-32720(gp)
    a778:	e0bffe17 	ldw	r2,-8(fp)
    a77c:	1885883a 	add	r2,r3,r2
    a780:	d0a00c15 	stw	r2,-32720(gp)
    a784:	e0bffd17 	ldw	r2,-12(fp)
    a788:	e0bff915 	stw	r2,-28(fp)
    a78c:	e0bff917 	ldw	r2,-28(fp)
    a790:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a794:	e0bffc17 	ldw	r2,-16(fp)
    a798:	e0bfff15 	stw	r2,-4(fp)
    a79c:	e0bfff17 	ldw	r2,-4(fp)
} 
    a7a0:	e037883a 	mov	sp,fp
    a7a4:	df000017 	ldw	fp,0(sp)
    a7a8:	dec00104 	addi	sp,sp,4
    a7ac:	f800283a 	ret

0000a7b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    a7b0:	defffd04 	addi	sp,sp,-12
    a7b4:	dfc00215 	stw	ra,8(sp)
    a7b8:	df000115 	stw	fp,4(sp)
    a7bc:	df000104 	addi	fp,sp,4
    a7c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    a7c4:	e13fff17 	ldw	r4,-4(fp)
    a7c8:	000b3c00 	call	b3c0 <alt_busy_sleep>
}
    a7cc:	e037883a 	mov	sp,fp
    a7d0:	dfc00117 	ldw	ra,4(sp)
    a7d4:	df000017 	ldw	fp,0(sp)
    a7d8:	dec00204 	addi	sp,sp,8
    a7dc:	f800283a 	ret

0000a7e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a7e0:	defff704 	addi	sp,sp,-36
    a7e4:	dfc00815 	stw	ra,32(sp)
    a7e8:	df000715 	stw	fp,28(sp)
    a7ec:	df000704 	addi	fp,sp,28
    a7f0:	e13ffb15 	stw	r4,-20(fp)
    a7f4:	e17ffc15 	stw	r5,-16(fp)
    a7f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a7fc:	e0bffb17 	ldw	r2,-20(fp)
    a800:	1004803a 	cmplt	r2,r2,zero
    a804:	1000081e 	bne	r2,zero,a828 <write+0x48>
    a808:	e0bffb17 	ldw	r2,-20(fp)
    a80c:	10800324 	muli	r2,r2,12
    a810:	1007883a 	mov	r3,r2
    a814:	00800074 	movhi	r2,1
    a818:	10b43b04 	addi	r2,r2,-12052
    a81c:	1887883a 	add	r3,r3,r2
    a820:	e0ffff15 	stw	r3,-4(fp)
    a824:	00000106 	br	a82c <write+0x4c>
    a828:	e03fff15 	stw	zero,-4(fp)
    a82c:	e0bfff17 	ldw	r2,-4(fp)
    a830:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a834:	e0bffa17 	ldw	r2,-24(fp)
    a838:	1005003a 	cmpeq	r2,r2,zero
    a83c:	1000241e 	bne	r2,zero,a8d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a840:	e0bffa17 	ldw	r2,-24(fp)
    a844:	10800217 	ldw	r2,8(r2)
    a848:	108000cc 	andi	r2,r2,3
    a84c:	1005003a 	cmpeq	r2,r2,zero
    a850:	10001a1e 	bne	r2,zero,a8bc <write+0xdc>
    a854:	e0bffa17 	ldw	r2,-24(fp)
    a858:	10800017 	ldw	r2,0(r2)
    a85c:	10800617 	ldw	r2,24(r2)
    a860:	1005003a 	cmpeq	r2,r2,zero
    a864:	1000151e 	bne	r2,zero,a8bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a868:	e0bffa17 	ldw	r2,-24(fp)
    a86c:	10800017 	ldw	r2,0(r2)
    a870:	10800617 	ldw	r2,24(r2)
    a874:	e17ffc17 	ldw	r5,-16(fp)
    a878:	e1bffd17 	ldw	r6,-12(fp)
    a87c:	e13ffa17 	ldw	r4,-24(fp)
    a880:	103ee83a 	callr	r2
    a884:	e0bff915 	stw	r2,-28(fp)
    a888:	e0bff917 	ldw	r2,-28(fp)
    a88c:	1004403a 	cmpge	r2,r2,zero
    a890:	1000071e 	bne	r2,zero,a8b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a894:	000a9000 	call	a900 <alt_get_errno>
    a898:	e0fff917 	ldw	r3,-28(fp)
    a89c:	00c7c83a 	sub	r3,zero,r3
    a8a0:	10c00015 	stw	r3,0(r2)
        return -1;
    a8a4:	00bfffc4 	movi	r2,-1
    a8a8:	e0bffe15 	stw	r2,-8(fp)
    a8ac:	00000e06 	br	a8e8 <write+0x108>
      }
      return rval;
    a8b0:	e0bff917 	ldw	r2,-28(fp)
    a8b4:	e0bffe15 	stw	r2,-8(fp)
    a8b8:	00000b06 	br	a8e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a8bc:	000a9000 	call	a900 <alt_get_errno>
    a8c0:	1007883a 	mov	r3,r2
    a8c4:	00800344 	movi	r2,13
    a8c8:	18800015 	stw	r2,0(r3)
    a8cc:	00000406 	br	a8e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a8d0:	000a9000 	call	a900 <alt_get_errno>
    a8d4:	1007883a 	mov	r3,r2
    a8d8:	00801444 	movi	r2,81
    a8dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a8e0:	00bfffc4 	movi	r2,-1
    a8e4:	e0bffe15 	stw	r2,-8(fp)
    a8e8:	e0bffe17 	ldw	r2,-8(fp)
}
    a8ec:	e037883a 	mov	sp,fp
    a8f0:	dfc00117 	ldw	ra,4(sp)
    a8f4:	df000017 	ldw	fp,0(sp)
    a8f8:	dec00204 	addi	sp,sp,8
    a8fc:	f800283a 	ret

0000a900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a900:	defffd04 	addi	sp,sp,-12
    a904:	dfc00215 	stw	ra,8(sp)
    a908:	df000115 	stw	fp,4(sp)
    a90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a910:	00800074 	movhi	r2,1
    a914:	10b4d704 	addi	r2,r2,-11428
    a918:	10800017 	ldw	r2,0(r2)
    a91c:	1005003a 	cmpeq	r2,r2,zero
    a920:	1000061e 	bne	r2,zero,a93c <alt_get_errno+0x3c>
    a924:	00800074 	movhi	r2,1
    a928:	10b4d704 	addi	r2,r2,-11428
    a92c:	10800017 	ldw	r2,0(r2)
    a930:	103ee83a 	callr	r2
    a934:	e0bfff15 	stw	r2,-4(fp)
    a938:	00000306 	br	a948 <alt_get_errno+0x48>
    a93c:	00800074 	movhi	r2,1
    a940:	10b79604 	addi	r2,r2,-8616
    a944:	e0bfff15 	stw	r2,-4(fp)
    a948:	e0bfff17 	ldw	r2,-4(fp)
}
    a94c:	e037883a 	mov	sp,fp
    a950:	dfc00117 	ldw	ra,4(sp)
    a954:	df000017 	ldw	fp,0(sp)
    a958:	dec00204 	addi	sp,sp,8
    a95c:	f800283a 	ret

0000a960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a960:	defffd04 	addi	sp,sp,-12
    a964:	dfc00215 	stw	ra,8(sp)
    a968:	df000115 	stw	fp,4(sp)
    a96c:	df000104 	addi	fp,sp,4
    a970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    a974:	000be280 	call	be28 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a978:	00800044 	movi	r2,1
    a97c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a980:	e037883a 	mov	sp,fp
    a984:	dfc00117 	ldw	ra,4(sp)
    a988:	df000017 	ldw	fp,0(sp)
    a98c:	dec00204 	addi	sp,sp,8
    a990:	f800283a 	ret

0000a994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a994:	defffe04 	addi	sp,sp,-8
    a998:	dfc00115 	stw	ra,4(sp)
    a99c:	df000015 	stw	fp,0(sp)
    a9a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    a9a4:	01000074 	movhi	r4,1
    a9a8:	2134a504 	addi	r4,r4,-11628
    a9ac:	000b883a 	mov	r5,zero
    a9b0:	000d883a 	mov	r6,zero
    a9b4:	000ab080 	call	ab08 <altera_avalon_uart_init>
    a9b8:	01000074 	movhi	r4,1
    a9bc:	21349b04 	addi	r4,r4,-11668
    a9c0:	000a9d80 	call	a9d8 <alt_dev_reg>
}
    a9c4:	e037883a 	mov	sp,fp
    a9c8:	dfc00117 	ldw	ra,4(sp)
    a9cc:	df000017 	ldw	fp,0(sp)
    a9d0:	dec00204 	addi	sp,sp,8
    a9d4:	f800283a 	ret

0000a9d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a9d8:	defffd04 	addi	sp,sp,-12
    a9dc:	dfc00215 	stw	ra,8(sp)
    a9e0:	df000115 	stw	fp,4(sp)
    a9e4:	df000104 	addi	fp,sp,4
    a9e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a9ec:	e13fff17 	ldw	r4,-4(fp)
    a9f0:	01400074 	movhi	r5,1
    a9f4:	2974d404 	addi	r5,r5,-11440
    a9f8:	000b5500 	call	b550 <alt_dev_llist_insert>
}
    a9fc:	e037883a 	mov	sp,fp
    aa00:	dfc00117 	ldw	ra,4(sp)
    aa04:	df000017 	ldw	fp,0(sp)
    aa08:	dec00204 	addi	sp,sp,8
    aa0c:	f800283a 	ret

0000aa10 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    aa10:	defffa04 	addi	sp,sp,-24
    aa14:	dfc00515 	stw	ra,20(sp)
    aa18:	df000415 	stw	fp,16(sp)
    aa1c:	df000404 	addi	fp,sp,16
    aa20:	e13ffd15 	stw	r4,-12(fp)
    aa24:	e17ffe15 	stw	r5,-8(fp)
    aa28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    aa2c:	e0bffd17 	ldw	r2,-12(fp)
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    aa38:	e0bffc17 	ldw	r2,-16(fp)
    aa3c:	11000a04 	addi	r4,r2,40
    aa40:	e0bffd17 	ldw	r2,-12(fp)
    aa44:	11c00217 	ldw	r7,8(r2)
    aa48:	e17ffe17 	ldw	r5,-8(fp)
    aa4c:	e1bfff17 	ldw	r6,-4(fp)
    aa50:	000af080 	call	af08 <altera_avalon_uart_read>
      fd->fd_flags);
}
    aa54:	e037883a 	mov	sp,fp
    aa58:	dfc00117 	ldw	ra,4(sp)
    aa5c:	df000017 	ldw	fp,0(sp)
    aa60:	dec00204 	addi	sp,sp,8
    aa64:	f800283a 	ret

0000aa68 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    aa68:	defffa04 	addi	sp,sp,-24
    aa6c:	dfc00515 	stw	ra,20(sp)
    aa70:	df000415 	stw	fp,16(sp)
    aa74:	df000404 	addi	fp,sp,16
    aa78:	e13ffd15 	stw	r4,-12(fp)
    aa7c:	e17ffe15 	stw	r5,-8(fp)
    aa80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    aa84:	e0bffd17 	ldw	r2,-12(fp)
    aa88:	10800017 	ldw	r2,0(r2)
    aa8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    aa90:	e0bffc17 	ldw	r2,-16(fp)
    aa94:	11000a04 	addi	r4,r2,40
    aa98:	e0bffd17 	ldw	r2,-12(fp)
    aa9c:	11c00217 	ldw	r7,8(r2)
    aaa0:	e17ffe17 	ldw	r5,-8(fp)
    aaa4:	e1bfff17 	ldw	r6,-4(fp)
    aaa8:	000b1980 	call	b198 <altera_avalon_uart_write>
      fd->fd_flags);
}
    aaac:	e037883a 	mov	sp,fp
    aab0:	dfc00117 	ldw	ra,4(sp)
    aab4:	df000017 	ldw	fp,0(sp)
    aab8:	dec00204 	addi	sp,sp,8
    aabc:	f800283a 	ret

0000aac0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    aac0:	defffc04 	addi	sp,sp,-16
    aac4:	dfc00315 	stw	ra,12(sp)
    aac8:	df000215 	stw	fp,8(sp)
    aacc:	df000204 	addi	fp,sp,8
    aad0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    aad4:	e0bfff17 	ldw	r2,-4(fp)
    aad8:	10800017 	ldw	r2,0(r2)
    aadc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    aae0:	e0bffe17 	ldw	r2,-8(fp)
    aae4:	11000a04 	addi	r4,r2,40
    aae8:	e0bfff17 	ldw	r2,-4(fp)
    aaec:	11400217 	ldw	r5,8(r2)
    aaf0:	000aea80 	call	aea8 <altera_avalon_uart_close>
}
    aaf4:	e037883a 	mov	sp,fp
    aaf8:	dfc00117 	ldw	ra,4(sp)
    aafc:	df000017 	ldw	fp,0(sp)
    ab00:	dec00204 	addi	sp,sp,8
    ab04:	f800283a 	ret

0000ab08 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    ab08:	defff704 	addi	sp,sp,-36
    ab0c:	dfc00815 	stw	ra,32(sp)
    ab10:	df000715 	stw	fp,28(sp)
    ab14:	df000704 	addi	fp,sp,28
    ab18:	e13ffc15 	stw	r4,-16(fp)
    ab1c:	e17ffd15 	stw	r5,-12(fp)
    ab20:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    ab24:	e0bffc17 	ldw	r2,-16(fp)
    ab28:	10800017 	ldw	r2,0(r2)
    ab2c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    ab30:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    ab34:	1004c03a 	cmpne	r2,r2,zero
    ab38:	1000061e 	bne	r2,zero,ab54 <altera_avalon_uart_init+0x4c>
    ab3c:	0005883a 	mov	r2,zero
    ab40:	1004c03a 	cmpne	r2,r2,zero
    ab44:	1000031e 	bne	r2,zero,ab54 <altera_avalon_uart_init+0x4c>
    ab48:	0005883a 	mov	r2,zero
    ab4c:	1005003a 	cmpeq	r2,r2,zero
    ab50:	1000031e 	bne	r2,zero,ab60 <altera_avalon_uart_init+0x58>
    ab54:	00800044 	movi	r2,1
    ab58:	e0bfff15 	stw	r2,-4(fp)
    ab5c:	00000106 	br	ab64 <altera_avalon_uart_init+0x5c>
    ab60:	e03fff15 	stw	zero,-4(fp)
    ab64:	e0bfff17 	ldw	r2,-4(fp)
    ab68:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    ab6c:	e0bffa17 	ldw	r2,-24(fp)
    ab70:	1004c03a 	cmpne	r2,r2,zero
    ab74:	1000111e 	bne	r2,zero,abbc <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    ab78:	e0fffc17 	ldw	r3,-16(fp)
    ab7c:	00832004 	movi	r2,3200
    ab80:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    ab84:	e0bffb17 	ldw	r2,-20(fp)
    ab88:	11000304 	addi	r4,r2,12
    ab8c:	e0bffc17 	ldw	r2,-16(fp)
    ab90:	10800117 	ldw	r2,4(r2)
    ab94:	1007883a 	mov	r3,r2
    ab98:	2005883a 	mov	r2,r4
    ab9c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    aba0:	d8000015 	stw	zero,0(sp)
    aba4:	e13ffd17 	ldw	r4,-12(fp)
    aba8:	e17ffe17 	ldw	r5,-8(fp)
    abac:	01800074 	movhi	r6,1
    abb0:	31aaf404 	addi	r6,r6,-21552
    abb4:	e1fffc17 	ldw	r7,-16(fp)
    abb8:	000b75c0 	call	b75c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    abbc:	e037883a 	mov	sp,fp
    abc0:	dfc00117 	ldw	ra,4(sp)
    abc4:	df000017 	ldw	fp,0(sp)
    abc8:	dec00204 	addi	sp,sp,8
    abcc:	f800283a 	ret

0000abd0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    abd0:	defffa04 	addi	sp,sp,-24
    abd4:	dfc00515 	stw	ra,20(sp)
    abd8:	df000415 	stw	fp,16(sp)
    abdc:	df000404 	addi	fp,sp,16
    abe0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    abe4:	e0bfff17 	ldw	r2,-4(fp)
    abe8:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    abec:	e0bffd17 	ldw	r2,-12(fp)
    abf0:	10800017 	ldw	r2,0(r2)
    abf4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    abf8:	e0bffc17 	ldw	r2,-16(fp)
    abfc:	10800204 	addi	r2,r2,8
    ac00:	10800037 	ldwio	r2,0(r2)
    ac04:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    ac08:	e0bffc17 	ldw	r2,-16(fp)
    ac0c:	10800204 	addi	r2,r2,8
    ac10:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    ac14:	e0bffc17 	ldw	r2,-16(fp)
    ac18:	10800204 	addi	r2,r2,8
    ac1c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    ac20:	e0bffe17 	ldw	r2,-8(fp)
    ac24:	1080200c 	andi	r2,r2,128
    ac28:	1005003a 	cmpeq	r2,r2,zero
    ac2c:	1000031e 	bne	r2,zero,ac3c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    ac30:	e13ffd17 	ldw	r4,-12(fp)
    ac34:	e17ffe17 	ldw	r5,-8(fp)
    ac38:	000ac6c0 	call	ac6c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    ac3c:	e0bffe17 	ldw	r2,-8(fp)
    ac40:	1081100c 	andi	r2,r2,1088
    ac44:	1005003a 	cmpeq	r2,r2,zero
    ac48:	1000031e 	bne	r2,zero,ac58 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    ac4c:	e13ffd17 	ldw	r4,-12(fp)
    ac50:	e17ffe17 	ldw	r5,-8(fp)
    ac54:	000ad4c0 	call	ad4c <altera_avalon_uart_txirq>
  }
  

}
    ac58:	e037883a 	mov	sp,fp
    ac5c:	dfc00117 	ldw	ra,4(sp)
    ac60:	df000017 	ldw	fp,0(sp)
    ac64:	dec00204 	addi	sp,sp,8
    ac68:	f800283a 	ret

0000ac6c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    ac6c:	defffc04 	addi	sp,sp,-16
    ac70:	df000315 	stw	fp,12(sp)
    ac74:	df000304 	addi	fp,sp,12
    ac78:	e13ffe15 	stw	r4,-8(fp)
    ac7c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    ac80:	e0bfff17 	ldw	r2,-4(fp)
    ac84:	108000cc 	andi	r2,r2,3
    ac88:	1004c03a 	cmpne	r2,r2,zero
    ac8c:	10002b1e 	bne	r2,zero,ad3c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    ac90:	e0bffe17 	ldw	r2,-8(fp)
    ac94:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    ac98:	e0bffe17 	ldw	r2,-8(fp)
    ac9c:	10800317 	ldw	r2,12(r2)
    aca0:	10800044 	addi	r2,r2,1
    aca4:	10800fcc 	andi	r2,r2,63
    aca8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    acac:	e0bffe17 	ldw	r2,-8(fp)
    acb0:	11000317 	ldw	r4,12(r2)
    acb4:	e0bffe17 	ldw	r2,-8(fp)
    acb8:	10800017 	ldw	r2,0(r2)
    acbc:	10800037 	ldwio	r2,0(r2)
    acc0:	1007883a 	mov	r3,r2
    acc4:	e0bffe17 	ldw	r2,-8(fp)
    acc8:	2085883a 	add	r2,r4,r2
    accc:	10800704 	addi	r2,r2,28
    acd0:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    acd4:	e0fffe17 	ldw	r3,-8(fp)
    acd8:	e0bffd17 	ldw	r2,-12(fp)
    acdc:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    ace0:	e0bffe17 	ldw	r2,-8(fp)
    ace4:	10800317 	ldw	r2,12(r2)
    ace8:	10800044 	addi	r2,r2,1
    acec:	10800fcc 	andi	r2,r2,63
    acf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    acf4:	e0bffe17 	ldw	r2,-8(fp)
    acf8:	10c00217 	ldw	r3,8(r2)
    acfc:	e0bffd17 	ldw	r2,-12(fp)
    ad00:	18800e1e 	bne	r3,r2,ad3c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    ad04:	e0bffe17 	ldw	r2,-8(fp)
    ad08:	10c00117 	ldw	r3,4(r2)
    ad0c:	00bfdfc4 	movi	r2,-129
    ad10:	1886703a 	and	r3,r3,r2
    ad14:	e0bffe17 	ldw	r2,-8(fp)
    ad18:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    ad1c:	e0bffe17 	ldw	r2,-8(fp)
    ad20:	10800017 	ldw	r2,0(r2)
    ad24:	11000304 	addi	r4,r2,12
    ad28:	e0bffe17 	ldw	r2,-8(fp)
    ad2c:	10800117 	ldw	r2,4(r2)
    ad30:	1007883a 	mov	r3,r2
    ad34:	2005883a 	mov	r2,r4
    ad38:	10c00035 	stwio	r3,0(r2)
  }   
}
    ad3c:	e037883a 	mov	sp,fp
    ad40:	df000017 	ldw	fp,0(sp)
    ad44:	dec00104 	addi	sp,sp,4
    ad48:	f800283a 	ret

0000ad4c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    ad4c:	defffd04 	addi	sp,sp,-12
    ad50:	df000215 	stw	fp,8(sp)
    ad54:	df000204 	addi	fp,sp,8
    ad58:	e13ffe15 	stw	r4,-8(fp)
    ad5c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    ad60:	e0bffe17 	ldw	r2,-8(fp)
    ad64:	10c00417 	ldw	r3,16(r2)
    ad68:	e0bffe17 	ldw	r2,-8(fp)
    ad6c:	10800517 	ldw	r2,20(r2)
    ad70:	18803626 	beq	r3,r2,ae4c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    ad74:	e0bffe17 	ldw	r2,-8(fp)
    ad78:	10800617 	ldw	r2,24(r2)
    ad7c:	1080008c 	andi	r2,r2,2
    ad80:	1005003a 	cmpeq	r2,r2,zero
    ad84:	1000041e 	bne	r2,zero,ad98 <altera_avalon_uart_txirq+0x4c>
    ad88:	e0bfff17 	ldw	r2,-4(fp)
    ad8c:	1082000c 	andi	r2,r2,2048
    ad90:	1005003a 	cmpeq	r2,r2,zero
    ad94:	10001e1e 	bne	r2,zero,ae10 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    ad98:	e0bffe17 	ldw	r2,-8(fp)
    ad9c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    ada0:	e0bffe17 	ldw	r2,-8(fp)
    ada4:	10800017 	ldw	r2,0(r2)
    ada8:	11000104 	addi	r4,r2,4
    adac:	e0bffe17 	ldw	r2,-8(fp)
    adb0:	10c00417 	ldw	r3,16(r2)
    adb4:	e0bffe17 	ldw	r2,-8(fp)
    adb8:	1885883a 	add	r2,r3,r2
    adbc:	10801704 	addi	r2,r2,92
    adc0:	10800003 	ldbu	r2,0(r2)
    adc4:	10c03fcc 	andi	r3,r2,255
    adc8:	2005883a 	mov	r2,r4
    adcc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    add0:	e0bffe17 	ldw	r2,-8(fp)
    add4:	10800417 	ldw	r2,16(r2)
    add8:	10c00044 	addi	r3,r2,1
    addc:	e0bffe17 	ldw	r2,-8(fp)
    ade0:	10c00415 	stw	r3,16(r2)
    ade4:	e0bffe17 	ldw	r2,-8(fp)
    ade8:	10800417 	ldw	r2,16(r2)
    adec:	10c00fcc 	andi	r3,r2,63
    adf0:	e0bffe17 	ldw	r2,-8(fp)
    adf4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    adf8:	e0bffe17 	ldw	r2,-8(fp)
    adfc:	10800117 	ldw	r2,4(r2)
    ae00:	10c01014 	ori	r3,r2,64
    ae04:	e0bffe17 	ldw	r2,-8(fp)
    ae08:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    ae0c:	00000f06 	br	ae4c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    ae10:	e0bffe17 	ldw	r2,-8(fp)
    ae14:	10800017 	ldw	r2,0(r2)
    ae18:	10800204 	addi	r2,r2,8
    ae1c:	10800037 	ldwio	r2,0(r2)
    ae20:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    ae24:	e0bfff17 	ldw	r2,-4(fp)
    ae28:	1082000c 	andi	r2,r2,2048
    ae2c:	1004c03a 	cmpne	r2,r2,zero
    ae30:	1000061e 	bne	r2,zero,ae4c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    ae34:	e0bffe17 	ldw	r2,-8(fp)
    ae38:	10c00117 	ldw	r3,4(r2)
    ae3c:	00bfefc4 	movi	r2,-65
    ae40:	1886703a 	and	r3,r3,r2
    ae44:	e0bffe17 	ldw	r2,-8(fp)
    ae48:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    ae4c:	e0bffe17 	ldw	r2,-8(fp)
    ae50:	10c00417 	ldw	r3,16(r2)
    ae54:	e0bffe17 	ldw	r2,-8(fp)
    ae58:	10800517 	ldw	r2,20(r2)
    ae5c:	1880061e 	bne	r3,r2,ae78 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    ae60:	e0bffe17 	ldw	r2,-8(fp)
    ae64:	10c00117 	ldw	r3,4(r2)
    ae68:	00beefc4 	movi	r2,-1089
    ae6c:	1886703a 	and	r3,r3,r2
    ae70:	e0bffe17 	ldw	r2,-8(fp)
    ae74:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ae78:	e0bffe17 	ldw	r2,-8(fp)
    ae7c:	10800017 	ldw	r2,0(r2)
    ae80:	11000304 	addi	r4,r2,12
    ae84:	e0bffe17 	ldw	r2,-8(fp)
    ae88:	10800117 	ldw	r2,4(r2)
    ae8c:	1007883a 	mov	r3,r2
    ae90:	2005883a 	mov	r2,r4
    ae94:	10c00035 	stwio	r3,0(r2)
}
    ae98:	e037883a 	mov	sp,fp
    ae9c:	df000017 	ldw	fp,0(sp)
    aea0:	dec00104 	addi	sp,sp,4
    aea4:	f800283a 	ret

0000aea8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    aea8:	defffc04 	addi	sp,sp,-16
    aeac:	df000315 	stw	fp,12(sp)
    aeb0:	df000304 	addi	fp,sp,12
    aeb4:	e13ffd15 	stw	r4,-12(fp)
    aeb8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    aebc:	00000706 	br	aedc <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    aec0:	e0bffe17 	ldw	r2,-8(fp)
    aec4:	1090000c 	andi	r2,r2,16384
    aec8:	1005003a 	cmpeq	r2,r2,zero
    aecc:	1000031e 	bne	r2,zero,aedc <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    aed0:	00bffd44 	movi	r2,-11
    aed4:	e0bfff15 	stw	r2,-4(fp)
    aed8:	00000606 	br	aef4 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    aedc:	e0bffd17 	ldw	r2,-12(fp)
    aee0:	10c00417 	ldw	r3,16(r2)
    aee4:	e0bffd17 	ldw	r2,-12(fp)
    aee8:	10800517 	ldw	r2,20(r2)
    aeec:	18bff41e 	bne	r3,r2,aec0 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    aef0:	e03fff15 	stw	zero,-4(fp)
    aef4:	e0bfff17 	ldw	r2,-4(fp)
}
    aef8:	e037883a 	mov	sp,fp
    aefc:	df000017 	ldw	fp,0(sp)
    af00:	dec00104 	addi	sp,sp,4
    af04:	f800283a 	ret

0000af08 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    af08:	defff004 	addi	sp,sp,-64
    af0c:	dfc00f15 	stw	ra,60(sp)
    af10:	df000e15 	stw	fp,56(sp)
    af14:	df000e04 	addi	fp,sp,56
    af18:	e13ffb15 	stw	r4,-20(fp)
    af1c:	e17ffc15 	stw	r5,-16(fp)
    af20:	e1bffd15 	stw	r6,-12(fp)
    af24:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    af28:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    af2c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    af30:	e0bffe17 	ldw	r2,-8(fp)
    af34:	1090000c 	andi	r2,r2,16384
    af38:	1005003a 	cmpeq	r2,r2,zero
    af3c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    af40:	e0bffb17 	ldw	r2,-20(fp)
    af44:	10800217 	ldw	r2,8(r2)
    af48:	10800044 	addi	r2,r2,1
    af4c:	10800fcc 	andi	r2,r2,63
    af50:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    af54:	00001906 	br	afbc <altera_avalon_uart_read+0xb4>
    {
      count++;
    af58:	e0bff617 	ldw	r2,-40(fp)
    af5c:	10800044 	addi	r2,r2,1
    af60:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    af64:	e0bffb17 	ldw	r2,-20(fp)
    af68:	10c00217 	ldw	r3,8(r2)
    af6c:	e0bffb17 	ldw	r2,-20(fp)
    af70:	1885883a 	add	r2,r3,r2
    af74:	10800704 	addi	r2,r2,28
    af78:	10800003 	ldbu	r2,0(r2)
    af7c:	1007883a 	mov	r3,r2
    af80:	e0bffc17 	ldw	r2,-16(fp)
    af84:	10c00005 	stb	r3,0(r2)
    af88:	e0bffc17 	ldw	r2,-16(fp)
    af8c:	10800044 	addi	r2,r2,1
    af90:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    af94:	e0bffb17 	ldw	r2,-20(fp)
    af98:	10800217 	ldw	r2,8(r2)
    af9c:	10c00044 	addi	r3,r2,1
    afa0:	e0bffb17 	ldw	r2,-20(fp)
    afa4:	10c00215 	stw	r3,8(r2)
    afa8:	e0bffb17 	ldw	r2,-20(fp)
    afac:	10800217 	ldw	r2,8(r2)
    afb0:	10c00fcc 	andi	r3,r2,63
    afb4:	e0bffb17 	ldw	r2,-20(fp)
    afb8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    afbc:	e0fff617 	ldw	r3,-40(fp)
    afc0:	e0bffd17 	ldw	r2,-12(fp)
    afc4:	1880050e 	bge	r3,r2,afdc <altera_avalon_uart_read+0xd4>
    afc8:	e0bffb17 	ldw	r2,-20(fp)
    afcc:	10c00217 	ldw	r3,8(r2)
    afd0:	e0bffb17 	ldw	r2,-20(fp)
    afd4:	10800317 	ldw	r2,12(r2)
    afd8:	18bfdf1e 	bne	r3,r2,af58 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    afdc:	e0bff617 	ldw	r2,-40(fp)
    afe0:	1004c03a 	cmpne	r2,r2,zero
    afe4:	1000271e 	bne	r2,zero,b084 <altera_avalon_uart_read+0x17c>
    afe8:	e0bffb17 	ldw	r2,-20(fp)
    afec:	10c00217 	ldw	r3,8(r2)
    aff0:	e0bffb17 	ldw	r2,-20(fp)
    aff4:	10800317 	ldw	r2,12(r2)
    aff8:	1880221e 	bne	r3,r2,b084 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    affc:	e0bff917 	ldw	r2,-28(fp)
    b000:	1004c03a 	cmpne	r2,r2,zero
    b004:	1000061e 	bne	r2,zero,b020 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    b008:	000b1380 	call	b138 <alt_get_errno>
    b00c:	00c002c4 	movi	r3,11
    b010:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    b014:	00800044 	movi	r2,1
    b018:	e0bff705 	stb	r2,-36(fp)
        break;
    b01c:	00001f06 	br	b09c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b020:	0005303a 	rdctl	r2,status
    b024:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b028:	e0fff517 	ldw	r3,-44(fp)
    b02c:	00bfff84 	movi	r2,-2
    b030:	1884703a 	and	r2,r3,r2
    b034:	1001703a 	wrctl	status,r2
  
  return context;
    b038:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    b03c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b040:	e0bffb17 	ldw	r2,-20(fp)
    b044:	10800117 	ldw	r2,4(r2)
    b048:	10c02014 	ori	r3,r2,128
    b04c:	e0bffb17 	ldw	r2,-20(fp)
    b050:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b054:	e0bffb17 	ldw	r2,-20(fp)
    b058:	10800017 	ldw	r2,0(r2)
    b05c:	11000304 	addi	r4,r2,12
    b060:	e0bffb17 	ldw	r2,-20(fp)
    b064:	10800117 	ldw	r2,4(r2)
    b068:	1007883a 	mov	r3,r2
    b06c:	2005883a 	mov	r2,r4
    b070:	10c00035 	stwio	r3,0(r2)
    b074:	e0bffa17 	ldw	r2,-24(fp)
    b078:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b07c:	e0bff417 	ldw	r2,-48(fp)
    b080:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    b084:	e0bff617 	ldw	r2,-40(fp)
    b088:	1004c03a 	cmpne	r2,r2,zero
    b08c:	1000031e 	bne	r2,zero,b09c <altera_avalon_uart_read+0x194>
    b090:	e0bffd17 	ldw	r2,-12(fp)
    b094:	1004c03a 	cmpne	r2,r2,zero
    b098:	103fc81e 	bne	r2,zero,afbc <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b09c:	0005303a 	rdctl	r2,status
    b0a0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b0a4:	e0fff317 	ldw	r3,-52(fp)
    b0a8:	00bfff84 	movi	r2,-2
    b0ac:	1884703a 	and	r2,r3,r2
    b0b0:	1001703a 	wrctl	status,r2
  
  return context;
    b0b4:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    b0b8:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b0bc:	e0bffb17 	ldw	r2,-20(fp)
    b0c0:	10800117 	ldw	r2,4(r2)
    b0c4:	10c02014 	ori	r3,r2,128
    b0c8:	e0bffb17 	ldw	r2,-20(fp)
    b0cc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b0d0:	e0bffb17 	ldw	r2,-20(fp)
    b0d4:	10800017 	ldw	r2,0(r2)
    b0d8:	11000304 	addi	r4,r2,12
    b0dc:	e0bffb17 	ldw	r2,-20(fp)
    b0e0:	10800117 	ldw	r2,4(r2)
    b0e4:	1007883a 	mov	r3,r2
    b0e8:	2005883a 	mov	r2,r4
    b0ec:	10c00035 	stwio	r3,0(r2)
    b0f0:	e0bffa17 	ldw	r2,-24(fp)
    b0f4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b0f8:	e0bff217 	ldw	r2,-56(fp)
    b0fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    b100:	e0bff703 	ldbu	r2,-36(fp)
    b104:	1005003a 	cmpeq	r2,r2,zero
    b108:	1000031e 	bne	r2,zero,b118 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    b10c:	00bffd04 	movi	r2,-12
    b110:	e0bfff15 	stw	r2,-4(fp)
    b114:	00000206 	br	b120 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    b118:	e0bff617 	ldw	r2,-40(fp)
    b11c:	e0bfff15 	stw	r2,-4(fp)
    b120:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b124:	e037883a 	mov	sp,fp
    b128:	dfc00117 	ldw	ra,4(sp)
    b12c:	df000017 	ldw	fp,0(sp)
    b130:	dec00204 	addi	sp,sp,8
    b134:	f800283a 	ret

0000b138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b138:	defffd04 	addi	sp,sp,-12
    b13c:	dfc00215 	stw	ra,8(sp)
    b140:	df000115 	stw	fp,4(sp)
    b144:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b148:	00800074 	movhi	r2,1
    b14c:	10b4d704 	addi	r2,r2,-11428
    b150:	10800017 	ldw	r2,0(r2)
    b154:	1005003a 	cmpeq	r2,r2,zero
    b158:	1000061e 	bne	r2,zero,b174 <alt_get_errno+0x3c>
    b15c:	00800074 	movhi	r2,1
    b160:	10b4d704 	addi	r2,r2,-11428
    b164:	10800017 	ldw	r2,0(r2)
    b168:	103ee83a 	callr	r2
    b16c:	e0bfff15 	stw	r2,-4(fp)
    b170:	00000306 	br	b180 <alt_get_errno+0x48>
    b174:	00800074 	movhi	r2,1
    b178:	10b79604 	addi	r2,r2,-8616
    b17c:	e0bfff15 	stw	r2,-4(fp)
    b180:	e0bfff17 	ldw	r2,-4(fp)
}
    b184:	e037883a 	mov	sp,fp
    b188:	dfc00117 	ldw	ra,4(sp)
    b18c:	df000017 	ldw	fp,0(sp)
    b190:	dec00204 	addi	sp,sp,8
    b194:	f800283a 	ret

0000b198 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    b198:	defff204 	addi	sp,sp,-56
    b19c:	dfc00d15 	stw	ra,52(sp)
    b1a0:	df000c15 	stw	fp,48(sp)
    b1a4:	df000c04 	addi	fp,sp,48
    b1a8:	e13ffc15 	stw	r4,-16(fp)
    b1ac:	e17ffd15 	stw	r5,-12(fp)
    b1b0:	e1bffe15 	stw	r6,-8(fp)
    b1b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    b1b8:	e0bffe17 	ldw	r2,-8(fp)
    b1bc:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    b1c0:	e0bfff17 	ldw	r2,-4(fp)
    b1c4:	1090000c 	andi	r2,r2,16384
    b1c8:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    b1cc:	00004006 	br	b2d0 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b1d0:	e0bffc17 	ldw	r2,-16(fp)
    b1d4:	10800517 	ldw	r2,20(r2)
    b1d8:	10800044 	addi	r2,r2,1
    b1dc:	10800fcc 	andi	r2,r2,63
    b1e0:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    b1e4:	e0bffc17 	ldw	r2,-16(fp)
    b1e8:	10c00417 	ldw	r3,16(r2)
    b1ec:	e0bff917 	ldw	r2,-28(fp)
    b1f0:	1880251e 	bne	r3,r2,b288 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    b1f4:	e0bffa17 	ldw	r2,-24(fp)
    b1f8:	1005003a 	cmpeq	r2,r2,zero
    b1fc:	1000051e 	bne	r2,zero,b214 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    b200:	000b3600 	call	b360 <alt_get_errno>
    b204:	1007883a 	mov	r3,r2
    b208:	008002c4 	movi	r2,11
    b20c:	18800015 	stw	r2,0(r3)
        break;
    b210:	00003206 	br	b2dc <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b214:	0005303a 	rdctl	r2,status
    b218:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b21c:	e0fff717 	ldw	r3,-36(fp)
    b220:	00bfff84 	movi	r2,-2
    b224:	1884703a 	and	r2,r3,r2
    b228:	1001703a 	wrctl	status,r2
  
  return context;
    b22c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    b230:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b234:	e0bffc17 	ldw	r2,-16(fp)
    b238:	10800117 	ldw	r2,4(r2)
    b23c:	10c11014 	ori	r3,r2,1088
    b240:	e0bffc17 	ldw	r2,-16(fp)
    b244:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b248:	e0bffc17 	ldw	r2,-16(fp)
    b24c:	10800017 	ldw	r2,0(r2)
    b250:	11000304 	addi	r4,r2,12
    b254:	e0bffc17 	ldw	r2,-16(fp)
    b258:	10800117 	ldw	r2,4(r2)
    b25c:	1007883a 	mov	r3,r2
    b260:	2005883a 	mov	r2,r4
    b264:	10c00035 	stwio	r3,0(r2)
    b268:	e0bffb17 	ldw	r2,-20(fp)
    b26c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b270:	e0bff617 	ldw	r2,-40(fp)
    b274:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    b278:	e0bffc17 	ldw	r2,-16(fp)
    b27c:	10c00417 	ldw	r3,16(r2)
    b280:	e0bff917 	ldw	r2,-28(fp)
    b284:	18bffc26 	beq	r3,r2,b278 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    b288:	e0bff817 	ldw	r2,-32(fp)
    b28c:	10bfffc4 	addi	r2,r2,-1
    b290:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    b294:	e0bffc17 	ldw	r2,-16(fp)
    b298:	10c00517 	ldw	r3,20(r2)
    b29c:	e0bffd17 	ldw	r2,-12(fp)
    b2a0:	10800003 	ldbu	r2,0(r2)
    b2a4:	1009883a 	mov	r4,r2
    b2a8:	e0bffc17 	ldw	r2,-16(fp)
    b2ac:	1885883a 	add	r2,r3,r2
    b2b0:	10801704 	addi	r2,r2,92
    b2b4:	11000005 	stb	r4,0(r2)
    b2b8:	e0bffd17 	ldw	r2,-12(fp)
    b2bc:	10800044 	addi	r2,r2,1
    b2c0:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    b2c4:	e0fffc17 	ldw	r3,-16(fp)
    b2c8:	e0bff917 	ldw	r2,-28(fp)
    b2cc:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    b2d0:	e0bff817 	ldw	r2,-32(fp)
    b2d4:	1004c03a 	cmpne	r2,r2,zero
    b2d8:	103fbd1e 	bne	r2,zero,b1d0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2dc:	0005303a 	rdctl	r2,status
    b2e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2e4:	e0fff517 	ldw	r3,-44(fp)
    b2e8:	00bfff84 	movi	r2,-2
    b2ec:	1884703a 	and	r2,r3,r2
    b2f0:	1001703a 	wrctl	status,r2
  
  return context;
    b2f4:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    b2f8:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b2fc:	e0bffc17 	ldw	r2,-16(fp)
    b300:	10800117 	ldw	r2,4(r2)
    b304:	10c11014 	ori	r3,r2,1088
    b308:	e0bffc17 	ldw	r2,-16(fp)
    b30c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b310:	e0bffc17 	ldw	r2,-16(fp)
    b314:	10800017 	ldw	r2,0(r2)
    b318:	11000304 	addi	r4,r2,12
    b31c:	e0bffc17 	ldw	r2,-16(fp)
    b320:	10800117 	ldw	r2,4(r2)
    b324:	1007883a 	mov	r3,r2
    b328:	2005883a 	mov	r2,r4
    b32c:	10c00035 	stwio	r3,0(r2)
    b330:	e0bffb17 	ldw	r2,-20(fp)
    b334:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b338:	e0bff417 	ldw	r2,-48(fp)
    b33c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    b340:	e0fffe17 	ldw	r3,-8(fp)
    b344:	e0bff817 	ldw	r2,-32(fp)
    b348:	1885c83a 	sub	r2,r3,r2
}
    b34c:	e037883a 	mov	sp,fp
    b350:	dfc00117 	ldw	ra,4(sp)
    b354:	df000017 	ldw	fp,0(sp)
    b358:	dec00204 	addi	sp,sp,8
    b35c:	f800283a 	ret

0000b360 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b360:	defffd04 	addi	sp,sp,-12
    b364:	dfc00215 	stw	ra,8(sp)
    b368:	df000115 	stw	fp,4(sp)
    b36c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b370:	00800074 	movhi	r2,1
    b374:	10b4d704 	addi	r2,r2,-11428
    b378:	10800017 	ldw	r2,0(r2)
    b37c:	1005003a 	cmpeq	r2,r2,zero
    b380:	1000061e 	bne	r2,zero,b39c <alt_get_errno+0x3c>
    b384:	00800074 	movhi	r2,1
    b388:	10b4d704 	addi	r2,r2,-11428
    b38c:	10800017 	ldw	r2,0(r2)
    b390:	103ee83a 	callr	r2
    b394:	e0bfff15 	stw	r2,-4(fp)
    b398:	00000306 	br	b3a8 <alt_get_errno+0x48>
    b39c:	00800074 	movhi	r2,1
    b3a0:	10b79604 	addi	r2,r2,-8616
    b3a4:	e0bfff15 	stw	r2,-4(fp)
    b3a8:	e0bfff17 	ldw	r2,-4(fp)
}
    b3ac:	e037883a 	mov	sp,fp
    b3b0:	dfc00117 	ldw	ra,4(sp)
    b3b4:	df000017 	ldw	fp,0(sp)
    b3b8:	dec00204 	addi	sp,sp,8
    b3bc:	f800283a 	ret

0000b3c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    b3c0:	defffa04 	addi	sp,sp,-24
    b3c4:	dfc00515 	stw	ra,20(sp)
    b3c8:	df000415 	stw	fp,16(sp)
    b3cc:	df000404 	addi	fp,sp,16
    b3d0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    b3d4:	008000c4 	movi	r2,3
    b3d8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    b3dc:	e0fffc17 	ldw	r3,-16(fp)
    b3e0:	008003f4 	movhi	r2,15
    b3e4:	10909004 	addi	r2,r2,16960
    b3e8:	188b383a 	mul	r5,r3,r2
    b3ec:	01017db4 	movhi	r4,1526
    b3f0:	21384004 	addi	r4,r4,-7936
    b3f4:	00008fc0 	call	8fc <__udivsi3>
    b3f8:	100b883a 	mov	r5,r2
    b3fc:	01200034 	movhi	r4,32768
    b400:	213fffc4 	addi	r4,r4,-1
    b404:	00008fc0 	call	8fc <__udivsi3>
    b408:	100b883a 	mov	r5,r2
    b40c:	e13fff17 	ldw	r4,-4(fp)
    b410:	00008fc0 	call	8fc <__udivsi3>
    b414:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    b418:	e0bffd17 	ldw	r2,-12(fp)
    b41c:	1005003a 	cmpeq	r2,r2,zero
    b420:	1000281e 	bne	r2,zero,b4c4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    b424:	e03ffe15 	stw	zero,-8(fp)
    b428:	00001606 	br	b484 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    b42c:	00a00034 	movhi	r2,32768
    b430:	10bfffc4 	addi	r2,r2,-1
    b434:	10bfffc4 	addi	r2,r2,-1
    b438:	103ffe1e 	bne	r2,zero,b434 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    b43c:	e0fffc17 	ldw	r3,-16(fp)
    b440:	008003f4 	movhi	r2,15
    b444:	10909004 	addi	r2,r2,16960
    b448:	188b383a 	mul	r5,r3,r2
    b44c:	01017db4 	movhi	r4,1526
    b450:	21384004 	addi	r4,r4,-7936
    b454:	00008fc0 	call	8fc <__udivsi3>
    b458:	100b883a 	mov	r5,r2
    b45c:	01200034 	movhi	r4,32768
    b460:	213fffc4 	addi	r4,r4,-1
    b464:	00008fc0 	call	8fc <__udivsi3>
    b468:	1007883a 	mov	r3,r2
    b46c:	e0bfff17 	ldw	r2,-4(fp)
    b470:	10c5c83a 	sub	r2,r2,r3
    b474:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    b478:	e0bffe17 	ldw	r2,-8(fp)
    b47c:	10800044 	addi	r2,r2,1
    b480:	e0bffe15 	stw	r2,-8(fp)
    b484:	e0fffe17 	ldw	r3,-8(fp)
    b488:	e0bffd17 	ldw	r2,-12(fp)
    b48c:	18bfe716 	blt	r3,r2,b42c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    b490:	e0fffc17 	ldw	r3,-16(fp)
    b494:	008003f4 	movhi	r2,15
    b498:	10909004 	addi	r2,r2,16960
    b49c:	188b383a 	mul	r5,r3,r2
    b4a0:	01017db4 	movhi	r4,1526
    b4a4:	21384004 	addi	r4,r4,-7936
    b4a8:	00008fc0 	call	8fc <__udivsi3>
    b4ac:	1007883a 	mov	r3,r2
    b4b0:	e0bfff17 	ldw	r2,-4(fp)
    b4b4:	1885383a 	mul	r2,r3,r2
    b4b8:	10bfffc4 	addi	r2,r2,-1
    b4bc:	103ffe1e 	bne	r2,zero,b4b8 <alt_busy_sleep+0xf8>
    b4c0:	00000c06 	br	b4f4 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    b4c4:	e0fffc17 	ldw	r3,-16(fp)
    b4c8:	008003f4 	movhi	r2,15
    b4cc:	10909004 	addi	r2,r2,16960
    b4d0:	188b383a 	mul	r5,r3,r2
    b4d4:	01017db4 	movhi	r4,1526
    b4d8:	21384004 	addi	r4,r4,-7936
    b4dc:	00008fc0 	call	8fc <__udivsi3>
    b4e0:	1007883a 	mov	r3,r2
    b4e4:	e0bfff17 	ldw	r2,-4(fp)
    b4e8:	1885383a 	mul	r2,r3,r2
    b4ec:	10bfffc4 	addi	r2,r2,-1
    b4f0:	00bffe16 	blt	zero,r2,b4ec <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    b4f4:	0005883a 	mov	r2,zero
}
    b4f8:	e037883a 	mov	sp,fp
    b4fc:	dfc00117 	ldw	ra,4(sp)
    b500:	df000017 	ldw	fp,0(sp)
    b504:	dec00204 	addi	sp,sp,8
    b508:	f800283a 	ret

0000b50c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b50c:	defffe04 	addi	sp,sp,-8
    b510:	df000115 	stw	fp,4(sp)
    b514:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    b518:	e03fff15 	stw	zero,-4(fp)
    b51c:	00000506 	br	b534 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    b520:	e0bfff17 	ldw	r2,-4(fp)
    b524:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    b528:	e0bfff17 	ldw	r2,-4(fp)
    b52c:	10800804 	addi	r2,r2,32
    b530:	e0bfff15 	stw	r2,-4(fp)
    b534:	e0bfff17 	ldw	r2,-4(fp)
    b538:	10820030 	cmpltui	r2,r2,2048
    b53c:	103ff81e 	bne	r2,zero,b520 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b540:	e037883a 	mov	sp,fp
    b544:	df000017 	ldw	fp,0(sp)
    b548:	dec00104 	addi	sp,sp,4
    b54c:	f800283a 	ret

0000b550 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b550:	defff904 	addi	sp,sp,-28
    b554:	dfc00615 	stw	ra,24(sp)
    b558:	df000515 	stw	fp,20(sp)
    b55c:	df000504 	addi	fp,sp,20
    b560:	e13ffd15 	stw	r4,-12(fp)
    b564:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b568:	e0bffd17 	ldw	r2,-12(fp)
    b56c:	1005003a 	cmpeq	r2,r2,zero
    b570:	1000041e 	bne	r2,zero,b584 <alt_dev_llist_insert+0x34>
    b574:	e0bffd17 	ldw	r2,-12(fp)
    b578:	10800217 	ldw	r2,8(r2)
    b57c:	1004c03a 	cmpne	r2,r2,zero
    b580:	1000071e 	bne	r2,zero,b5a0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    b584:	000b6040 	call	b604 <alt_get_errno>
    b588:	1007883a 	mov	r3,r2
    b58c:	00800584 	movi	r2,22
    b590:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b594:	00bffa84 	movi	r2,-22
    b598:	e0bfff15 	stw	r2,-4(fp)
    b59c:	00001306 	br	b5ec <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b5a0:	e0fffd17 	ldw	r3,-12(fp)
    b5a4:	e0bffe17 	ldw	r2,-8(fp)
    b5a8:	e0bffb15 	stw	r2,-20(fp)
    b5ac:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b5b0:	e0fffc17 	ldw	r3,-16(fp)
    b5b4:	e0bffb17 	ldw	r2,-20(fp)
    b5b8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b5bc:	e0bffb17 	ldw	r2,-20(fp)
    b5c0:	10c00017 	ldw	r3,0(r2)
    b5c4:	e0bffc17 	ldw	r2,-16(fp)
    b5c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b5cc:	e0bffb17 	ldw	r2,-20(fp)
    b5d0:	10c00017 	ldw	r3,0(r2)
    b5d4:	e0bffc17 	ldw	r2,-16(fp)
    b5d8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b5dc:	e0fffb17 	ldw	r3,-20(fp)
    b5e0:	e0bffc17 	ldw	r2,-16(fp)
    b5e4:	18800015 	stw	r2,0(r3)

  return 0;  
    b5e8:	e03fff15 	stw	zero,-4(fp)
    b5ec:	e0bfff17 	ldw	r2,-4(fp)
}
    b5f0:	e037883a 	mov	sp,fp
    b5f4:	dfc00117 	ldw	ra,4(sp)
    b5f8:	df000017 	ldw	fp,0(sp)
    b5fc:	dec00204 	addi	sp,sp,8
    b600:	f800283a 	ret

0000b604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b604:	defffd04 	addi	sp,sp,-12
    b608:	dfc00215 	stw	ra,8(sp)
    b60c:	df000115 	stw	fp,4(sp)
    b610:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b614:	00800074 	movhi	r2,1
    b618:	10b4d704 	addi	r2,r2,-11428
    b61c:	10800017 	ldw	r2,0(r2)
    b620:	1005003a 	cmpeq	r2,r2,zero
    b624:	1000061e 	bne	r2,zero,b640 <alt_get_errno+0x3c>
    b628:	00800074 	movhi	r2,1
    b62c:	10b4d704 	addi	r2,r2,-11428
    b630:	10800017 	ldw	r2,0(r2)
    b634:	103ee83a 	callr	r2
    b638:	e0bfff15 	stw	r2,-4(fp)
    b63c:	00000306 	br	b64c <alt_get_errno+0x48>
    b640:	00800074 	movhi	r2,1
    b644:	10b79604 	addi	r2,r2,-8616
    b648:	e0bfff15 	stw	r2,-4(fp)
    b64c:	e0bfff17 	ldw	r2,-4(fp)
}
    b650:	e037883a 	mov	sp,fp
    b654:	dfc00117 	ldw	ra,4(sp)
    b658:	df000017 	ldw	fp,0(sp)
    b65c:	dec00204 	addi	sp,sp,8
    b660:	f800283a 	ret

0000b664 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b664:	defffd04 	addi	sp,sp,-12
    b668:	dfc00215 	stw	ra,8(sp)
    b66c:	df000115 	stw	fp,4(sp)
    b670:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b674:	00bfff04 	movi	r2,-4
    b678:	00c00074 	movhi	r3,1
    b67c:	18f15404 	addi	r3,r3,-15024
    b680:	1885883a 	add	r2,r3,r2
    b684:	e0bfff15 	stw	r2,-4(fp)
    b688:	00000606 	br	b6a4 <_do_ctors+0x40>
        (*ctor) (); 
    b68c:	e0bfff17 	ldw	r2,-4(fp)
    b690:	10800017 	ldw	r2,0(r2)
    b694:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b698:	e0bfff17 	ldw	r2,-4(fp)
    b69c:	10bfff04 	addi	r2,r2,-4
    b6a0:	e0bfff15 	stw	r2,-4(fp)
    b6a4:	e0ffff17 	ldw	r3,-4(fp)
    b6a8:	00800074 	movhi	r2,1
    b6ac:	10b15304 	addi	r2,r2,-15028
    b6b0:	18bff62e 	bgeu	r3,r2,b68c <_do_ctors+0x28>
        (*ctor) (); 
}
    b6b4:	e037883a 	mov	sp,fp
    b6b8:	dfc00117 	ldw	ra,4(sp)
    b6bc:	df000017 	ldw	fp,0(sp)
    b6c0:	dec00204 	addi	sp,sp,8
    b6c4:	f800283a 	ret

0000b6c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b6c8:	defffd04 	addi	sp,sp,-12
    b6cc:	dfc00215 	stw	ra,8(sp)
    b6d0:	df000115 	stw	fp,4(sp)
    b6d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b6d8:	00bfff04 	movi	r2,-4
    b6dc:	00c00074 	movhi	r3,1
    b6e0:	18f15404 	addi	r3,r3,-15024
    b6e4:	1885883a 	add	r2,r3,r2
    b6e8:	e0bfff15 	stw	r2,-4(fp)
    b6ec:	00000606 	br	b708 <_do_dtors+0x40>
        (*dtor) (); 
    b6f0:	e0bfff17 	ldw	r2,-4(fp)
    b6f4:	10800017 	ldw	r2,0(r2)
    b6f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b6fc:	e0bfff17 	ldw	r2,-4(fp)
    b700:	10bfff04 	addi	r2,r2,-4
    b704:	e0bfff15 	stw	r2,-4(fp)
    b708:	e0ffff17 	ldw	r3,-4(fp)
    b70c:	00800074 	movhi	r2,1
    b710:	10b15404 	addi	r2,r2,-15024
    b714:	18bff62e 	bgeu	r3,r2,b6f0 <_do_dtors+0x28>
        (*dtor) (); 
}
    b718:	e037883a 	mov	sp,fp
    b71c:	dfc00117 	ldw	ra,4(sp)
    b720:	df000017 	ldw	fp,0(sp)
    b724:	dec00204 	addi	sp,sp,8
    b728:	f800283a 	ret

0000b72c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b72c:	defffe04 	addi	sp,sp,-8
    b730:	dfc00115 	stw	ra,4(sp)
    b734:	df000015 	stw	fp,0(sp)
    b738:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    b73c:	0009883a 	mov	r4,zero
    b740:	01440004 	movi	r5,4096
    b744:	000c0b40 	call	c0b4 <alt_icache_flush>
#endif
}
    b748:	e037883a 	mov	sp,fp
    b74c:	dfc00117 	ldw	ra,4(sp)
    b750:	df000017 	ldw	fp,0(sp)
    b754:	dec00204 	addi	sp,sp,8
    b758:	f800283a 	ret

0000b75c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b75c:	defff904 	addi	sp,sp,-28
    b760:	dfc00615 	stw	ra,24(sp)
    b764:	df000515 	stw	fp,20(sp)
    b768:	df000504 	addi	fp,sp,20
    b76c:	e13ffc15 	stw	r4,-16(fp)
    b770:	e17ffd15 	stw	r5,-12(fp)
    b774:	e1bffe15 	stw	r6,-8(fp)
    b778:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b77c:	e0800217 	ldw	r2,8(fp)
    b780:	d8800015 	stw	r2,0(sp)
    b784:	e13ffc17 	ldw	r4,-16(fp)
    b788:	e17ffd17 	ldw	r5,-12(fp)
    b78c:	e1bffe17 	ldw	r6,-8(fp)
    b790:	e1ffff17 	ldw	r7,-4(fp)
    b794:	000b9300 	call	b930 <alt_iic_isr_register>
}  
    b798:	e037883a 	mov	sp,fp
    b79c:	dfc00117 	ldw	ra,4(sp)
    b7a0:	df000017 	ldw	fp,0(sp)
    b7a4:	dec00204 	addi	sp,sp,8
    b7a8:	f800283a 	ret

0000b7ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b7ac:	defff904 	addi	sp,sp,-28
    b7b0:	df000615 	stw	fp,24(sp)
    b7b4:	df000604 	addi	fp,sp,24
    b7b8:	e13ffe15 	stw	r4,-8(fp)
    b7bc:	e17fff15 	stw	r5,-4(fp)
    b7c0:	e0bfff17 	ldw	r2,-4(fp)
    b7c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7c8:	0005303a 	rdctl	r2,status
    b7cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7d0:	e0fffb17 	ldw	r3,-20(fp)
    b7d4:	00bfff84 	movi	r2,-2
    b7d8:	1884703a 	and	r2,r3,r2
    b7dc:	1001703a 	wrctl	status,r2
  
  return context;
    b7e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b7e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b7e8:	e0fffc17 	ldw	r3,-16(fp)
    b7ec:	00800044 	movi	r2,1
    b7f0:	10c4983a 	sll	r2,r2,r3
    b7f4:	1007883a 	mov	r3,r2
    b7f8:	00800074 	movhi	r2,1
    b7fc:	10b79a04 	addi	r2,r2,-8600
    b800:	10800017 	ldw	r2,0(r2)
    b804:	1886b03a 	or	r3,r3,r2
    b808:	00800074 	movhi	r2,1
    b80c:	10b79a04 	addi	r2,r2,-8600
    b810:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b814:	00800074 	movhi	r2,1
    b818:	10b79a04 	addi	r2,r2,-8600
    b81c:	10800017 	ldw	r2,0(r2)
    b820:	100170fa 	wrctl	ienable,r2
    b824:	e0bffd17 	ldw	r2,-12(fp)
    b828:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b82c:	e0bffa17 	ldw	r2,-24(fp)
    b830:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b834:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b838:	e037883a 	mov	sp,fp
    b83c:	df000017 	ldw	fp,0(sp)
    b840:	dec00104 	addi	sp,sp,4
    b844:	f800283a 	ret

0000b848 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b848:	defff904 	addi	sp,sp,-28
    b84c:	df000615 	stw	fp,24(sp)
    b850:	df000604 	addi	fp,sp,24
    b854:	e13ffe15 	stw	r4,-8(fp)
    b858:	e17fff15 	stw	r5,-4(fp)
    b85c:	e0bfff17 	ldw	r2,-4(fp)
    b860:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b864:	0005303a 	rdctl	r2,status
    b868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b86c:	e0fffb17 	ldw	r3,-20(fp)
    b870:	00bfff84 	movi	r2,-2
    b874:	1884703a 	and	r2,r3,r2
    b878:	1001703a 	wrctl	status,r2
  
  return context;
    b87c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b880:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    b884:	e0fffc17 	ldw	r3,-16(fp)
    b888:	00800044 	movi	r2,1
    b88c:	10c4983a 	sll	r2,r2,r3
    b890:	0084303a 	nor	r2,zero,r2
    b894:	1007883a 	mov	r3,r2
    b898:	00800074 	movhi	r2,1
    b89c:	10b79a04 	addi	r2,r2,-8600
    b8a0:	10800017 	ldw	r2,0(r2)
    b8a4:	1886703a 	and	r3,r3,r2
    b8a8:	00800074 	movhi	r2,1
    b8ac:	10b79a04 	addi	r2,r2,-8600
    b8b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b8b4:	00800074 	movhi	r2,1
    b8b8:	10b79a04 	addi	r2,r2,-8600
    b8bc:	10800017 	ldw	r2,0(r2)
    b8c0:	100170fa 	wrctl	ienable,r2
    b8c4:	e0bffd17 	ldw	r2,-12(fp)
    b8c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8cc:	e0bffa17 	ldw	r2,-24(fp)
    b8d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b8d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    b8d8:	e037883a 	mov	sp,fp
    b8dc:	df000017 	ldw	fp,0(sp)
    b8e0:	dec00104 	addi	sp,sp,4
    b8e4:	f800283a 	ret

0000b8e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    b8e8:	defffc04 	addi	sp,sp,-16
    b8ec:	df000315 	stw	fp,12(sp)
    b8f0:	df000304 	addi	fp,sp,12
    b8f4:	e13ffe15 	stw	r4,-8(fp)
    b8f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    b8fc:	000530fa 	rdctl	r2,ienable
    b900:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    b904:	e0ffff17 	ldw	r3,-4(fp)
    b908:	00800044 	movi	r2,1
    b90c:	10c4983a 	sll	r2,r2,r3
    b910:	1007883a 	mov	r3,r2
    b914:	e0bffd17 	ldw	r2,-12(fp)
    b918:	1884703a 	and	r2,r3,r2
    b91c:	1004c03a 	cmpne	r2,r2,zero
}
    b920:	e037883a 	mov	sp,fp
    b924:	df000017 	ldw	fp,0(sp)
    b928:	dec00104 	addi	sp,sp,4
    b92c:	f800283a 	ret

0000b930 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b930:	defff404 	addi	sp,sp,-48
    b934:	dfc00b15 	stw	ra,44(sp)
    b938:	df000a15 	stw	fp,40(sp)
    b93c:	df000a04 	addi	fp,sp,40
    b940:	e13ffb15 	stw	r4,-20(fp)
    b944:	e17ffc15 	stw	r5,-16(fp)
    b948:	e1bffd15 	stw	r6,-12(fp)
    b94c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    b950:	00bffa84 	movi	r2,-22
    b954:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    b958:	e0bffc17 	ldw	r2,-16(fp)
    b95c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b960:	e0bff917 	ldw	r2,-28(fp)
    b964:	10800808 	cmpgei	r2,r2,32
    b968:	1000291e 	bne	r2,zero,ba10 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b96c:	0005303a 	rdctl	r2,status
    b970:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b974:	e0fff717 	ldw	r3,-36(fp)
    b978:	00bfff84 	movi	r2,-2
    b97c:	1884703a 	and	r2,r3,r2
    b980:	1001703a 	wrctl	status,r2
  
  return context;
    b984:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    b988:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    b98c:	e0bff917 	ldw	r2,-28(fp)
    b990:	00c00074 	movhi	r3,1
    b994:	18f7ad04 	addi	r3,r3,-8524
    b998:	100490fa 	slli	r2,r2,3
    b99c:	10c7883a 	add	r3,r2,r3
    b9a0:	e0bffd17 	ldw	r2,-12(fp)
    b9a4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    b9a8:	e0bff917 	ldw	r2,-28(fp)
    b9ac:	00c00074 	movhi	r3,1
    b9b0:	18f7ad04 	addi	r3,r3,-8524
    b9b4:	100490fa 	slli	r2,r2,3
    b9b8:	10c5883a 	add	r2,r2,r3
    b9bc:	10c00104 	addi	r3,r2,4
    b9c0:	e0bffe17 	ldw	r2,-8(fp)
    b9c4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    b9c8:	e0bffd17 	ldw	r2,-12(fp)
    b9cc:	1005003a 	cmpeq	r2,r2,zero
    b9d0:	1000051e 	bne	r2,zero,b9e8 <alt_iic_isr_register+0xb8>
    b9d4:	e17ff917 	ldw	r5,-28(fp)
    b9d8:	e13ffb17 	ldw	r4,-20(fp)
    b9dc:	000b7ac0 	call	b7ac <alt_ic_irq_enable>
    b9e0:	e0bfff15 	stw	r2,-4(fp)
    b9e4:	00000406 	br	b9f8 <alt_iic_isr_register+0xc8>
    b9e8:	e17ff917 	ldw	r5,-28(fp)
    b9ec:	e13ffb17 	ldw	r4,-20(fp)
    b9f0:	000b8480 	call	b848 <alt_ic_irq_disable>
    b9f4:	e0bfff15 	stw	r2,-4(fp)
    b9f8:	e0bfff17 	ldw	r2,-4(fp)
    b9fc:	e0bffa15 	stw	r2,-24(fp)
    ba00:	e0bff817 	ldw	r2,-32(fp)
    ba04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba08:	e0bff617 	ldw	r2,-40(fp)
    ba0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ba10:	e0bffa17 	ldw	r2,-24(fp)
}
    ba14:	e037883a 	mov	sp,fp
    ba18:	dfc00117 	ldw	ra,4(sp)
    ba1c:	df000017 	ldw	fp,0(sp)
    ba20:	dec00204 	addi	sp,sp,8
    ba24:	f800283a 	ret

0000ba28 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ba28:	defff904 	addi	sp,sp,-28
    ba2c:	dfc00615 	stw	ra,24(sp)
    ba30:	df000515 	stw	fp,20(sp)
    ba34:	df000504 	addi	fp,sp,20
    ba38:	e13ffc15 	stw	r4,-16(fp)
    ba3c:	e17ffd15 	stw	r5,-12(fp)
    ba40:	e1bffe15 	stw	r6,-8(fp)
    ba44:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ba48:	e13ffd17 	ldw	r4,-12(fp)
    ba4c:	e17ffe17 	ldw	r5,-8(fp)
    ba50:	e1bfff17 	ldw	r6,-4(fp)
    ba54:	000bc400 	call	bc40 <open>
    ba58:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ba5c:	e0bffb17 	ldw	r2,-20(fp)
    ba60:	1004803a 	cmplt	r2,r2,zero
    ba64:	10001c1e 	bne	r2,zero,bad8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    ba68:	e0bffb17 	ldw	r2,-20(fp)
    ba6c:	00c00074 	movhi	r3,1
    ba70:	18f43b04 	addi	r3,r3,-12052
    ba74:	10800324 	muli	r2,r2,12
    ba78:	10c5883a 	add	r2,r2,r3
    ba7c:	10c00017 	ldw	r3,0(r2)
    ba80:	e0bffc17 	ldw	r2,-16(fp)
    ba84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ba88:	e0bffb17 	ldw	r2,-20(fp)
    ba8c:	00c00074 	movhi	r3,1
    ba90:	18f43b04 	addi	r3,r3,-12052
    ba94:	10800324 	muli	r2,r2,12
    ba98:	10c5883a 	add	r2,r2,r3
    ba9c:	10800104 	addi	r2,r2,4
    baa0:	10c00017 	ldw	r3,0(r2)
    baa4:	e0bffc17 	ldw	r2,-16(fp)
    baa8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    baac:	e0bffb17 	ldw	r2,-20(fp)
    bab0:	00c00074 	movhi	r3,1
    bab4:	18f43b04 	addi	r3,r3,-12052
    bab8:	10800324 	muli	r2,r2,12
    babc:	10c5883a 	add	r2,r2,r3
    bac0:	10800204 	addi	r2,r2,8
    bac4:	10c00017 	ldw	r3,0(r2)
    bac8:	e0bffc17 	ldw	r2,-16(fp)
    bacc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bad0:	e13ffb17 	ldw	r4,-20(fp)
    bad4:	000a6940 	call	a694 <alt_release_fd>
  }
} 
    bad8:	e037883a 	mov	sp,fp
    badc:	dfc00117 	ldw	ra,4(sp)
    bae0:	df000017 	ldw	fp,0(sp)
    bae4:	dec00204 	addi	sp,sp,8
    bae8:	f800283a 	ret

0000baec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    baec:	defffb04 	addi	sp,sp,-20
    baf0:	dfc00415 	stw	ra,16(sp)
    baf4:	df000315 	stw	fp,12(sp)
    baf8:	df000304 	addi	fp,sp,12
    bafc:	e13ffd15 	stw	r4,-12(fp)
    bb00:	e17ffe15 	stw	r5,-8(fp)
    bb04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bb08:	01000074 	movhi	r4,1
    bb0c:	21343e04 	addi	r4,r4,-12040
    bb10:	e17ffd17 	ldw	r5,-12(fp)
    bb14:	01800044 	movi	r6,1
    bb18:	01c07fc4 	movi	r7,511
    bb1c:	000ba280 	call	ba28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bb20:	01000074 	movhi	r4,1
    bb24:	21343b04 	addi	r4,r4,-12052
    bb28:	e17ffe17 	ldw	r5,-8(fp)
    bb2c:	000d883a 	mov	r6,zero
    bb30:	01c07fc4 	movi	r7,511
    bb34:	000ba280 	call	ba28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bb38:	01000074 	movhi	r4,1
    bb3c:	21344104 	addi	r4,r4,-12028
    bb40:	e17fff17 	ldw	r5,-4(fp)
    bb44:	01800044 	movi	r6,1
    bb48:	01c07fc4 	movi	r7,511
    bb4c:	000ba280 	call	ba28 <alt_open_fd>
}  
    bb50:	e037883a 	mov	sp,fp
    bb54:	dfc00117 	ldw	ra,4(sp)
    bb58:	df000017 	ldw	fp,0(sp)
    bb5c:	dec00204 	addi	sp,sp,8
    bb60:	f800283a 	ret

0000bb64 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bb64:	defffc04 	addi	sp,sp,-16
    bb68:	df000315 	stw	fp,12(sp)
    bb6c:	df000304 	addi	fp,sp,12
    bb70:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bb74:	e0bffe17 	ldw	r2,-8(fp)
    bb78:	10800217 	ldw	r2,8(r2)
    bb7c:	10d00034 	orhi	r3,r2,16384
    bb80:	e0bffe17 	ldw	r2,-8(fp)
    bb84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bb88:	e03ffd15 	stw	zero,-12(fp)
    bb8c:	00002006 	br	bc10 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bb90:	e0bffd17 	ldw	r2,-12(fp)
    bb94:	00c00074 	movhi	r3,1
    bb98:	18f43b04 	addi	r3,r3,-12052
    bb9c:	10800324 	muli	r2,r2,12
    bba0:	10c5883a 	add	r2,r2,r3
    bba4:	10c00017 	ldw	r3,0(r2)
    bba8:	e0bffe17 	ldw	r2,-8(fp)
    bbac:	10800017 	ldw	r2,0(r2)
    bbb0:	1880141e 	bne	r3,r2,bc04 <alt_file_locked+0xa0>
    bbb4:	e0bffd17 	ldw	r2,-12(fp)
    bbb8:	00c00074 	movhi	r3,1
    bbbc:	18f43b04 	addi	r3,r3,-12052
    bbc0:	10800324 	muli	r2,r2,12
    bbc4:	10c5883a 	add	r2,r2,r3
    bbc8:	10800204 	addi	r2,r2,8
    bbcc:	10800017 	ldw	r2,0(r2)
    bbd0:	1004403a 	cmpge	r2,r2,zero
    bbd4:	10000b1e 	bne	r2,zero,bc04 <alt_file_locked+0xa0>
    bbd8:	e0bffd17 	ldw	r2,-12(fp)
    bbdc:	10800324 	muli	r2,r2,12
    bbe0:	1007883a 	mov	r3,r2
    bbe4:	00800074 	movhi	r2,1
    bbe8:	10b43b04 	addi	r2,r2,-12052
    bbec:	1887883a 	add	r3,r3,r2
    bbf0:	e0bffe17 	ldw	r2,-8(fp)
    bbf4:	18800326 	beq	r3,r2,bc04 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bbf8:	00bffcc4 	movi	r2,-13
    bbfc:	e0bfff15 	stw	r2,-4(fp)
    bc00:	00000a06 	br	bc2c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc04:	e0bffd17 	ldw	r2,-12(fp)
    bc08:	10800044 	addi	r2,r2,1
    bc0c:	e0bffd15 	stw	r2,-12(fp)
    bc10:	00800074 	movhi	r2,1
    bc14:	10b4d604 	addi	r2,r2,-11432
    bc18:	10800017 	ldw	r2,0(r2)
    bc1c:	1007883a 	mov	r3,r2
    bc20:	e0bffd17 	ldw	r2,-12(fp)
    bc24:	18bfda2e 	bgeu	r3,r2,bb90 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bc28:	e03fff15 	stw	zero,-4(fp)
    bc2c:	e0bfff17 	ldw	r2,-4(fp)
}
    bc30:	e037883a 	mov	sp,fp
    bc34:	df000017 	ldw	fp,0(sp)
    bc38:	dec00104 	addi	sp,sp,4
    bc3c:	f800283a 	ret

0000bc40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bc40:	defff404 	addi	sp,sp,-48
    bc44:	dfc00b15 	stw	ra,44(sp)
    bc48:	df000a15 	stw	fp,40(sp)
    bc4c:	df000a04 	addi	fp,sp,40
    bc50:	e13ffb15 	stw	r4,-20(fp)
    bc54:	e17ffc15 	stw	r5,-16(fp)
    bc58:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bc5c:	00bfffc4 	movi	r2,-1
    bc60:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    bc64:	00bffb44 	movi	r2,-19
    bc68:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    bc6c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bc70:	e13ffb17 	ldw	r4,-20(fp)
    bc74:	01400074 	movhi	r5,1
    bc78:	2974d404 	addi	r5,r5,-11440
    bc7c:	000be480 	call	be48 <alt_find_dev>
    bc80:	e0bffa15 	stw	r2,-24(fp)
    bc84:	e0bffa17 	ldw	r2,-24(fp)
    bc88:	1004c03a 	cmpne	r2,r2,zero
    bc8c:	1000051e 	bne	r2,zero,bca4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bc90:	e13ffb17 	ldw	r4,-20(fp)
    bc94:	000bedc0 	call	bedc <alt_find_file>
    bc98:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    bc9c:	00800044 	movi	r2,1
    bca0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bca4:	e0bffa17 	ldw	r2,-24(fp)
    bca8:	1005003a 	cmpeq	r2,r2,zero
    bcac:	1000301e 	bne	r2,zero,bd70 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bcb0:	e13ffa17 	ldw	r4,-24(fp)
    bcb4:	000bffc0 	call	bffc <alt_get_fd>
    bcb8:	e0bff815 	stw	r2,-32(fp)
    bcbc:	e0bff817 	ldw	r2,-32(fp)
    bcc0:	1004403a 	cmpge	r2,r2,zero
    bcc4:	1000031e 	bne	r2,zero,bcd4 <open+0x94>
    {
      status = index;
    bcc8:	e0bff817 	ldw	r2,-32(fp)
    bccc:	e0bff715 	stw	r2,-36(fp)
    bcd0:	00002906 	br	bd78 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    bcd4:	e0bff817 	ldw	r2,-32(fp)
    bcd8:	10800324 	muli	r2,r2,12
    bcdc:	1007883a 	mov	r3,r2
    bce0:	00800074 	movhi	r2,1
    bce4:	10b43b04 	addi	r2,r2,-12052
    bce8:	1885883a 	add	r2,r3,r2
    bcec:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bcf0:	e0fffc17 	ldw	r3,-16(fp)
    bcf4:	00900034 	movhi	r2,16384
    bcf8:	10bfffc4 	addi	r2,r2,-1
    bcfc:	1886703a 	and	r3,r3,r2
    bd00:	e0bff917 	ldw	r2,-28(fp)
    bd04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bd08:	e0bff617 	ldw	r2,-40(fp)
    bd0c:	1004c03a 	cmpne	r2,r2,zero
    bd10:	1000061e 	bne	r2,zero,bd2c <open+0xec>
    bd14:	e13ff917 	ldw	r4,-28(fp)
    bd18:	000bb640 	call	bb64 <alt_file_locked>
    bd1c:	e0bff715 	stw	r2,-36(fp)
    bd20:	e0bff717 	ldw	r2,-36(fp)
    bd24:	1004803a 	cmplt	r2,r2,zero
    bd28:	1000131e 	bne	r2,zero,bd78 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bd2c:	e0bffa17 	ldw	r2,-24(fp)
    bd30:	10800317 	ldw	r2,12(r2)
    bd34:	1005003a 	cmpeq	r2,r2,zero
    bd38:	1000091e 	bne	r2,zero,bd60 <open+0x120>
    bd3c:	e0bffa17 	ldw	r2,-24(fp)
    bd40:	10800317 	ldw	r2,12(r2)
    bd44:	e13ff917 	ldw	r4,-28(fp)
    bd48:	e17ffb17 	ldw	r5,-20(fp)
    bd4c:	e1bffc17 	ldw	r6,-16(fp)
    bd50:	e1fffd17 	ldw	r7,-12(fp)
    bd54:	103ee83a 	callr	r2
    bd58:	e0bfff15 	stw	r2,-4(fp)
    bd5c:	00000106 	br	bd64 <open+0x124>
    bd60:	e03fff15 	stw	zero,-4(fp)
    bd64:	e0bfff17 	ldw	r2,-4(fp)
    bd68:	e0bff715 	stw	r2,-36(fp)
    bd6c:	00000206 	br	bd78 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bd70:	00bffb44 	movi	r2,-19
    bd74:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    bd78:	e0bff717 	ldw	r2,-36(fp)
    bd7c:	1004403a 	cmpge	r2,r2,zero
    bd80:	1000091e 	bne	r2,zero,bda8 <open+0x168>
  {
    alt_release_fd (index);  
    bd84:	e13ff817 	ldw	r4,-32(fp)
    bd88:	000a6940 	call	a694 <alt_release_fd>
    ALT_ERRNO = -status;
    bd8c:	000bdc80 	call	bdc8 <alt_get_errno>
    bd90:	e0fff717 	ldw	r3,-36(fp)
    bd94:	00c7c83a 	sub	r3,zero,r3
    bd98:	10c00015 	stw	r3,0(r2)
    return -1;
    bd9c:	00bfffc4 	movi	r2,-1
    bda0:	e0bffe15 	stw	r2,-8(fp)
    bda4:	00000206 	br	bdb0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    bda8:	e0bff817 	ldw	r2,-32(fp)
    bdac:	e0bffe15 	stw	r2,-8(fp)
    bdb0:	e0bffe17 	ldw	r2,-8(fp)
}
    bdb4:	e037883a 	mov	sp,fp
    bdb8:	dfc00117 	ldw	ra,4(sp)
    bdbc:	df000017 	ldw	fp,0(sp)
    bdc0:	dec00204 	addi	sp,sp,8
    bdc4:	f800283a 	ret

0000bdc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdc8:	defffd04 	addi	sp,sp,-12
    bdcc:	dfc00215 	stw	ra,8(sp)
    bdd0:	df000115 	stw	fp,4(sp)
    bdd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bdd8:	00800074 	movhi	r2,1
    bddc:	10b4d704 	addi	r2,r2,-11428
    bde0:	10800017 	ldw	r2,0(r2)
    bde4:	1005003a 	cmpeq	r2,r2,zero
    bde8:	1000061e 	bne	r2,zero,be04 <alt_get_errno+0x3c>
    bdec:	00800074 	movhi	r2,1
    bdf0:	10b4d704 	addi	r2,r2,-11428
    bdf4:	10800017 	ldw	r2,0(r2)
    bdf8:	103ee83a 	callr	r2
    bdfc:	e0bfff15 	stw	r2,-4(fp)
    be00:	00000306 	br	be10 <alt_get_errno+0x48>
    be04:	00800074 	movhi	r2,1
    be08:	10b79604 	addi	r2,r2,-8616
    be0c:	e0bfff15 	stw	r2,-4(fp)
    be10:	e0bfff17 	ldw	r2,-4(fp)
}
    be14:	e037883a 	mov	sp,fp
    be18:	dfc00117 	ldw	ra,4(sp)
    be1c:	df000017 	ldw	fp,0(sp)
    be20:	dec00204 	addi	sp,sp,8
    be24:	f800283a 	ret

0000be28 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    be28:	deffff04 	addi	sp,sp,-4
    be2c:	df000015 	stw	fp,0(sp)
    be30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    be34:	000170fa 	wrctl	ienable,zero
}
    be38:	e037883a 	mov	sp,fp
    be3c:	df000017 	ldw	fp,0(sp)
    be40:	dec00104 	addi	sp,sp,4
    be44:	f800283a 	ret

0000be48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    be48:	defff904 	addi	sp,sp,-28
    be4c:	dfc00615 	stw	ra,24(sp)
    be50:	df000515 	stw	fp,20(sp)
    be54:	df000504 	addi	fp,sp,20
    be58:	e13ffd15 	stw	r4,-12(fp)
    be5c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	10800017 	ldw	r2,0(r2)
    be68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    be6c:	e13ffd17 	ldw	r4,-12(fp)
    be70:	00076640 	call	7664 <strlen>
    be74:	10800044 	addi	r2,r2,1
    be78:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    be7c:	00000d06 	br	beb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    be80:	e0bffc17 	ldw	r2,-16(fp)
    be84:	11000217 	ldw	r4,8(r2)
    be88:	e1bffb17 	ldw	r6,-20(fp)
    be8c:	e17ffd17 	ldw	r5,-12(fp)
    be90:	000c1900 	call	c190 <memcmp>
    be94:	1004c03a 	cmpne	r2,r2,zero
    be98:	1000031e 	bne	r2,zero,bea8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    be9c:	e0bffc17 	ldw	r2,-16(fp)
    bea0:	e0bfff15 	stw	r2,-4(fp)
    bea4:	00000706 	br	bec4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    bea8:	e0bffc17 	ldw	r2,-16(fp)
    beac:	10800017 	ldw	r2,0(r2)
    beb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    beb4:	e0fffe17 	ldw	r3,-8(fp)
    beb8:	e0bffc17 	ldw	r2,-16(fp)
    bebc:	10fff01e 	bne	r2,r3,be80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    bec0:	e03fff15 	stw	zero,-4(fp)
    bec4:	e0bfff17 	ldw	r2,-4(fp)
}
    bec8:	e037883a 	mov	sp,fp
    becc:	dfc00117 	ldw	ra,4(sp)
    bed0:	df000017 	ldw	fp,0(sp)
    bed4:	dec00204 	addi	sp,sp,8
    bed8:	f800283a 	ret

0000bedc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    bedc:	defffa04 	addi	sp,sp,-24
    bee0:	dfc00515 	stw	ra,20(sp)
    bee4:	df000415 	stw	fp,16(sp)
    bee8:	df000404 	addi	fp,sp,16
    beec:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    bef0:	00800074 	movhi	r2,1
    bef4:	10b4d204 	addi	r2,r2,-11448
    bef8:	10800017 	ldw	r2,0(r2)
    befc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    bf00:	00003306 	br	bfd0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    bf04:	e0bffd17 	ldw	r2,-12(fp)
    bf08:	11000217 	ldw	r4,8(r2)
    bf0c:	00076640 	call	7664 <strlen>
    bf10:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    bf14:	e0bffd17 	ldw	r2,-12(fp)
    bf18:	10c00217 	ldw	r3,8(r2)
    bf1c:	e0bffc17 	ldw	r2,-16(fp)
    bf20:	1885883a 	add	r2,r3,r2
    bf24:	10bfffc4 	addi	r2,r2,-1
    bf28:	10800003 	ldbu	r2,0(r2)
    bf2c:	10803fcc 	andi	r2,r2,255
    bf30:	1080201c 	xori	r2,r2,128
    bf34:	10bfe004 	addi	r2,r2,-128
    bf38:	10800bd8 	cmpnei	r2,r2,47
    bf3c:	1000031e 	bne	r2,zero,bf4c <alt_find_file+0x70>
    {
      len -= 1;
    bf40:	e0bffc17 	ldw	r2,-16(fp)
    bf44:	10bfffc4 	addi	r2,r2,-1
    bf48:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    bf4c:	e0bffc17 	ldw	r2,-16(fp)
    bf50:	1007883a 	mov	r3,r2
    bf54:	e0bffe17 	ldw	r2,-8(fp)
    bf58:	1885883a 	add	r2,r3,r2
    bf5c:	10800003 	ldbu	r2,0(r2)
    bf60:	10803fcc 	andi	r2,r2,255
    bf64:	1080201c 	xori	r2,r2,128
    bf68:	10bfe004 	addi	r2,r2,-128
    bf6c:	10800be0 	cmpeqi	r2,r2,47
    bf70:	10000a1e 	bne	r2,zero,bf9c <alt_find_file+0xc0>
    bf74:	e0bffc17 	ldw	r2,-16(fp)
    bf78:	1007883a 	mov	r3,r2
    bf7c:	e0bffe17 	ldw	r2,-8(fp)
    bf80:	1885883a 	add	r2,r3,r2
    bf84:	10800003 	ldbu	r2,0(r2)
    bf88:	10803fcc 	andi	r2,r2,255
    bf8c:	1080201c 	xori	r2,r2,128
    bf90:	10bfe004 	addi	r2,r2,-128
    bf94:	1004c03a 	cmpne	r2,r2,zero
    bf98:	10000a1e 	bne	r2,zero,bfc4 <alt_find_file+0xe8>
    bf9c:	e0bffd17 	ldw	r2,-12(fp)
    bfa0:	11000217 	ldw	r4,8(r2)
    bfa4:	e1bffc17 	ldw	r6,-16(fp)
    bfa8:	e17ffe17 	ldw	r5,-8(fp)
    bfac:	000c1900 	call	c190 <memcmp>
    bfb0:	1004c03a 	cmpne	r2,r2,zero
    bfb4:	1000031e 	bne	r2,zero,bfc4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    bfb8:	e0bffd17 	ldw	r2,-12(fp)
    bfbc:	e0bfff15 	stw	r2,-4(fp)
    bfc0:	00000806 	br	bfe4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    bfc4:	e0bffd17 	ldw	r2,-12(fp)
    bfc8:	10800017 	ldw	r2,0(r2)
    bfcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    bfd0:	00c00074 	movhi	r3,1
    bfd4:	18f4d204 	addi	r3,r3,-11448
    bfd8:	e0bffd17 	ldw	r2,-12(fp)
    bfdc:	10ffc91e 	bne	r2,r3,bf04 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    bfe0:	e03fff15 	stw	zero,-4(fp)
    bfe4:	e0bfff17 	ldw	r2,-4(fp)
}
    bfe8:	e037883a 	mov	sp,fp
    bfec:	dfc00117 	ldw	ra,4(sp)
    bff0:	df000017 	ldw	fp,0(sp)
    bff4:	dec00204 	addi	sp,sp,8
    bff8:	f800283a 	ret

0000bffc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    bffc:	defffc04 	addi	sp,sp,-16
    c000:	df000315 	stw	fp,12(sp)
    c004:	df000304 	addi	fp,sp,12
    c008:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c00c:	00bffa04 	movi	r2,-24
    c010:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c014:	e03ffe15 	stw	zero,-8(fp)
    c018:	00001e06 	br	c094 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c01c:	e0bffe17 	ldw	r2,-8(fp)
    c020:	00c00074 	movhi	r3,1
    c024:	18f43b04 	addi	r3,r3,-12052
    c028:	10800324 	muli	r2,r2,12
    c02c:	10c5883a 	add	r2,r2,r3
    c030:	10800017 	ldw	r2,0(r2)
    c034:	1004c03a 	cmpne	r2,r2,zero
    c038:	1000131e 	bne	r2,zero,c088 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c03c:	e0bffe17 	ldw	r2,-8(fp)
    c040:	00c00074 	movhi	r3,1
    c044:	18f43b04 	addi	r3,r3,-12052
    c048:	10800324 	muli	r2,r2,12
    c04c:	10c7883a 	add	r3,r2,r3
    c050:	e0bfff17 	ldw	r2,-4(fp)
    c054:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c058:	00800074 	movhi	r2,1
    c05c:	10b4d604 	addi	r2,r2,-11432
    c060:	10c00017 	ldw	r3,0(r2)
    c064:	e0bffe17 	ldw	r2,-8(fp)
    c068:	1880040e 	bge	r3,r2,c07c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    c06c:	00c00074 	movhi	r3,1
    c070:	18f4d604 	addi	r3,r3,-11432
    c074:	e0bffe17 	ldw	r2,-8(fp)
    c078:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c07c:	e0bffe17 	ldw	r2,-8(fp)
    c080:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c084:	00000606 	br	c0a0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c088:	e0bffe17 	ldw	r2,-8(fp)
    c08c:	10800044 	addi	r2,r2,1
    c090:	e0bffe15 	stw	r2,-8(fp)
    c094:	e0bffe17 	ldw	r2,-8(fp)
    c098:	10800810 	cmplti	r2,r2,32
    c09c:	103fdf1e 	bne	r2,zero,c01c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c0a0:	e0bffd17 	ldw	r2,-12(fp)
}
    c0a4:	e037883a 	mov	sp,fp
    c0a8:	df000017 	ldw	fp,0(sp)
    c0ac:	dec00104 	addi	sp,sp,4
    c0b0:	f800283a 	ret

0000c0b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c0b4:	defffb04 	addi	sp,sp,-20
    c0b8:	df000415 	stw	fp,16(sp)
    c0bc:	df000404 	addi	fp,sp,16
    c0c0:	e13ffe15 	stw	r4,-8(fp)
    c0c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c0c8:	e0bfff17 	ldw	r2,-4(fp)
    c0cc:	10840070 	cmpltui	r2,r2,4097
    c0d0:	1000021e 	bne	r2,zero,c0dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c0d4:	00840004 	movi	r2,4096
    c0d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c0dc:	e0fffe17 	ldw	r3,-8(fp)
    c0e0:	e0bfff17 	ldw	r2,-4(fp)
    c0e4:	1885883a 	add	r2,r3,r2
    c0e8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c0ec:	e0bffe17 	ldw	r2,-8(fp)
    c0f0:	e0bffd15 	stw	r2,-12(fp)
    c0f4:	00000506 	br	c10c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c0f8:	e0bffd17 	ldw	r2,-12(fp)
    c0fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c100:	e0bffd17 	ldw	r2,-12(fp)
    c104:	10800804 	addi	r2,r2,32
    c108:	e0bffd15 	stw	r2,-12(fp)
    c10c:	e0fffd17 	ldw	r3,-12(fp)
    c110:	e0bffc17 	ldw	r2,-16(fp)
    c114:	18bff836 	bltu	r3,r2,c0f8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c118:	e0bffe17 	ldw	r2,-8(fp)
    c11c:	108007cc 	andi	r2,r2,31
    c120:	1005003a 	cmpeq	r2,r2,zero
    c124:	1000021e 	bne	r2,zero,c130 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c128:	e0bffd17 	ldw	r2,-12(fp)
    c12c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c130:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c134:	e037883a 	mov	sp,fp
    c138:	df000017 	ldw	fp,0(sp)
    c13c:	dec00104 	addi	sp,sp,4
    c140:	f800283a 	ret

0000c144 <atexit>:
    c144:	200b883a 	mov	r5,r4
    c148:	000d883a 	mov	r6,zero
    c14c:	0009883a 	mov	r4,zero
    c150:	000f883a 	mov	r7,zero
    c154:	000c2041 	jmpi	c204 <__register_exitproc>

0000c158 <exit>:
    c158:	defffe04 	addi	sp,sp,-8
    c15c:	000b883a 	mov	r5,zero
    c160:	dc000015 	stw	r16,0(sp)
    c164:	dfc00115 	stw	ra,4(sp)
    c168:	2021883a 	mov	r16,r4
    c16c:	000c33c0 	call	c33c <__call_exitprocs>
    c170:	00800074 	movhi	r2,1
    c174:	10b4cd04 	addi	r2,r2,-11468
    c178:	11000017 	ldw	r4,0(r2)
    c17c:	20800f17 	ldw	r2,60(r4)
    c180:	10000126 	beq	r2,zero,c188 <exit+0x30>
    c184:	103ee83a 	callr	r2
    c188:	8009883a 	mov	r4,r16
    c18c:	000c52c0 	call	c52c <_exit>

0000c190 <memcmp>:
    c190:	00c000c4 	movi	r3,3
    c194:	1980032e 	bgeu	r3,r6,c1a4 <memcmp+0x14>
    c198:	2144b03a 	or	r2,r4,r5
    c19c:	10c4703a 	and	r2,r2,r3
    c1a0:	10000f26 	beq	r2,zero,c1e0 <memcmp+0x50>
    c1a4:	31ffffc4 	addi	r7,r6,-1
    c1a8:	3000061e 	bne	r6,zero,c1c4 <memcmp+0x34>
    c1ac:	00000a06 	br	c1d8 <memcmp+0x48>
    c1b0:	39ffffc4 	addi	r7,r7,-1
    c1b4:	00bfffc4 	movi	r2,-1
    c1b8:	21000044 	addi	r4,r4,1
    c1bc:	29400044 	addi	r5,r5,1
    c1c0:	38800526 	beq	r7,r2,c1d8 <memcmp+0x48>
    c1c4:	20c00003 	ldbu	r3,0(r4)
    c1c8:	28800003 	ldbu	r2,0(r5)
    c1cc:	18bff826 	beq	r3,r2,c1b0 <memcmp+0x20>
    c1d0:	1885c83a 	sub	r2,r3,r2
    c1d4:	f800283a 	ret
    c1d8:	0005883a 	mov	r2,zero
    c1dc:	f800283a 	ret
    c1e0:	180f883a 	mov	r7,r3
    c1e4:	20c00017 	ldw	r3,0(r4)
    c1e8:	28800017 	ldw	r2,0(r5)
    c1ec:	18bfed1e 	bne	r3,r2,c1a4 <memcmp+0x14>
    c1f0:	31bfff04 	addi	r6,r6,-4
    c1f4:	21000104 	addi	r4,r4,4
    c1f8:	29400104 	addi	r5,r5,4
    c1fc:	39bff936 	bltu	r7,r6,c1e4 <memcmp+0x54>
    c200:	003fe806 	br	c1a4 <memcmp+0x14>

0000c204 <__register_exitproc>:
    c204:	defffa04 	addi	sp,sp,-24
    c208:	00800074 	movhi	r2,1
    c20c:	10b4cd04 	addi	r2,r2,-11468
    c210:	dc000015 	stw	r16,0(sp)
    c214:	14000017 	ldw	r16,0(r2)
    c218:	dd000415 	stw	r20,16(sp)
    c21c:	2829883a 	mov	r20,r5
    c220:	81405217 	ldw	r5,328(r16)
    c224:	dcc00315 	stw	r19,12(sp)
    c228:	dc800215 	stw	r18,8(sp)
    c22c:	dc400115 	stw	r17,4(sp)
    c230:	dfc00515 	stw	ra,20(sp)
    c234:	2023883a 	mov	r17,r4
    c238:	3027883a 	mov	r19,r6
    c23c:	3825883a 	mov	r18,r7
    c240:	28002526 	beq	r5,zero,c2d8 <__register_exitproc+0xd4>
    c244:	29000117 	ldw	r4,4(r5)
    c248:	008007c4 	movi	r2,31
    c24c:	11002716 	blt	r2,r4,c2ec <__register_exitproc+0xe8>
    c250:	8800101e 	bne	r17,zero,c294 <__register_exitproc+0x90>
    c254:	2105883a 	add	r2,r4,r4
    c258:	1085883a 	add	r2,r2,r2
    c25c:	20c00044 	addi	r3,r4,1
    c260:	1145883a 	add	r2,r2,r5
    c264:	0009883a 	mov	r4,zero
    c268:	15000215 	stw	r20,8(r2)
    c26c:	28c00115 	stw	r3,4(r5)
    c270:	2005883a 	mov	r2,r4
    c274:	dfc00517 	ldw	ra,20(sp)
    c278:	dd000417 	ldw	r20,16(sp)
    c27c:	dcc00317 	ldw	r19,12(sp)
    c280:	dc800217 	ldw	r18,8(sp)
    c284:	dc400117 	ldw	r17,4(sp)
    c288:	dc000017 	ldw	r16,0(sp)
    c28c:	dec00604 	addi	sp,sp,24
    c290:	f800283a 	ret
    c294:	29802204 	addi	r6,r5,136
    c298:	00800044 	movi	r2,1
    c29c:	110e983a 	sll	r7,r2,r4
    c2a0:	30c04017 	ldw	r3,256(r6)
    c2a4:	2105883a 	add	r2,r4,r4
    c2a8:	1085883a 	add	r2,r2,r2
    c2ac:	1185883a 	add	r2,r2,r6
    c2b0:	19c6b03a 	or	r3,r3,r7
    c2b4:	14802015 	stw	r18,128(r2)
    c2b8:	14c00015 	stw	r19,0(r2)
    c2bc:	00800084 	movi	r2,2
    c2c0:	30c04015 	stw	r3,256(r6)
    c2c4:	88bfe31e 	bne	r17,r2,c254 <__register_exitproc+0x50>
    c2c8:	30804117 	ldw	r2,260(r6)
    c2cc:	11c4b03a 	or	r2,r2,r7
    c2d0:	30804115 	stw	r2,260(r6)
    c2d4:	003fdf06 	br	c254 <__register_exitproc+0x50>
    c2d8:	00800074 	movhi	r2,1
    c2dc:	10b7ed04 	addi	r2,r2,-8268
    c2e0:	100b883a 	mov	r5,r2
    c2e4:	80805215 	stw	r2,328(r16)
    c2e8:	003fd606 	br	c244 <__register_exitproc+0x40>
    c2ec:	00800034 	movhi	r2,0
    c2f0:	10800004 	addi	r2,r2,0
    c2f4:	1000021e 	bne	r2,zero,c300 <__register_exitproc+0xfc>
    c2f8:	013fffc4 	movi	r4,-1
    c2fc:	003fdc06 	br	c270 <__register_exitproc+0x6c>
    c300:	01006404 	movi	r4,400
    c304:	103ee83a 	callr	r2
    c308:	1007883a 	mov	r3,r2
    c30c:	103ffa26 	beq	r2,zero,c2f8 <__register_exitproc+0xf4>
    c310:	80805217 	ldw	r2,328(r16)
    c314:	180b883a 	mov	r5,r3
    c318:	18000115 	stw	zero,4(r3)
    c31c:	18800015 	stw	r2,0(r3)
    c320:	80c05215 	stw	r3,328(r16)
    c324:	18006215 	stw	zero,392(r3)
    c328:	18006315 	stw	zero,396(r3)
    c32c:	0009883a 	mov	r4,zero
    c330:	883fc826 	beq	r17,zero,c254 <__register_exitproc+0x50>
    c334:	003fd706 	br	c294 <__register_exitproc+0x90>

0000c338 <register_fini>:
    c338:	f800283a 	ret

0000c33c <__call_exitprocs>:
    c33c:	00800074 	movhi	r2,1
    c340:	10b4cd04 	addi	r2,r2,-11468
    c344:	10800017 	ldw	r2,0(r2)
    c348:	defff304 	addi	sp,sp,-52
    c34c:	df000b15 	stw	fp,44(sp)
    c350:	d8800115 	stw	r2,4(sp)
    c354:	00800034 	movhi	r2,0
    c358:	10800004 	addi	r2,r2,0
    c35c:	1005003a 	cmpeq	r2,r2,zero
    c360:	d8800215 	stw	r2,8(sp)
    c364:	d8800117 	ldw	r2,4(sp)
    c368:	dd400815 	stw	r21,32(sp)
    c36c:	dd000715 	stw	r20,28(sp)
    c370:	10805204 	addi	r2,r2,328
    c374:	dfc00c15 	stw	ra,48(sp)
    c378:	ddc00a15 	stw	r23,40(sp)
    c37c:	dd800915 	stw	r22,36(sp)
    c380:	dcc00615 	stw	r19,24(sp)
    c384:	dc800515 	stw	r18,20(sp)
    c388:	dc400415 	stw	r17,16(sp)
    c38c:	dc000315 	stw	r16,12(sp)
    c390:	282b883a 	mov	r21,r5
    c394:	2039883a 	mov	fp,r4
    c398:	d8800015 	stw	r2,0(sp)
    c39c:	2829003a 	cmpeq	r20,r5,zero
    c3a0:	d8800117 	ldw	r2,4(sp)
    c3a4:	14405217 	ldw	r17,328(r2)
    c3a8:	88001026 	beq	r17,zero,c3ec <__call_exitprocs+0xb0>
    c3ac:	ddc00017 	ldw	r23,0(sp)
    c3b0:	88800117 	ldw	r2,4(r17)
    c3b4:	8c802204 	addi	r18,r17,136
    c3b8:	143fffc4 	addi	r16,r2,-1
    c3bc:	80000916 	blt	r16,zero,c3e4 <__call_exitprocs+0xa8>
    c3c0:	05bfffc4 	movi	r22,-1
    c3c4:	a000151e 	bne	r20,zero,c41c <__call_exitprocs+0xe0>
    c3c8:	8409883a 	add	r4,r16,r16
    c3cc:	2105883a 	add	r2,r4,r4
    c3d0:	1485883a 	add	r2,r2,r18
    c3d4:	10c02017 	ldw	r3,128(r2)
    c3d8:	a8c01126 	beq	r21,r3,c420 <__call_exitprocs+0xe4>
    c3dc:	843fffc4 	addi	r16,r16,-1
    c3e0:	85bff81e 	bne	r16,r22,c3c4 <__call_exitprocs+0x88>
    c3e4:	d8800217 	ldw	r2,8(sp)
    c3e8:	10003126 	beq	r2,zero,c4b0 <__call_exitprocs+0x174>
    c3ec:	dfc00c17 	ldw	ra,48(sp)
    c3f0:	df000b17 	ldw	fp,44(sp)
    c3f4:	ddc00a17 	ldw	r23,40(sp)
    c3f8:	dd800917 	ldw	r22,36(sp)
    c3fc:	dd400817 	ldw	r21,32(sp)
    c400:	dd000717 	ldw	r20,28(sp)
    c404:	dcc00617 	ldw	r19,24(sp)
    c408:	dc800517 	ldw	r18,20(sp)
    c40c:	dc400417 	ldw	r17,16(sp)
    c410:	dc000317 	ldw	r16,12(sp)
    c414:	dec00d04 	addi	sp,sp,52
    c418:	f800283a 	ret
    c41c:	8409883a 	add	r4,r16,r16
    c420:	88c00117 	ldw	r3,4(r17)
    c424:	2105883a 	add	r2,r4,r4
    c428:	1445883a 	add	r2,r2,r17
    c42c:	18ffffc4 	addi	r3,r3,-1
    c430:	11800217 	ldw	r6,8(r2)
    c434:	1c001526 	beq	r3,r16,c48c <__call_exitprocs+0x150>
    c438:	10000215 	stw	zero,8(r2)
    c43c:	303fe726 	beq	r6,zero,c3dc <__call_exitprocs+0xa0>
    c440:	00c00044 	movi	r3,1
    c444:	1c06983a 	sll	r3,r3,r16
    c448:	90804017 	ldw	r2,256(r18)
    c44c:	8cc00117 	ldw	r19,4(r17)
    c450:	1884703a 	and	r2,r3,r2
    c454:	10001426 	beq	r2,zero,c4a8 <__call_exitprocs+0x16c>
    c458:	90804117 	ldw	r2,260(r18)
    c45c:	1884703a 	and	r2,r3,r2
    c460:	10000c1e 	bne	r2,zero,c494 <__call_exitprocs+0x158>
    c464:	2105883a 	add	r2,r4,r4
    c468:	1485883a 	add	r2,r2,r18
    c46c:	11400017 	ldw	r5,0(r2)
    c470:	e009883a 	mov	r4,fp
    c474:	303ee83a 	callr	r6
    c478:	88800117 	ldw	r2,4(r17)
    c47c:	98bfc81e 	bne	r19,r2,c3a0 <__call_exitprocs+0x64>
    c480:	b8800017 	ldw	r2,0(r23)
    c484:	147fd526 	beq	r2,r17,c3dc <__call_exitprocs+0xa0>
    c488:	003fc506 	br	c3a0 <__call_exitprocs+0x64>
    c48c:	8c000115 	stw	r16,4(r17)
    c490:	003fea06 	br	c43c <__call_exitprocs+0x100>
    c494:	2105883a 	add	r2,r4,r4
    c498:	1485883a 	add	r2,r2,r18
    c49c:	11000017 	ldw	r4,0(r2)
    c4a0:	303ee83a 	callr	r6
    c4a4:	003ff406 	br	c478 <__call_exitprocs+0x13c>
    c4a8:	303ee83a 	callr	r6
    c4ac:	003ff206 	br	c478 <__call_exitprocs+0x13c>
    c4b0:	88800117 	ldw	r2,4(r17)
    c4b4:	1000081e 	bne	r2,zero,c4d8 <__call_exitprocs+0x19c>
    c4b8:	89000017 	ldw	r4,0(r17)
    c4bc:	20000726 	beq	r4,zero,c4dc <__call_exitprocs+0x1a0>
    c4c0:	b9000015 	stw	r4,0(r23)
    c4c4:	8809883a 	mov	r4,r17
    c4c8:	00000000 	call	0 <__reset>
    c4cc:	bc400017 	ldw	r17,0(r23)
    c4d0:	883fb71e 	bne	r17,zero,c3b0 <__call_exitprocs+0x74>
    c4d4:	003fc506 	br	c3ec <__call_exitprocs+0xb0>
    c4d8:	89000017 	ldw	r4,0(r17)
    c4dc:	882f883a 	mov	r23,r17
    c4e0:	2023883a 	mov	r17,r4
    c4e4:	883fb21e 	bne	r17,zero,c3b0 <__call_exitprocs+0x74>
    c4e8:	003fc006 	br	c3ec <__call_exitprocs+0xb0>

0000c4ec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c4ec:	defffd04 	addi	sp,sp,-12
    c4f0:	df000215 	stw	fp,8(sp)
    c4f4:	df000204 	addi	fp,sp,8
    c4f8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c4fc:	e0bfff17 	ldw	r2,-4(fp)
    c500:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c504:	e0bffe17 	ldw	r2,-8(fp)
    c508:	1005003a 	cmpeq	r2,r2,zero
    c50c:	1000021e 	bne	r2,zero,c518 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c510:	002af070 	cmpltui	zero,zero,43969
    c514:	00000106 	br	c51c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c518:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c51c:	e037883a 	mov	sp,fp
    c520:	df000017 	ldw	fp,0(sp)
    c524:	dec00104 	addi	sp,sp,4
    c528:	f800283a 	ret

0000c52c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c52c:	defffd04 	addi	sp,sp,-12
    c530:	dfc00215 	stw	ra,8(sp)
    c534:	df000115 	stw	fp,4(sp)
    c538:	df000104 	addi	fp,sp,4
    c53c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c540:	e13fff17 	ldw	r4,-4(fp)
    c544:	000c4ec0 	call	c4ec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c548:	003fff06 	br	c548 <_exit+0x1c>
    c54c:	0000c338 	rdprs	zero,zero,780
